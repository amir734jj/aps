-- Like Bigger, but with possibly cyclic type declarations
module TYPE[] begin
  pragma root_phylum(type Program);
  -- the phyla:
  phylum Program;
  phylum Block;
  phylum Decls; -- we don't use sequences here:
  phylum Decl;
  phylum Type;
  phylum Stmts;
  phylum Stmt;
  phylum Expr;
  
  constructor program(block : Block) : Program;
  constructor block(decls : Decls; stmts : Stmts) : Block;
  constructor no_decls() : Decls;
  constructor xcons_decls(ds : Decls; d : Decl) : Decls;
  constructor decl(id : String; ty : Type) : Decl;
  constructor type_decl(id : String; ty : Type) : Decl;
  constructor integer() : Type;
  constructor string() : Type;
  constructor boolean() : Type;
  constructor array(element : Type) : Type;
  constructor named(id : Type) : Type;
  constructor no_stmts() : Stmts;
  constructor xcons_stmts(ss : Stmts; s : Stmt) : Stmts;
  constructor block_stmt(block : Block) : Stmt;
  constructor assign_stmt(e1,e2 : Expr) : Stmt;
  constructor if_stmt(cond : Expr; s1,s2 : Stmt) : Stmt;
  constructor while_stmt(cond : Expr; body : Stmt) : Stmt;
  constructor less(e1,e2 : Expr) : Expr;
  constructor equal(e1,e2 : Expr) : Expr;
  constructor plus(e1,e2 : Expr) : Expr;
  constructor concat(e1,e2 : Expr) : Expr;
  constructor logor(e1,e2 : Expr) : Expr;
  constructor substring(s,i1,i2 : Expr) : Expr;
  constructor array_ref(array,index : Expr) : Expr;
  constructor intconstant(i : Integer) : Expr;
  constructor strconstant(s : String) : Expr;
  constructor boolconstant(s : String) : Expr;
  constructor variable(id : String) : Expr;
end;
  

  
  


