// Generated by aps2scala version 0.3.6
import basic_implicit._;
object test_implicit {
  val test_loaded = true;
}
import test_implicit._;

trait C_TEST[T_Result] extends C_TYPE[T_Result] {
  type T_Test;
  val t_Test : C_TYPE[T_Test]with C_LIST[T_Test,T_String];
  def v_t : T_Test;
  def v_i : T_Integer;
  def v_b : T_Boolean;
  type T_IntegerMaxLattice;
  val t_IntegerMaxLattice : C_TYPE[T_IntegerMaxLattice]with C_MAX_LATTICE[T_IntegerMaxLattice,T_Integer];
  def v_taha : T_IntegerMaxLattice;
}

abstract class T_TEST(t : C_TEST[T_TEST]) extends Value(t) { }

class M_TEST(name : String)
  extends I_TYPE[T_TEST](name)
  with C_TEST[T_TEST]
{
  val t_Result : this.type = this;
  val t_Test = new M_LIST[T_String]("Test",t_String)

  type T_Test = /*TI*/T_LIST[T_String];
  val v_t:T_Test = new M__basic_18[ T_Test](t_Test).v__op_ss(t_Test.v_single("hello,"),t_Test.v_single(" world"));
  val v_i:T_Integer = new M__basic_22[ T_Character,T_String](t_Character,t_String).v_length("hello");
  val v_b:T_Boolean = v_and(new M__basic_2[ T_Test](t_Test).v__op_0(v_t,t_Test.v_none()),new M__basic_2[ T_Test](t_Test).v__op_0(t_Test.v_none(),v_t));
  val t_IntegerMaxLattice = new M_MAX_LATTICE[T_Integer]("IntegerMaxLattice",t_Integer,0)
    /* dumping traits */
    with C_PRINTABLE[T_Integer]
    with C_ORDERED[T_Integer]
    with C_NUMERIC[T_Integer]
    with C_TYPE[T_Integer] {
      override val v_string = t_Integer.v_string;
      override val v_zero = t_Integer.v_zero;
      override val v_one = t_Integer.v_one;
      override val v_plus = t_Integer.v_plus;
      override val v_minus = t_Integer.v_minus;
      override val v_times = t_Integer.v_times;
      override val v_divide = t_Integer.v_divide;
      override val v_unary_plus = t_Integer.v_unary_plus;
      override val v_unary_minus = t_Integer.v_unary_minus;
      override val v_unary_times = t_Integer.v_unary_times;
      override val v_unary_divide = t_Integer.v_unary_divide;
      override val v_assert = t_Integer.v_assert;
      override val v_equal = t_Integer.v_equal;
      override val v_node_equivalent = t_Integer.v_node_equivalent;
    }

  type T_IntegerMaxLattice = /*TI*/T_MAX_LATTICE[T_Integer];
  private class E_taha(anchor : Null) extends Evaluation[Null,T_IntegerMaxLattice](anchor,"taha") {
    override def getDefault = new M__basic_4[ T_IntegerMaxLattice](t_IntegerMaxLattice).v__op_s(1,2);
    override def compute : ValueType = c_taha();
  }
  private object a_taha extends E_taha(null) {}
  def v_taha:T_IntegerMaxLattice = a_taha.get;

  def c_taha() : T_IntegerMaxLattice = {
    Debug.begin("taha");
    try {
      return new M__basic_4[ T_IntegerMaxLattice](t_IntegerMaxLattice).v__op_s(1,2);
    } finally { Debug.end(); }
  }
  override def finish() : Unit = {
    a_taha.get;
    super.finish();
  }

}

