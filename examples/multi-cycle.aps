with "tiny";
module MULTI_CYCLE[T :: var TINY[]] extends T begin
  type IntegerLattice := MAX_LATTICE[Integer](-1000);

  circular attribute Wood.i1 : IntegerLattice;
  circular attribute Wood.i2 : IntegerLattice;

  circular attribute Wood.s1 : IntegerLattice;
  circular attribute Wood.s2 : IntegerLattice;

  attribute Root.answer : Integer;

  pragma synthesized(answer, s1, s2);
  pragma inherited(i1, 12);
  
  match ?r=root(?w) begin
    w.i1 := IntegerLattice$join(0,w.s1);
    w.i2 := IntegerLattice$meet(0,w.s2);
    r.answer := w.s1 + w.s2;
  end;

  match ?w=branch(?x,?y) begin
    x.i1 := w.i1;
    w.s1 := x.s1;
    a : Integer := - x.i1;
    x.i2 := y.s1;
    y.i1 := IntegerLattice$join(a,x.s2);
    y.i2 := w.i2;
    w.s2 := IntegerLattice$meet(-y.s1,y.s2); -- simple dep on y.s1
    b : Integer := - w.i2;
  end;

  match ?l=leaf(?x) begin
    c : Integer := x * 2;
    l.s1 := IntegerLattice$join(c, l.i1);
    l.s2 := IntegerLattice$meet(-c, l.i2);
  end;
  
end;
