with "simple";
-- Simple example of SNC
module SIMPLE_SNC[T :: var SIMPLE[]] extends T begin
  attribute Expr.i1 : Integer;
  attribute Expr.i2 : Integer;
  attribute Expr.s1 : Integer;
  attribute Expr.s2 : Integer;
  
  attribute Stmt.total : Integer;

  pragma inherited(i1,i2);
  pragma synthesized(s1,s2,total);

  match ?s:Stmt=assign_stmt(?e1:Expr,?e2:Expr) begin
    e1.i1 := 0;
    e1.i2 := e1.s1;
    e2.i2 := 0;
    e2.i1 := e2.s2;
    s.total := e1.s2 + e2.s1;
  end;
  
  match ?e:Expr=intconstant(?i:Integer) begin
    e.s1 := e.i1;
    e.s2 := e.i2;
  end;

  match ?b:Block=block(?ds:Decls,?ss:Stmts) begin
  end;

  match ?ds:Decls=no_decls() begin
  end;
  
  match ?ds0:Decls=xcons_decls(?ds1:Decls,?d:Decl) begin
  end;

  match ?d:Decl=decl(?id:String,?ty:Type) begin
  end;

  match ?p:Program=program(?b:Block) begin
  end;

  match ?t:Type=integer_type() begin
  end;
  
  match ?t:Type=string_type() begin
  end;

  match ?:Stmts=no_stmts() begin
  end;
  
  match ?ss0:Stmts=xcons_stmts(?ss1:Stmts,?s:Stmt) begin
  end;

  match ?s:Stmt=block_stmt(?b:Block) begin
  end;
  
  match ?e:Expr=strconstant(?:String) begin
  end;

  match ?e:Expr=variable(?id:String) begin
  end;
end;
