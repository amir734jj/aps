// Generated by aps2scala version 0.3.6
import basic_implicit._;
object fiber_cycle_basic_implicit {
  val fiber_cycle_basic_loaded = true;
import tiny_implicit._;
type T_BROAD_FIBER_CYCLE[T_T] = T_T;
}
import fiber_cycle_basic_implicit._;

import tiny_implicit._;
trait C_BROAD_FIBER_CYCLE[T_Result, T_T] extends C_TYPE[T_Result] with C_TINY[T_Result] {
  type T_Context <: Node;
  val t_Context : C_PHYLUM[T_Context];
  val p_context : PatternFunction[(T_Context,T_Integer)];
  def v_context : (T_Integer) => T_Context;
  type T_ContextPtr;
  val t_ContextPtr : C_TYPE[T_ContextPtr];
  val v_ptr1 : (T_Context) => T_ContextPtr;
  val v_ptr2 : (T_Context) => T_ContextPtr;
  val v_scope1 : (T_Wood) => T_ContextPtr;
  val v_scope2 : (T_Wood) => T_ContextPtr;
  val v_half : (T_Wood) => T_ContextPtr;
  val v_syn : (T_Wood) => T_Integer;
  val v_answer : (T_Root) => T_Integer;
  val v_index_scope : (T_ContextPtr,T_Integer) => T_ContextPtr;
  val v_scope_depth : (T_ContextPtr) => T_Integer;
}

class M_BROAD_FIBER_CYCLE[T_T](name : String,val t_T : C_TYPE[T_T] with C_TINY[T_T])
  extends Module(name)
  with C_BROAD_FIBER_CYCLE[T_T,T_T]
{
  type T_Result = T_T;
  val v_equal = t_T.v_equal;
  val v_string = t_T.v_string;
  val v_assert = t_T.v_assert;
  val v_node_equivalent = t_T.v_node_equivalent;
  type T_Root = t_T.T_Root;
  val t_Root = t_T.t_Root;
  type T_Wood = t_T.T_Wood;
  val t_Wood = t_T.t_Wood;
  val p_root = t_T.p_root;
  val v_root = t_T.v_root;
  val p_branch = t_T.p_branch;
  val v_branch = t_T.v_branch;
  val p_leaf = t_T.p_leaf;
  val v_leaf = t_T.v_leaf;

  val t_Result : this.type = this;
  abstract class T_Context(t : I_PHYLUM[T_Context]) extends Node(t) {}
  val t_Context = new I_PHYLUM[T_Context]("Context");

  case class c_context(v_depth : T_Integer) extends T_Context(t_Context) {
    override def children : List[Node] = List();
    override def toString() : String = Debug.with_level {
      "context("+ v_depth+ ")";
    }
  }
  def u_context(x:Any) : Option[(T_Context,T_Integer)] = x match {
    case x@c_context(v_depth) => Some((x,v_depth));
    case _ => None };
  val v_context = f_context _;
  def f_context(v_depth : T_Integer):T_Context = c_context(v_depth).register;
  val p_context = new PatternFunction[(T_Context,T_Integer)](u_context);

  type T_ContextPtr = T_Context;
  val t_ContextPtr = t_Context;
  private class E_ptr1(anchor : T_Context) extends Evaluation[T_Context,T_ContextPtr](anchor,anchor.toString()+"."+"ptr1") {
  }
  private object a_ptr1 extends Attribute[T_Context,T_ContextPtr](t_Context,t_ContextPtr,"ptr1") {
    override def createEvaluation(anchor : T_Context) : Evaluation[T_Context,T_ContextPtr] = new E_ptr1(anchor);
  }
  val v_ptr1 : T_Context => T_ContextPtr = a_ptr1.get _;

  private class E_ptr2(anchor : T_Context) extends Evaluation[T_Context,T_ContextPtr](anchor,anchor.toString()+"."+"ptr2") {
  }
  private object a_ptr2 extends Attribute[T_Context,T_ContextPtr](t_Context,t_ContextPtr,"ptr2") {
    override def createEvaluation(anchor : T_Context) : Evaluation[T_Context,T_ContextPtr] = new E_ptr2(anchor);
  }
  val v_ptr2 : T_Context => T_ContextPtr = a_ptr2.get _;

  private class E_scope1(anchor : T_Wood) extends Evaluation[T_Wood,T_ContextPtr](anchor,anchor.toString()+"."+"scope1") {
  }
  private object a_scope1 extends Attribute[T_Wood,T_ContextPtr](t_Wood,t_ContextPtr,"scope1") {
    override def createEvaluation(anchor : T_Wood) : Evaluation[T_Wood,T_ContextPtr] = new E_scope1(anchor);
  }
  val v_scope1 : T_Wood => T_ContextPtr = a_scope1.get _;

  private class E_scope2(anchor : T_Wood) extends Evaluation[T_Wood,T_ContextPtr](anchor,anchor.toString()+"."+"scope2") {
  }
  private object a_scope2 extends Attribute[T_Wood,T_ContextPtr](t_Wood,t_ContextPtr,"scope2") {
    override def createEvaluation(anchor : T_Wood) : Evaluation[T_Wood,T_ContextPtr] = new E_scope2(anchor);
  }
  val v_scope2 : T_Wood => T_ContextPtr = a_scope2.get _;

  private class E_half(anchor : T_Wood) extends Evaluation[T_Wood,T_ContextPtr](anchor,anchor.toString()+"."+"half") {
  }
  private object a_half extends Attribute[T_Wood,T_ContextPtr](t_Wood,t_ContextPtr,"half") {
    override def createEvaluation(anchor : T_Wood) : Evaluation[T_Wood,T_ContextPtr] = new E_half(anchor);
  }
  val v_half : T_Wood => T_ContextPtr = a_half.get _;

  private class E_syn(anchor : T_Wood) extends Evaluation[T_Wood,T_Integer](anchor,anchor.toString()+"."+"syn") {
  }
  private object a_syn extends Attribute[T_Wood,T_Integer](t_Wood,t_Integer,"syn") {
    override def createEvaluation(anchor : T_Wood) : Evaluation[T_Wood,T_Integer] = new E_syn(anchor);
  }
  val v_syn : T_Wood => T_Integer = a_syn.get _;

  private class E_answer(anchor : T_Root) extends Evaluation[T_Root,T_Integer](anchor,anchor.toString()+"."+"answer") {
  }
  private object a_answer extends Attribute[T_Root,T_Integer](t_Root,t_Integer,"answer") {
    override def createEvaluation(anchor : T_Root) : Evaluation[T_Root,T_Integer] = new E_answer(anchor);
  }
  val v_answer : T_Root => T_Integer = a_answer.get _;

  private class E1_c(anchor : t_Result.T_Root) extends Evaluation[t_Result.T_Root,T_Context](anchor,anchor.toString()+"."+"c") {
  }
  private object a1_c extends Attribute[t_Result.T_Root,T_Context](t_Result.t_Root,t_Context,"c") {
    override def createEvaluation(anchor : t_Result.T_Root) : Evaluation[t_Result.T_Root,T_Context] = new E1_c(anchor);
  }
  private class E2_c1(anchor : t_Result.T_Wood) extends Evaluation[t_Result.T_Wood,T_Context](anchor,anchor.toString()+"."+"c1") {
  }
  private object a2_c1 extends Attribute[t_Result.T_Wood,T_Context](t_Result.t_Wood,t_Context,"c1") {
    override def createEvaluation(anchor : t_Result.T_Wood) : Evaluation[t_Result.T_Wood,T_Context] = new E2_c1(anchor);
  }
  private class E3_c2(anchor : t_Result.T_Wood) extends Evaluation[t_Result.T_Wood,T_Context](anchor,anchor.toString()+"."+"c2") {
  }
  private object a3_c2 extends Attribute[t_Result.T_Wood,T_Context](t_Result.t_Wood,t_Context,"c2") {
    override def createEvaluation(anchor : t_Result.T_Wood) : Evaluation[t_Result.T_Wood,T_Context] = new E3_c2(anchor);
  }
  val v_index_scope = f_index_scope _;
  def f_index_scope(v_sc : T_ContextPtr, v_i : T_Integer):T_ContextPtr = {
    var  v1_result : T_ContextPtr = null.asInstanceOf[T_ContextPtr];
    var  v2_j : T_Integer = null.asInstanceOf[T_Integer];
    return v1_result;
  }

  val v_scope_depth = f_scope_depth _;
  def f_scope_depth(v_sc : T_ContextPtr):T_Integer = {
    var  v3_result : T_Integer = null.asInstanceOf[T_Integer];
    return v3_result;
  }

  def visit_0_1(node : T_Root) : Unit = node match {
    case p_root(_,_) => visit_0_1_0(node);
  };


  def visit() : Unit = {
    val roots = t_Root.nodes;
  }

  override def finish() : Unit = {
    visit();
    t_Context.finish();
super.finish();
  }

}

