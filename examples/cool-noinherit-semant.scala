// Generated by aps2scala version 0.3.6
import basic_implicit._;
object cool_noinherit_semant_implicit {
  val cool_noinherit_semant_loaded = true;
import cool_symbol_implicit._;
import cool_tree_implicit._;
type T_SEMANT[T_T] = T_T;
}
import cool_noinherit_semant_implicit._;

import cool_symbol_implicit._;
import cool_tree_implicit._;
class M__cool_noinherit_semant_1[T_T,T_E,T_L](val t_T : C_TYPE[T_T] with C_BASIC[T_T],val t_E : C_TYPE[T_E] with C_PAIR[T_E,T_Symbol,T_T],val t_L : C_TYPE[T_L] with C_LIST[T_L,T_E]) {
  val v_lookup = f_lookup _;
  def f_lookup(v_name : T_Symbol, v_l : T_L, v_def : T_T):T_T = {
    try {
      Debug.begin("lookup("+v_name+","+v_l+","+v_def+")");

      v_l match {
        case t_L.p__op_AC(_) => {
          return v_def;
        }
        case _ => {
          var v_f : T_E = new M__basic_16[ T_E,T_L](t_E,t_L).v_first(v_l);
          { val cond = new M__basic_2[ T_Symbol](t_Symbol).v__op_0(t_E.v_fst(v_f),v_name);
            if (cond) {
              return t_E.v_snd(v_f);
            }
            if (!cond) {
              return v_lookup(v_name,new M__basic_17[ T_E,T_L](t_E,t_L).v_butfirst(v_l),v_def);
            }
          }
        }
      }
      throw Evaluation.UndefinedAttributeException("local lookup");
    } finally { Debug.end(); }
  }

};

trait C_SEMANT[T_Result, T_T] extends C_TYPE[T_Result] with C_COOL[T_Result] {
  def v_any_sym : T_Symbol;
  def v_integer_sym : T_Symbol;
  def v_boolean_sym : T_Symbol;
  def v_string_sym : T_Symbol;
  def v_this_sym : T_Symbol;
  def v_main_sym : T_Symbol;
  def v_unit_sym : T_Symbol;
  def v_null_sym : T_Symbol;
  def v_native_sym : T_Symbol;
  def v_error_sym : T_Symbol;
  type T_Errors;
  val t_Errors : C_TYPE[T_Errors]with C_LIST[T_Errors,T_String];
  val v_error : (T_String,T_Integer,T_String) => T_Errors;
  val v_program_errors : (T_Program) => T_Errors;
  val v_classes_errors : (T_Classes) => T_Errors;
  val v_class_errors : (T_Class) => T_Errors;
  val v_features_errors : (T_Features) => T_Errors;
  val v_feature_errors : (T_Feature) => T_Errors;
  val v_formals_errors : (T_Formals) => T_Errors;
  val v_formal_errors : (T_Formal) => T_Errors;
  val v_expr_errors : (T_Expression) => T_Errors;
  val v_exprs_errors : (T_Expressions) => T_Errors;
  val v_features_filename : (T_Features) => T_String;
  val v_feature_filename : (T_Feature) => T_String;
  val v_formals_filename : (T_Formals) => T_String;
  val v_formal_filename : (T_Formal) => T_String;
  val v_exprs_filename : (T_Expressions) => T_String;
  val v_expr_filename : (T_Expression) => T_String;
  type T_CoolType = T_Symbol;
  val t_CoolType : C_TYPE[T_CoolType]with C_SYMBOL[T_CoolType];
  type T_MethodSig;
  val t_MethodSig : C_TYPE[T_MethodSig]with C_LIST[T_MethodSig,T_CoolType];
  type T_MethodEntry;
  val t_MethodEntry : C_TYPE[T_MethodEntry]with C_PAIR[T_MethodEntry,T_Symbol,T_MethodSig];
  type T_MethodTable;
  val t_MethodTable : C_TYPE[T_MethodTable]with C_LIST[T_MethodTable,T_MethodEntry];
  type T_AttrEntry;
  val t_AttrEntry : C_TYPE[T_AttrEntry]with C_PAIR[T_AttrEntry,T_Symbol,T_CoolType];
  type T_AttrTable;
  val t_AttrTable : C_TYPE[T_AttrTable]with C_LIST[T_AttrTable,T_AttrEntry];
  type T_ClassContents;
  val t_ClassContents : C_TYPE[T_ClassContents]with C_PAIR[T_ClassContents,T_MethodTable,T_AttrTable];
  type T_ClassEntry;
  val t_ClassEntry : C_TYPE[T_ClassEntry]with C_PAIR[T_ClassEntry,T_Symbol,T_ClassContents];
  type T_ClassTable;
  val t_ClassTable : C_TYPE[T_ClassTable]with C_LIST[T_ClassTable,T_ClassEntry];
  type T_CoolTypes = T_MethodSig;
  val t_CoolTypes : C_TYPE[T_CoolTypes]with C_LIST[T_CoolTypes,T_CoolType];
  def v_no_method_sig : T_MethodSig;
  def v_fake_method_entry : T_MethodEntry;
  def v_no_class_contents : T_ClassContents;
  val v_class_is_undefined : (T_Symbol,T_ClassTable) => T_Boolean;
  val v_features_class : (T_Features) => T_Symbol;
  val v_feature_class : (T_Feature) => T_Symbol;
  val v_classes_classtable : (T_Classes) => T_ClassTable;
  val v_class_classtable : (T_Class) => T_ClassTable;
  val v_features_classtable : (T_Features) => T_ClassTable;
  val v_feature_classtable : (T_Feature) => T_ClassTable;
  val v_formals_classtable : (T_Formals) => T_ClassTable;
  val v_formal_classtable : (T_Formal) => T_ClassTable;
  val v_exprs_classtable : (T_Expressions) => T_ClassTable;
  val v_expr_classtable : (T_Expression) => T_ClassTable;
  type T_Entry = T_AttrEntry;
  val t_Entry : C_TYPE[T_Entry]with C_PAIR[T_Entry,T_Symbol,T_CoolType];
  type T_Environment = T_AttrTable;
  val t_Environment : C_TYPE[T_Environment]with C_LIST[T_Environment,T_AttrEntry];
  val v_classes_classentries : (T_Classes) => T_ClassTable;
  val v_class_classentry : (T_Class) => T_ClassEntry;
  val v_features_methods : (T_Features) => T_MethodTable;
  val v_features_attrs : (T_Features) => T_AttrTable;
  val v_feature_methods : (T_Feature) => T_MethodTable;
  val v_feature_attrs : (T_Feature) => T_AttrTable;
  val v_formals_entries : (T_Formals) => T_Environment;
  val v_formal_entry : (T_Formal) => T_Entry;
  val v_type_equal : (T_CoolType,T_CoolType) => T_Boolean;
  val v_sig_equal : (T_MethodSig,T_MethodSig) => T_Boolean;
  val v_entries_types : (T_Environment) => T_CoolTypes;
  val v_expr_env : (T_Expression) => T_Environment;
  val v_expr_type : (T_Expression) => T_CoolType;
  val v_check_arithmetic : (T_String,T_Integer,T_CoolType,T_String) => T_Errors;
  val v_check_arithmetic2 : (T_String,T_Integer,T_CoolType,T_Integer,T_CoolType,T_String) => T_Errors;
  val v_exprs_env : (T_Expressions) => T_Environment;
  val v_exprs_types : (T_Expressions) => T_CoolTypes;
  val v_actuals_errors : (T_String,T_Integer,T_CoolTypes,T_CoolTypes) => T_Errors;
}

class M_SEMANT[T_T](name : String,val t_T : C_TYPE[T_T] with C_COOL[T_T])
  extends Module(name)
  with C_SEMANT[T_T,T_T]
{
  type T_Result = T_T;
  val v_equal = t_T.v_equal;
  val v_string = t_T.v_string;
  val v_assert = t_T.v_assert;
  val v_node_equivalent = t_T.v_node_equivalent;
  type T_Program = t_T.T_Program;
  val t_Program = t_T.t_Program;
  type T_Class = t_T.T_Class;
  val t_Class = t_T.t_Class;
  type T_Classes = t_T.T_Classes;
  val t_Classes = t_T.t_Classes;
  type T_Feature = t_T.T_Feature;
  val t_Feature = t_T.t_Feature;
  type T_Features = t_T.T_Features;
  val t_Features = t_T.t_Features;
  type T_Formal = t_T.T_Formal;
  val t_Formal = t_T.t_Formal;
  type T_Formals = t_T.T_Formals;
  val t_Formals = t_T.t_Formals;
  type T_Expression = t_T.T_Expression;
  val t_Expression = t_T.t_Expression;
  type T_Expressions = t_T.T_Expressions;
  val t_Expressions = t_T.t_Expressions;
  type T_Case = t_T.T_Case;
  val t_Case = t_T.t_Case;
  type T_Cases = t_T.T_Cases;
  val t_Cases = t_T.t_Cases;
  val p_program = t_T.p_program;
  val v_program = t_T.v_program;
  val p_class_decl = t_T.p_class_decl;
  val v_class_decl = t_T.v_class_decl;
  val p_method = t_T.p_method;
  val v_method = t_T.v_method;
  val p_attr = t_T.p_attr;
  val v_attr = t_T.v_attr;
  val p_formal = t_T.p_formal;
  val v_formal = t_T.v_formal;
  val p_branch = t_T.p_branch;
  val v_branch = t_T.v_branch;
  val p_assign = t_T.p_assign;
  val v_assign = t_T.v_assign;
  val p_static_dispatch = t_T.p_static_dispatch;
  val v_static_dispatch = t_T.v_static_dispatch;
  val p_dispatch = t_T.p_dispatch;
  val v_dispatch = t_T.v_dispatch;
  val p_cond = t_T.p_cond;
  val v_cond = t_T.v_cond;
  val p_loop = t_T.p_loop;
  val v_loop = t_T.v_loop;
  val p_typecase = t_T.p_typecase;
  val v_typecase = t_T.v_typecase;
  val p_block = t_T.p_block;
  val v_block = t_T.v_block;
  val p_let = t_T.p_let;
  val v_let = t_T.v_let;
  val p_add = t_T.p_add;
  val v_add = t_T.v_add;
  val p_sub = t_T.p_sub;
  val v_sub = t_T.v_sub;
  val p_mul = t_T.p_mul;
  val v_mul = t_T.v_mul;
  val p_div = t_T.p_div;
  val v_div = t_T.v_div;
  val p_neg = t_T.p_neg;
  val v_neg = t_T.v_neg;
  val p_lt = t_T.p_lt;
  val v_lt = t_T.v_lt;
  val p_leq = t_T.p_leq;
  val v_leq = t_T.v_leq;
  val p_comp = t_T.p_comp;
  val v_comp = t_T.v_comp;
  val p_int_lit = t_T.p_int_lit;
  val v_int_lit = t_T.v_int_lit;
  val p_bool_lit = t_T.p_bool_lit;
  val v_bool_lit = t_T.v_bool_lit;
  val p_string_lit = t_T.p_string_lit;
  val v_string_lit = t_T.v_string_lit;
  val p_alloc = t_T.p_alloc;
  val v_alloc = t_T.v_alloc;
  val p_nil = t_T.p_nil;
  val v_nil = t_T.v_nil;
  val p_unit = t_T.p_unit;
  val v_unit = t_T.v_unit;
  val p_no_expr = t_T.p_no_expr;
  val v_no_expr = t_T.v_no_expr;
  val p_variable = t_T.p_variable;
  val v_variable = t_T.v_variable;
  val v_inheritablep = t_T.v_inheritablep;

  val t_Result : this.type = this;
  val v_any_sym:T_Symbol = v_make_symbol("Any");
  val v_integer_sym:T_Symbol = v_make_symbol("Int");
  val v_boolean_sym:T_Symbol = v_make_symbol("Boolean");
  val v_string_sym:T_Symbol = v_make_symbol("String");
  val v_this_sym:T_Symbol = v_make_symbol("this");
  val v_main_sym:T_Symbol = v_make_symbol("Main");
  val v_unit_sym:T_Symbol = v_make_symbol("Unit");
  val v_null_sym:T_Symbol = v_make_symbol("null");
  val v_native_sym:T_Symbol = v_make_symbol("native");
  val v_error_sym:T_Symbol = v_make_symbol("$error$");
  val t_Errors = new M_LIST[T_String]("Errors",t_String)

  type T_Errors = /*TI*/T_LIST[T_String];
  val v_error = f_error _;
  def f_error(v_filename : T_String, v_ln : T_Integer, v_msg : T_String):T_Errors = {
    try {
      Debug.begin("error("+v_filename+","+v_ln+","+v_msg+")");
      return t_Errors.v_single(new M__basic_18[ T_String](t_String).v__op_ss(v_filename,new M__basic_18[ T_String](t_String).v__op_ss(":",new M__basic_18[ T_String](t_String).v__op_ss(t_Integer.v_string(v_ln),new M__basic_18[ T_String](t_String).v__op_ss(": ",v_msg)))));
    } finally { Debug.end(); }
  };
  private class E_program_errors(anchor : T_Program) extends Evaluation[T_Program,T_Errors](anchor,anchor.toString()+"."+"program_errors") {
  }
  private object a_program_errors extends Attribute[T_Program,T_Errors](t_Program,t_Errors,"program_errors") {
    override def createEvaluation(anchor : T_Program) : Evaluation[T_Program,T_Errors] = new E_program_errors(anchor);
  }
  val v_program_errors : T_Program => T_Errors = a_program_errors.get _;

  private class E_classes_errors(anchor : T_Classes) extends Evaluation[T_Classes,T_Errors](anchor,anchor.toString()+"."+"classes_errors") {
  }
  private object a_classes_errors extends Attribute[T_Classes,T_Errors](t_Classes,t_Errors,"classes_errors") {
    override def createEvaluation(anchor : T_Classes) : Evaluation[T_Classes,T_Errors] = new E_classes_errors(anchor);
  }
  val v_classes_errors : T_Classes => T_Errors = a_classes_errors.get _;

  private class E_class_errors(anchor : T_Class) extends Evaluation[T_Class,T_Errors](anchor,anchor.toString()+"."+"class_errors") {
  }
  private object a_class_errors extends Attribute[T_Class,T_Errors](t_Class,t_Errors,"class_errors") {
    override def createEvaluation(anchor : T_Class) : Evaluation[T_Class,T_Errors] = new E_class_errors(anchor);
  }
  val v_class_errors : T_Class => T_Errors = a_class_errors.get _;

  private class E_features_errors(anchor : T_Features) extends Evaluation[T_Features,T_Errors](anchor,anchor.toString()+"."+"features_errors") {
  }
  private object a_features_errors extends Attribute[T_Features,T_Errors](t_Features,t_Errors,"features_errors") {
    override def createEvaluation(anchor : T_Features) : Evaluation[T_Features,T_Errors] = new E_features_errors(anchor);
  }
  val v_features_errors : T_Features => T_Errors = a_features_errors.get _;

  private class E_feature_errors(anchor : T_Feature) extends Evaluation[T_Feature,T_Errors](anchor,anchor.toString()+"."+"feature_errors") {
  }
  private object a_feature_errors extends Attribute[T_Feature,T_Errors](t_Feature,t_Errors,"feature_errors") {
    override def createEvaluation(anchor : T_Feature) : Evaluation[T_Feature,T_Errors] = new E_feature_errors(anchor);
  }
  val v_feature_errors : T_Feature => T_Errors = a_feature_errors.get _;

  private class E_formals_errors(anchor : T_Formals) extends Evaluation[T_Formals,T_Errors](anchor,anchor.toString()+"."+"formals_errors") {
  }
  private object a_formals_errors extends Attribute[T_Formals,T_Errors](t_Formals,t_Errors,"formals_errors") {
    override def createEvaluation(anchor : T_Formals) : Evaluation[T_Formals,T_Errors] = new E_formals_errors(anchor);
  }
  val v_formals_errors : T_Formals => T_Errors = a_formals_errors.get _;

  private class E_formal_errors(anchor : T_Formal) extends Evaluation[T_Formal,T_Errors](anchor,anchor.toString()+"."+"formal_errors") {
  }
  private object a_formal_errors extends Attribute[T_Formal,T_Errors](t_Formal,t_Errors,"formal_errors") {
    override def createEvaluation(anchor : T_Formal) : Evaluation[T_Formal,T_Errors] = new E_formal_errors(anchor);
  }
  val v_formal_errors : T_Formal => T_Errors = a_formal_errors.get _;

  private class E_expr_errors(anchor : T_Expression) extends Evaluation[T_Expression,T_Errors](anchor,anchor.toString()+"."+"expr_errors") {
  }
  private object a_expr_errors extends Attribute[T_Expression,T_Errors](t_Expression,t_Errors,"expr_errors") {
    override def createEvaluation(anchor : T_Expression) : Evaluation[T_Expression,T_Errors] = new E_expr_errors(anchor);
  }
  val v_expr_errors : T_Expression => T_Errors = a_expr_errors.get _;

  private class E_exprs_errors(anchor : T_Expressions) extends Evaluation[T_Expressions,T_Errors](anchor,anchor.toString()+"."+"exprs_errors") {
  }
  private object a_exprs_errors extends Attribute[T_Expressions,T_Errors](t_Expressions,t_Errors,"exprs_errors") {
    override def createEvaluation(anchor : T_Expressions) : Evaluation[T_Expressions,T_Errors] = new E_exprs_errors(anchor);
  }
  val v_exprs_errors : T_Expressions => T_Errors = a_exprs_errors.get _;

  private class E_features_filename(anchor : T_Features) extends Evaluation[T_Features,T_String](anchor,anchor.toString()+"."+"features_filename") {
  }
  private object a_features_filename extends Attribute[T_Features,T_String](t_Features,t_String,"features_filename") {
    override def createEvaluation(anchor : T_Features) : Evaluation[T_Features,T_String] = new E_features_filename(anchor);
  }
  val v_features_filename : T_Features => T_String = a_features_filename.get _;

  private class E_feature_filename(anchor : T_Feature) extends Evaluation[T_Feature,T_String](anchor,anchor.toString()+"."+"feature_filename") {
  }
  private object a_feature_filename extends Attribute[T_Feature,T_String](t_Feature,t_String,"feature_filename") {
    override def createEvaluation(anchor : T_Feature) : Evaluation[T_Feature,T_String] = new E_feature_filename(anchor);
  }
  val v_feature_filename : T_Feature => T_String = a_feature_filename.get _;

  private class E_formals_filename(anchor : T_Formals) extends Evaluation[T_Formals,T_String](anchor,anchor.toString()+"."+"formals_filename") {
  }
  private object a_formals_filename extends Attribute[T_Formals,T_String](t_Formals,t_String,"formals_filename") {
    override def createEvaluation(anchor : T_Formals) : Evaluation[T_Formals,T_String] = new E_formals_filename(anchor);
  }
  val v_formals_filename : T_Formals => T_String = a_formals_filename.get _;

  private class E_formal_filename(anchor : T_Formal) extends Evaluation[T_Formal,T_String](anchor,anchor.toString()+"."+"formal_filename") {
  }
  private object a_formal_filename extends Attribute[T_Formal,T_String](t_Formal,t_String,"formal_filename") {
    override def createEvaluation(anchor : T_Formal) : Evaluation[T_Formal,T_String] = new E_formal_filename(anchor);
  }
  val v_formal_filename : T_Formal => T_String = a_formal_filename.get _;

  private class E_exprs_filename(anchor : T_Expressions) extends Evaluation[T_Expressions,T_String](anchor,anchor.toString()+"."+"exprs_filename") {
  }
  private object a_exprs_filename extends Attribute[T_Expressions,T_String](t_Expressions,t_String,"exprs_filename") {
    override def createEvaluation(anchor : T_Expressions) : Evaluation[T_Expressions,T_String] = new E_exprs_filename(anchor);
  }
  val v_exprs_filename : T_Expressions => T_String = a_exprs_filename.get _;

  private class E_expr_filename(anchor : T_Expression) extends Evaluation[T_Expression,T_String](anchor,anchor.toString()+"."+"expr_filename") {
  }
  private object a_expr_filename extends Attribute[T_Expression,T_String](t_Expression,t_String,"expr_filename") {
    override def createEvaluation(anchor : T_Expression) : Evaluation[T_Expression,T_String] = new E_expr_filename(anchor);
  }
  val v_expr_filename : T_Expression => T_String = a_expr_filename.get _;

  val t_CoolType = t_Symbol;
  val t_MethodSig = new M_LIST[T_CoolType]("MethodSig",t_CoolType)

  type T_MethodSig = /*TI*/T_LIST[T_CoolType];
  val t_MethodEntry = new M_PAIR[T_Symbol,T_MethodSig]("MethodEntry",t_Symbol,t_MethodSig)

  type T_MethodEntry = /*TI*/T_PAIR[T_Symbol,T_MethodSig];
  val t_MethodTable = new M_LIST[T_MethodEntry]("MethodTable",t_MethodEntry)

  type T_MethodTable = /*TI*/T_LIST[T_MethodEntry];
  val t_AttrEntry = new M_PAIR[T_Symbol,T_CoolType]("AttrEntry",t_Symbol,t_CoolType)

  type T_AttrEntry = /*TI*/T_PAIR[T_Symbol,T_CoolType];
  val t_AttrTable = new M_LIST[T_AttrEntry]("AttrTable",t_AttrEntry)

  type T_AttrTable = /*TI*/T_LIST[T_AttrEntry];
  val t_ClassContents = new M_PAIR[T_MethodTable,T_AttrTable]("ClassContents",t_MethodTable,t_AttrTable)

  type T_ClassContents = /*TI*/T_PAIR[T_MethodTable,T_AttrTable];
  val t_ClassEntry = new M_PAIR[T_Symbol,T_ClassContents]("ClassEntry",t_Symbol,t_ClassContents)

  type T_ClassEntry = /*TI*/T_PAIR[T_Symbol,T_ClassContents];
  val t_ClassTable = new M_LIST[T_ClassEntry]("ClassTable",t_ClassEntry)

  type T_ClassTable = /*TI*/T_LIST[T_ClassEntry];
  val t_CoolTypes = t_MethodSig;
  val v_no_method_sig:T_MethodSig = t_MethodSig.v_none();
  val v_fake_method_entry:T_MethodEntry = t_MethodEntry.v_pair(v_error_sym,v_no_method_sig);
  val v_no_class_contents:T_ClassContents = t_ClassContents.v_pair(t_MethodTable.v_single(v_fake_method_entry),t_AttrTable.v_none());
  val v_class_is_undefined = f_class_is_undefined _;
  def f_class_is_undefined(v_name : T_Symbol, v_ct : T_ClassTable):T_Boolean = {
    try {
      Debug.begin("class_is_undefined("+v_name+","+v_ct+")");
      return v_and(new M__basic_2[ T_Symbol](t_Symbol).v__op_w0(v_name,v_native_sym),new M__basic_2[ T_ClassContents](t_ClassContents).v__op_0(new M__cool_noinherit_semant_1[ T_ClassContents,T_ClassEntry,T_ClassTable](t_ClassContents,t_ClassEntry,t_ClassTable).v_lookup(v_name,v_ct,v_no_class_contents),v_no_class_contents));
    } finally { Debug.end(); }
  };
  private class E_features_class(anchor : T_Features) extends Evaluation[T_Features,T_Symbol](anchor,anchor.toString()+"."+"features_class") {
  }
  private object a_features_class extends Attribute[T_Features,T_Symbol](t_Features,t_Symbol,"features_class") {
    override def createEvaluation(anchor : T_Features) : Evaluation[T_Features,T_Symbol] = new E_features_class(anchor);
  }
  val v_features_class : T_Features => T_Symbol = a_features_class.get _;

  private class E_feature_class(anchor : T_Feature) extends Evaluation[T_Feature,T_Symbol](anchor,anchor.toString()+"."+"feature_class") {
  }
  private object a_feature_class extends Attribute[T_Feature,T_Symbol](t_Feature,t_Symbol,"feature_class") {
    override def createEvaluation(anchor : T_Feature) : Evaluation[T_Feature,T_Symbol] = new E_feature_class(anchor);
  }
  val v_feature_class : T_Feature => T_Symbol = a_feature_class.get _;

  private class E_classes_classtable(anchor : T_Classes) extends Evaluation[T_Classes,T_ClassTable](anchor,anchor.toString()+"."+"classes_classtable") {
  }
  private object a_classes_classtable extends Attribute[T_Classes,T_ClassTable](t_Classes,t_ClassTable,"classes_classtable") {
    override def createEvaluation(anchor : T_Classes) : Evaluation[T_Classes,T_ClassTable] = new E_classes_classtable(anchor);
  }
  val v_classes_classtable : T_Classes => T_ClassTable = a_classes_classtable.get _;

  private class E_class_classtable(anchor : T_Class) extends Evaluation[T_Class,T_ClassTable](anchor,anchor.toString()+"."+"class_classtable") {
  }
  private object a_class_classtable extends Attribute[T_Class,T_ClassTable](t_Class,t_ClassTable,"class_classtable") {
    override def createEvaluation(anchor : T_Class) : Evaluation[T_Class,T_ClassTable] = new E_class_classtable(anchor);
  }
  val v_class_classtable : T_Class => T_ClassTable = a_class_classtable.get _;

  private class E_features_classtable(anchor : T_Features) extends Evaluation[T_Features,T_ClassTable](anchor,anchor.toString()+"."+"features_classtable") {
  }
  private object a_features_classtable extends Attribute[T_Features,T_ClassTable](t_Features,t_ClassTable,"features_classtable") {
    override def createEvaluation(anchor : T_Features) : Evaluation[T_Features,T_ClassTable] = new E_features_classtable(anchor);
  }
  val v_features_classtable : T_Features => T_ClassTable = a_features_classtable.get _;

  private class E_feature_classtable(anchor : T_Feature) extends Evaluation[T_Feature,T_ClassTable](anchor,anchor.toString()+"."+"feature_classtable") {
  }
  private object a_feature_classtable extends Attribute[T_Feature,T_ClassTable](t_Feature,t_ClassTable,"feature_classtable") {
    override def createEvaluation(anchor : T_Feature) : Evaluation[T_Feature,T_ClassTable] = new E_feature_classtable(anchor);
  }
  val v_feature_classtable : T_Feature => T_ClassTable = a_feature_classtable.get _;

  private class E_formals_classtable(anchor : T_Formals) extends Evaluation[T_Formals,T_ClassTable](anchor,anchor.toString()+"."+"formals_classtable") {
  }
  private object a_formals_classtable extends Attribute[T_Formals,T_ClassTable](t_Formals,t_ClassTable,"formals_classtable") {
    override def createEvaluation(anchor : T_Formals) : Evaluation[T_Formals,T_ClassTable] = new E_formals_classtable(anchor);
  }
  val v_formals_classtable : T_Formals => T_ClassTable = a_formals_classtable.get _;

  private class E_formal_classtable(anchor : T_Formal) extends Evaluation[T_Formal,T_ClassTable](anchor,anchor.toString()+"."+"formal_classtable") {
  }
  private object a_formal_classtable extends Attribute[T_Formal,T_ClassTable](t_Formal,t_ClassTable,"formal_classtable") {
    override def createEvaluation(anchor : T_Formal) : Evaluation[T_Formal,T_ClassTable] = new E_formal_classtable(anchor);
  }
  val v_formal_classtable : T_Formal => T_ClassTable = a_formal_classtable.get _;

  private class E_exprs_classtable(anchor : T_Expressions) extends Evaluation[T_Expressions,T_ClassTable](anchor,anchor.toString()+"."+"exprs_classtable") {
  }
  private object a_exprs_classtable extends Attribute[T_Expressions,T_ClassTable](t_Expressions,t_ClassTable,"exprs_classtable") {
    override def createEvaluation(anchor : T_Expressions) : Evaluation[T_Expressions,T_ClassTable] = new E_exprs_classtable(anchor);
  }
  val v_exprs_classtable : T_Expressions => T_ClassTable = a_exprs_classtable.get _;

  private class E_expr_classtable(anchor : T_Expression) extends Evaluation[T_Expression,T_ClassTable](anchor,anchor.toString()+"."+"expr_classtable") {
  }
  private object a_expr_classtable extends Attribute[T_Expression,T_ClassTable](t_Expression,t_ClassTable,"expr_classtable") {
    override def createEvaluation(anchor : T_Expression) : Evaluation[T_Expression,T_ClassTable] = new E_expr_classtable(anchor);
  }
  val v_expr_classtable : T_Expression => T_ClassTable = a_expr_classtable.get _;

  val t_Entry = t_AttrEntry;
  val t_Environment = t_AttrTable;
  private class E_classes_classentries(anchor : T_Classes) extends Evaluation[T_Classes,T_ClassTable](anchor,anchor.toString()+"."+"classes_classentries") {
  }
  private object a_classes_classentries extends Attribute[T_Classes,T_ClassTable](t_Classes,t_ClassTable,"classes_classentries") {
    override def createEvaluation(anchor : T_Classes) : Evaluation[T_Classes,T_ClassTable] = new E_classes_classentries(anchor);
  }
  val v_classes_classentries : T_Classes => T_ClassTable = a_classes_classentries.get _;

  private class E_class_classentry(anchor : T_Class) extends Evaluation[T_Class,T_ClassEntry](anchor,anchor.toString()+"."+"class_classentry") {
  }
  private object a_class_classentry extends Attribute[T_Class,T_ClassEntry](t_Class,t_ClassEntry,"class_classentry") {
    override def createEvaluation(anchor : T_Class) : Evaluation[T_Class,T_ClassEntry] = new E_class_classentry(anchor);
  }
  val v_class_classentry : T_Class => T_ClassEntry = a_class_classentry.get _;

  private class E_features_methods(anchor : T_Features) extends Evaluation[T_Features,T_MethodTable](anchor,anchor.toString()+"."+"features_methods") {
  }
  private object a_features_methods extends Attribute[T_Features,T_MethodTable](t_Features,t_MethodTable,"features_methods") {
    override def createEvaluation(anchor : T_Features) : Evaluation[T_Features,T_MethodTable] = new E_features_methods(anchor);
  }
  val v_features_methods : T_Features => T_MethodTable = a_features_methods.get _;

  private class E_features_attrs(anchor : T_Features) extends Evaluation[T_Features,T_AttrTable](anchor,anchor.toString()+"."+"features_attrs") {
  }
  private object a_features_attrs extends Attribute[T_Features,T_AttrTable](t_Features,t_AttrTable,"features_attrs") {
    override def createEvaluation(anchor : T_Features) : Evaluation[T_Features,T_AttrTable] = new E_features_attrs(anchor);
  }
  val v_features_attrs : T_Features => T_AttrTable = a_features_attrs.get _;

  private class E_feature_methods(anchor : T_Feature) extends Evaluation[T_Feature,T_MethodTable](anchor,anchor.toString()+"."+"feature_methods") {
  }
  private object a_feature_methods extends Attribute[T_Feature,T_MethodTable](t_Feature,t_MethodTable,"feature_methods") {
    override def createEvaluation(anchor : T_Feature) : Evaluation[T_Feature,T_MethodTable] = new E_feature_methods(anchor);
  }
  val v_feature_methods : T_Feature => T_MethodTable = a_feature_methods.get _;

  private class E_feature_attrs(anchor : T_Feature) extends Evaluation[T_Feature,T_AttrTable](anchor,anchor.toString()+"."+"feature_attrs") {
  }
  private object a_feature_attrs extends Attribute[T_Feature,T_AttrTable](t_Feature,t_AttrTable,"feature_attrs") {
    override def createEvaluation(anchor : T_Feature) : Evaluation[T_Feature,T_AttrTable] = new E_feature_attrs(anchor);
  }
  val v_feature_attrs : T_Feature => T_AttrTable = a_feature_attrs.get _;

  private class E_formals_entries(anchor : T_Formals) extends Evaluation[T_Formals,T_Environment](anchor,anchor.toString()+"."+"formals_entries") {
  }
  private object a_formals_entries extends Attribute[T_Formals,T_Environment](t_Formals,t_Environment,"formals_entries") {
    override def createEvaluation(anchor : T_Formals) : Evaluation[T_Formals,T_Environment] = new E_formals_entries(anchor);
  }
  val v_formals_entries : T_Formals => T_Environment = a_formals_entries.get _;

  private class E_formal_entry(anchor : T_Formal) extends Evaluation[T_Formal,T_Entry](anchor,anchor.toString()+"."+"formal_entry") {
  }
  private object a_formal_entry extends Attribute[T_Formal,T_Entry](t_Formal,t_Entry,"formal_entry") {
    override def createEvaluation(anchor : T_Formal) : Evaluation[T_Formal,T_Entry] = new E_formal_entry(anchor);
  }
  val v_formal_entry : T_Formal => T_Entry = a_formal_entry.get _;

  val v_type_equal = f_type_equal _;
  def f_type_equal(v_t1 : T_CoolType, v_t2 : T_CoolType):T_Boolean = {
    try {
      Debug.begin("type_equal("+v_t1+","+v_t2+")");
      return v_or(v_or(new M__basic_2[ T_CoolType](t_CoolType).v__op_0(v_t1,v_t2),new M__basic_2[ T_CoolType](t_CoolType).v__op_0(v_t1,v_error_sym)),new M__basic_2[ T_CoolType](t_CoolType).v__op_0(v_t2,v_error_sym));
    } finally { Debug.end(); }
  };
  val v_sig_equal = f_sig_equal _;
  def f_sig_equal(v_ts1 : T_MethodSig, v_ts2 : T_MethodSig):T_Boolean = {
    try {
      Debug.begin("sig_equal("+v_ts1+","+v_ts2+")");
      var  v1_result : T_Boolean = null.asInstanceOf[T_Boolean];
      // sig_equal.G[sig_equal]'shared_info is ready now.
      // sig_equal.ts2 is ready now.
      // sig_equal.ts1 is ready now.
      if (new M__basic_2[ T_MethodSig](t_MethodSig).v__op_0(v_ts1,v_ts2)) {
        v1_result = v_true;
        // place holder for type_equal(...):140.G[type_equal]'shared_info
        // place holder for type_equal(...):140.G[type_equal]'shared_info$error_sym
        // place holder for type_equal(...):140.t2
        // place holder for type_equal(...):140.t1
        // type_equal(...):140.result is ready now.
        // place holder for sig_equal(...):141.G[sig_equal]'shared_info
        // place holder for sig_equal(...):141.ts2
        // place holder for sig_equal(...):141.ts1
        // sig_equal(...):141.result is ready now.
      } else {
        if (v_or(new M__basic_2[ T_MethodSig](t_MethodSig).v__op_0(v_ts1,t_MethodSig.v_none()),new M__basic_2[ T_MethodSig](t_MethodSig).v__op_0(v_ts2,t_MethodSig.v_none()))) {
          v1_result = v_false;
          // place holder for type_equal(...):140.G[type_equal]'shared_info
          // place holder for type_equal(...):140.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):140.t2
          // place holder for type_equal(...):140.t1
          // type_equal(...):140.result is ready now.
          // place holder for sig_equal(...):141.G[sig_equal]'shared_info
          // place holder for sig_equal(...):141.ts2
          // place holder for sig_equal(...):141.ts1
          // sig_equal(...):141.result is ready now.
        } else {
          // place holder for type_equal(...):140.G[type_equal]'shared_info
          // place holder for type_equal(...):140.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):140.t2
          // place holder for type_equal(...):140.t1
          // type_equal(...):140.result is ready now.
          // place holder for sig_equal(...):141.G[sig_equal]'shared_info
          // place holder for sig_equal(...):141.ts2
          // place holder for sig_equal(...):141.ts1
          // sig_equal(...):141.result is ready now.
          v1_result = v_or(v_type_equal(new M__basic_16[ T_CoolType,T_MethodSig](t_CoolType,t_MethodSig).v_first(v_ts1),new M__basic_16[ T_CoolType,T_MethodSig](t_CoolType,t_MethodSig).v_first(v_ts2)),v_sig_equal(new M__basic_17[ T_CoolType,T_MethodSig](t_CoolType,t_MethodSig).v_butfirst(v_ts1),new M__basic_17[ T_CoolType,T_MethodSig](t_CoolType,t_MethodSig).v_butfirst(v_ts2)));
        }
      }
      return v1_result;
    } finally { Debug.end(); }
  }

  private class E1_contents(anchor : t_Result.T_Class) extends Evaluation[t_Result.T_Class,T_ClassContents](anchor,anchor.toString()+"."+"contents") {
  }
  private object a1_contents extends Attribute[t_Result.T_Class,T_ClassContents](t_Result.t_Class,t_ClassContents,"contents") {
    override def createEvaluation(anchor : t_Result.T_Class) : Evaluation[t_Result.T_Class,T_ClassContents] = new E1_contents(anchor);
  }
  private class E2_missing_main_errors(anchor : t_Result.T_Class) extends Evaluation[t_Result.T_Class,T_Errors](anchor,anchor.toString()+"."+"missing_main_errors") {
  }
  private object a2_missing_main_errors extends Attribute[t_Result.T_Class,T_Errors](t_Result.t_Class,t_Errors,"missing_main_errors") {
    override def createEvaluation(anchor : t_Result.T_Class) : Evaluation[t_Result.T_Class,T_Errors] = new E2_missing_main_errors(anchor);
  }
  val v_entries_types = f_entries_types _;
  def f_entries_types(v_e : T_Environment):T_CoolTypes = {
    try {
      Debug.begin("entries_types("+v_e+")");
      var  v2_result : T_CoolTypes = null.asInstanceOf[T_CoolTypes];
      // entries_types.G[entries_types]'shared_info is ready now.
      // entries_types.e is ready now.
      val node = v_e;
      node match {
      case t_Environment.p_append(_,v_e1,v_e2) => {
        // e1 is ready now
        // e2 is ready now
        // place holder for entries_types(...):260.G[entries_types]'shared_info
        // place holder for entries_types(...):260.e
        // entries_types(...):260.result is ready now.
        // place holder for entries_types(...):260.G[entries_types]'shared_info
        // place holder for entries_types(...):260.e
        // entries_types(...):260.result is ready now.
        v2_result = t_CoolTypes.v_append(v_entries_types(v_e1),v_entries_types(v_e2));
        // _ is ready now
        // ty is ready now
      }
      case _ => {
        node match {
        case t_Environment.p_single(_,t_Entry.p_pair(_,v_0,v_ty)) => {
          // e1 is ready now
          // e2 is ready now
          // place holder for entries_types(...):260.G[entries_types]'shared_info
          // place holder for entries_types(...):260.e
          // entries_types(...):260.result is ready now.
          // place holder for entries_types(...):260.G[entries_types]'shared_info
          // place holder for entries_types(...):260.e
          // entries_types(...):260.result is ready now.
          // _ is ready now
          // ty is ready now
          v2_result = t_CoolTypes.v_single(v_ty);
        }
        case _ => {
          v2_result = t_CoolTypes.v_none();
          // e1 is ready now
          // e2 is ready now
          // place holder for entries_types(...):260.G[entries_types]'shared_info
          // place holder for entries_types(...):260.e
          // entries_types(...):260.result is ready now.
          // place holder for entries_types(...):260.G[entries_types]'shared_info
          // place holder for entries_types(...):260.e
          // entries_types(...):260.result is ready now.
          // _ is ready now
          // ty is ready now
        }}
      }}
      return v2_result;
    } finally { Debug.end(); }
  }

  private class E3_sig(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_MethodSig](anchor,anchor.toString()+"."+"sig") {
  }
  private object a3_sig extends Attribute[t_Result.T_Feature,T_MethodSig](t_Result.t_Feature,t_MethodSig,"sig") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_MethodSig] = new E3_sig(anchor);
  }
  private class E4_me(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_MethodEntry](anchor,anchor.toString()+"."+"me") {
  }
  private object a4_me extends Attribute[t_Result.T_Feature,T_MethodEntry](t_Result.t_Feature,t_MethodEntry,"me") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_MethodEntry] = new E4_me(anchor);
  }
  private class E5_env(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_Environment](anchor,anchor.toString()+"."+"env") {
  }
  private object a5_env extends Attribute[t_Result.T_Feature,T_Environment](t_Result.t_Feature,t_Environment,"env") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_Environment] = new E5_env(anchor);
  }
  private class E6_rt_errors(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_Errors](anchor,anchor.toString()+"."+"rt_errors") {
  }
  private object a6_rt_errors extends Attribute[t_Result.T_Feature,T_Errors](t_Result.t_Feature,t_Errors,"rt_errors") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_Errors] = new E6_rt_errors(anchor);
  }
  private class E7_rv_errors(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_Errors](anchor,anchor.toString()+"."+"rv_errors") {
  }
  private object a7_rv_errors extends Attribute[t_Result.T_Feature,T_Errors](t_Result.t_Feature,t_Errors,"rv_errors") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_Errors] = new E7_rv_errors(anchor);
  }
  private class E8_aname(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_String](anchor,anchor.toString()+"."+"aname") {
  }
  private object a8_aname extends Attribute[t_Result.T_Feature,T_String](t_Result.t_Feature,t_String,"aname") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_String] = new E8_aname(anchor);
  }
  private class E9_this_errors(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_Errors](anchor,anchor.toString()+"."+"this_errors") {
  }
  private object a9_this_errors extends Attribute[t_Result.T_Feature,T_Errors](t_Result.t_Feature,t_Errors,"this_errors") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_Errors] = new E9_this_errors(anchor);
  }
  private class E10_type_errors(anchor : t_Result.T_Feature) extends Evaluation[t_Result.T_Feature,T_Errors](anchor,anchor.toString()+"."+"type_errors") {
  }
  private object a10_type_errors extends Attribute[t_Result.T_Feature,T_Errors](t_Result.t_Feature,t_Errors,"type_errors") {
    override def createEvaluation(anchor : t_Result.T_Feature) : Evaluation[t_Result.T_Feature,T_Errors] = new E10_type_errors(anchor);
  }
  private class E11_this_errors(anchor : t_Result.T_Formal) extends Evaluation[t_Result.T_Formal,T_Errors](anchor,anchor.toString()+"."+"this_errors") {
  }
  private object a11_this_errors extends Attribute[t_Result.T_Formal,T_Errors](t_Result.t_Formal,t_Errors,"this_errors") {
    override def createEvaluation(anchor : t_Result.T_Formal) : Evaluation[t_Result.T_Formal,T_Errors] = new E11_this_errors(anchor);
  }
  private class E12_type_errors(anchor : t_Result.T_Formal) extends Evaluation[t_Result.T_Formal,T_Errors](anchor,anchor.toString()+"."+"type_errors") {
  }
  private object a12_type_errors extends Attribute[t_Result.T_Formal,T_Errors](t_Result.t_Formal,t_Errors,"type_errors") {
    override def createEvaluation(anchor : t_Result.T_Formal) : Evaluation[t_Result.T_Formal,T_Errors] = new E12_type_errors(anchor);
  }
  private class E_expr_env(anchor : T_Expression) extends Evaluation[T_Expression,T_Environment](anchor,anchor.toString()+"."+"expr_env") {
  }
  private object a_expr_env extends Attribute[T_Expression,T_Environment](t_Expression,t_Environment,"expr_env") {
    override def createEvaluation(anchor : T_Expression) : Evaluation[T_Expression,T_Environment] = new E_expr_env(anchor);
  }
  val v_expr_env : T_Expression => T_Environment = a_expr_env.get _;

  private class E_expr_type(anchor : T_Expression) extends Evaluation[T_Expression,T_CoolType](anchor,anchor.toString()+"."+"expr_type") {
  }
  private object a_expr_type extends Attribute[T_Expression,T_CoolType](t_Expression,t_CoolType,"expr_type") {
    override def createEvaluation(anchor : T_Expression) : Evaluation[T_Expression,T_CoolType] = new E_expr_type(anchor);
  }
  val v_expr_type : T_Expression => T_CoolType = a_expr_type.get _;

  private class E13_ty(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_CoolType](anchor,anchor.toString()+"."+"ty") {
  }
  private object a13_ty extends Attribute[t_Result.T_Expression,T_CoolType](t_Result.t_Expression,t_CoolType,"ty") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_CoolType] = new E13_ty(anchor);
  }
  private class E14_lookup_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"lookup_errors") {
  }
  private object a14_lookup_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"lookup_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E14_lookup_errors(anchor);
  }
  private class E15_ty(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_CoolType](anchor,anchor.toString()+"."+"ty") {
  }
  private object a15_ty extends Attribute[t_Result.T_Expression,T_CoolType](t_Result.t_Expression,t_CoolType,"ty") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_CoolType] = new E15_ty(anchor);
  }
  private class E16_lookup_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"lookup_errors") {
  }
  private object a16_lookup_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"lookup_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E16_lookup_errors(anchor);
  }
  private class E17_this_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"this_errors") {
  }
  private object a17_this_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"this_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E17_this_errors(anchor);
  }
  private class E18_type_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"type_errors") {
  }
  private object a18_type_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"type_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E18_type_errors(anchor);
  }
  private class E19_rt(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_CoolType](anchor,anchor.toString()+"."+"rt") {
  }
  private object a19_rt extends Attribute[t_Result.T_Expression,T_CoolType](t_Result.t_Expression,t_CoolType,"rt") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_CoolType] = new E19_rt(anchor);
  }
  private class E20_null_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"null_errors") {
  }
  private object a20_null_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"null_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E20_null_errors(anchor);
  }
  private class E21_method_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"method_errors") {
  }
  private object a21_method_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"method_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E21_method_errors(anchor);
  }
  private class E22_cc(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_ClassContents](anchor,anchor.toString()+"."+"cc") {
  }
  private object a22_cc extends Attribute[t_Result.T_Expression,T_ClassContents](t_Result.t_Expression,t_ClassContents,"cc") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_ClassContents] = new E22_cc(anchor);
  }
  private class E23_mt(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_MethodTable](anchor,anchor.toString()+"."+"mt") {
  }
  private object a23_mt extends Attribute[t_Result.T_Expression,T_MethodTable](t_Result.t_Expression,t_MethodTable,"mt") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_MethodTable] = new E23_mt(anchor);
  }
  private class E24_sig(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_MethodSig](anchor,anchor.toString()+"."+"sig") {
  }
  private object a24_sig extends Attribute[t_Result.T_Expression,T_MethodSig](t_Result.t_Expression,t_MethodSig,"sig") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_MethodSig] = new E24_sig(anchor);
  }
  private class E25_pred_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"pred_errors") {
  }
  private object a25_pred_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"pred_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E25_pred_errors(anchor);
  }
  private class E26_join_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"join_errors") {
  }
  private object a26_join_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"join_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E26_join_errors(anchor);
  }
  private class E27_pred_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"pred_errors") {
  }
  private object a27_pred_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"pred_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E27_pred_errors(anchor);
  }
  private class E28_new_env(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Environment](anchor,anchor.toString()+"."+"new_env") {
  }
  private object a28_new_env extends Attribute[t_Result.T_Expression,T_Environment](t_Result.t_Expression,t_Environment,"new_env") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Environment] = new E28_new_env(anchor);
  }
  private class E29_this_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"this_errors") {
  }
  private object a29_this_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"this_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E29_this_errors(anchor);
  }
  private class E30_type_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"type_errors") {
  }
  private object a30_type_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"type_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E30_type_errors(anchor);
  }
  val v_check_arithmetic = f_check_arithmetic _;
  def f_check_arithmetic(v_fnm : T_String, v_n : T_Integer, v_ty : T_CoolType, v_operand : T_String):T_Errors = {
    try {
      Debug.begin("check_arithmetic("+v_fnm+","+v_n+","+v_ty+","+v_operand+")");
      var  v3_result : T_Errors = null.asInstanceOf[T_Errors];
      // check_arithmetic.G[check_arithmetic]'shared_info is ready now.
      // check_arithmetic.G[check_arithmetic]'shared_info$integer_sym is ready now.
      // check_arithmetic.G[check_arithmetic]'shared_info$error_sym is ready now.
      // check_arithmetic.operand is ready now.
      // check_arithmetic.ty is ready now.
      // check_arithmetic.n is ready now.
      // check_arithmetic.fnm is ready now.
      // place holder for type_equal(...):627.G[type_equal]'shared_info
      // place holder for type_equal(...):627.G[type_equal]'shared_info$error_sym
      // place holder for type_equal(...):627.t2
      // place holder for type_equal(...):627.t1
      // type_equal(...):627.result is ready now.
      if (v_not(v_type_equal(v_ty,v_integer_sym))) {
        // place holder for error(...):628.G[error]'shared_info
        // place holder for error(...):628.msg
        // place holder for error(...):628.ln
        // place holder for error(...):628.filename
        // error(...):628.result is ready now.
        v3_result = v_error(v_fnm,v_n,new M__basic_18[ T_String](t_String).v__op_ss(v_operand," should be Int"));
      } else {
        v3_result = t_Errors.v_none();
        // place holder for error(...):628.G[error]'shared_info
        // place holder for error(...):628.msg
        // place holder for error(...):628.ln
        // place holder for error(...):628.filename
        // error(...):628.result is ready now.
      }
      return v3_result;
    } finally { Debug.end(); }
  }

  val v_check_arithmetic2 = f_check_arithmetic2 _;
  def f_check_arithmetic2(v_fnm : T_String, v_n1 : T_Integer, v_ty1 : T_CoolType, v_n2 : T_Integer, v_ty2 : T_CoolType, v_op : T_String):T_Errors = {
    try {
      Debug.begin("check_arithmetic2("+v_fnm+","+v_n1+","+v_ty1+","+v_n2+","+v_ty2+","+v_op+")");
      return new M__basic_18[ T_Errors](t_Errors).v__op_ss(v_check_arithmetic(v_fnm,v_n1,v_ty1,new M__basic_18[ T_String](t_String).v__op_ss("left operand of ",v_op)),v_check_arithmetic(v_fnm,v_n2,v_ty2,new M__basic_18[ T_String](t_String).v__op_ss("right operand of ",v_op)));
    } finally { Debug.end(); }
  };
  private class E31_local_errors(anchor : t_Result.T_Expression) extends Evaluation[t_Result.T_Expression,T_Errors](anchor,anchor.toString()+"."+"local_errors") {
  }
  private object a31_local_errors extends Attribute[t_Result.T_Expression,T_Errors](t_Result.t_Expression,t_Errors,"local_errors") {
    override def createEvaluation(anchor : t_Result.T_Expression) : Evaluation[t_Result.T_Expression,T_Errors] = new E31_local_errors(anchor);
  }
  private class E_exprs_env(anchor : T_Expressions) extends Evaluation[T_Expressions,T_Environment](anchor,anchor.toString()+"."+"exprs_env") {
  }
  private object a_exprs_env extends Attribute[T_Expressions,T_Environment](t_Expressions,t_Environment,"exprs_env") {
    override def createEvaluation(anchor : T_Expressions) : Evaluation[T_Expressions,T_Environment] = new E_exprs_env(anchor);
  }
  val v_exprs_env : T_Expressions => T_Environment = a_exprs_env.get _;

  private class E_exprs_types(anchor : T_Expressions) extends Evaluation[T_Expressions,T_CoolTypes](anchor,anchor.toString()+"."+"exprs_types") {
  }
  private object a_exprs_types extends Attribute[T_Expressions,T_CoolTypes](t_Expressions,t_CoolTypes,"exprs_types") {
    override def createEvaluation(anchor : T_Expressions) : Evaluation[T_Expressions,T_CoolTypes] = new E_exprs_types(anchor);
  }
  val v_exprs_types : T_Expressions => T_CoolTypes = a_exprs_types.get _;

  val v_actuals_errors = f_actuals_errors _;
  def f_actuals_errors(v_fnm : T_String, v_ln : T_Integer, v_fts : T_CoolTypes, v_ats : T_CoolTypes):T_Errors = {
    try {
      Debug.begin("actuals_errors("+v_fnm+","+v_ln+","+v_fts+","+v_ats+")");
      var  v4_result : T_Errors = null.asInstanceOf[T_Errors];
      // actuals_errors.G[actuals_errors]'shared_info is ready now.
      // actuals_errors.G[actuals_errors]'shared_info$error_sym is ready now.
      // actuals_errors.ats is ready now.
      // actuals_errors.fts is ready now.
      if (new M__basic_2[ T_CoolTypes](t_CoolTypes).v__op_0(v_fts,v_ats)) {
        // actuals_errors.ln is ready now.
        // actuals_errors.fnm is ready now.
        v4_result = t_Errors.v_none();
        // place holder for error(...):894.G[error]'shared_info
        // place holder for error(...):894.msg
        // place holder for error(...):894.ln
        // place holder for error(...):894.filename
        // error(...):894.result is ready now.
        // place holder for error(...):896.G[error]'shared_info
        // place holder for error(...):896.msg
        // place holder for error(...):896.ln
        // place holder for error(...):896.filename
        // error(...):896.result is ready now.
        // place holder for type_equal(...):897.G[type_equal]'shared_info
        // place holder for type_equal(...):897.G[type_equal]'shared_info$error_sym
        // place holder for type_equal(...):897.t2
        // place holder for type_equal(...):897.t1
        // type_equal(...):897.result is ready now.
        // place holder for error(...):898.G[error]'shared_info
        // place holder for error(...):898.msg
        // place holder for error(...):898.ln
        // place holder for error(...):898.filename
        // error(...):898.result is ready now.
        // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info
        // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info$error_sym
        // place holder for actuals_errors(...):899.ats
        // place holder for actuals_errors(...):899.fts
        // place holder for actuals_errors(...):899.ln
        // place holder for actuals_errors(...):899.fnm
        // actuals_errors(...):899.result is ready now.
        // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info
        // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info$error_sym
        // place holder for actuals_errors(...):901.ats
        // place holder for actuals_errors(...):901.fts
        // place holder for actuals_errors(...):901.ln
        // place holder for actuals_errors(...):901.fnm
        // actuals_errors(...):901.result is ready now.
      } else {
        if (new M__basic_2[ T_CoolTypes](t_CoolTypes).v__op_0(v_fts,t_CoolTypes.v_none())) {
          // actuals_errors.ln is ready now.
          // actuals_errors.fnm is ready now.
          // place holder for error(...):894.G[error]'shared_info
          // place holder for error(...):894.msg
          // place holder for error(...):894.ln
          // place holder for error(...):894.filename
          // error(...):894.result is ready now.
          v4_result = v_error(v_fnm,v_ln,"Too many arguments");
          // place holder for error(...):896.G[error]'shared_info
          // place holder for error(...):896.msg
          // place holder for error(...):896.ln
          // place holder for error(...):896.filename
          // error(...):896.result is ready now.
          // place holder for type_equal(...):897.G[type_equal]'shared_info
          // place holder for type_equal(...):897.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):897.t2
          // place holder for type_equal(...):897.t1
          // type_equal(...):897.result is ready now.
          // place holder for error(...):898.G[error]'shared_info
          // place holder for error(...):898.msg
          // place holder for error(...):898.ln
          // place holder for error(...):898.filename
          // error(...):898.result is ready now.
          // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info
          // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info$error_sym
          // place holder for actuals_errors(...):899.ats
          // place holder for actuals_errors(...):899.fts
          // place holder for actuals_errors(...):899.ln
          // place holder for actuals_errors(...):899.fnm
          // actuals_errors(...):899.result is ready now.
          // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info
          // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info$error_sym
          // place holder for actuals_errors(...):901.ats
          // place holder for actuals_errors(...):901.fts
          // place holder for actuals_errors(...):901.ln
          // place holder for actuals_errors(...):901.fnm
          // actuals_errors(...):901.result is ready now.
        } else {
          if (new M__basic_2[ T_CoolTypes](t_CoolTypes).v__op_0(v_ats,t_CoolTypes.v_none())) {
            // actuals_errors.ln is ready now.
            // actuals_errors.fnm is ready now.
            // place holder for error(...):894.G[error]'shared_info
            // place holder for error(...):894.msg
            // place holder for error(...):894.ln
            // place holder for error(...):894.filename
            // error(...):894.result is ready now.
            // place holder for error(...):896.G[error]'shared_info
            // place holder for error(...):896.msg
            // place holder for error(...):896.ln
            // place holder for error(...):896.filename
            // error(...):896.result is ready now.
            v4_result = v_error(v_fnm,v_ln,"Too few arguments");
            // place holder for type_equal(...):897.G[type_equal]'shared_info
            // place holder for type_equal(...):897.G[type_equal]'shared_info$error_sym
            // place holder for type_equal(...):897.t2
            // place holder for type_equal(...):897.t1
            // type_equal(...):897.result is ready now.
            // place holder for error(...):898.G[error]'shared_info
            // place holder for error(...):898.msg
            // place holder for error(...):898.ln
            // place holder for error(...):898.filename
            // error(...):898.result is ready now.
            // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info
            // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info$error_sym
            // place holder for actuals_errors(...):899.ats
            // place holder for actuals_errors(...):899.fts
            // place holder for actuals_errors(...):899.ln
            // place holder for actuals_errors(...):899.fnm
            // actuals_errors(...):899.result is ready now.
            // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info
            // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info$error_sym
            // place holder for actuals_errors(...):901.ats
            // place holder for actuals_errors(...):901.fts
            // place holder for actuals_errors(...):901.ln
            // place holder for actuals_errors(...):901.fnm
            // actuals_errors(...):901.result is ready now.
          } else {
            // actuals_errors.ln is ready now.
            // actuals_errors.fnm is ready now.
            // place holder for error(...):894.G[error]'shared_info
            // place holder for error(...):894.msg
            // place holder for error(...):894.ln
            // place holder for error(...):894.filename
            // error(...):894.result is ready now.
            // place holder for error(...):896.G[error]'shared_info
            // place holder for error(...):896.msg
            // place holder for error(...):896.ln
            // place holder for error(...):896.filename
            // error(...):896.result is ready now.
            // place holder for type_equal(...):897.G[type_equal]'shared_info
            // place holder for type_equal(...):897.G[type_equal]'shared_info$error_sym
            // place holder for type_equal(...):897.t2
            // place holder for type_equal(...):897.t1
            // type_equal(...):897.result is ready now.
            if (v_not(v_type_equal(new M__basic_16[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_first(v_ats),new M__basic_16[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_first(v_fts)))) {
              // place holder for error(...):898.G[error]'shared_info
              // place holder for error(...):898.msg
              // place holder for error(...):898.ln
              // place holder for error(...):898.filename
              // error(...):898.result is ready now.
              // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info
              // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info$error_sym
              // place holder for actuals_errors(...):899.ats
              // place holder for actuals_errors(...):899.fts
              // place holder for actuals_errors(...):899.ln
              // place holder for actuals_errors(...):899.fnm
              // actuals_errors(...):899.result is ready now.
              v4_result = t_Errors.v_append(v_error(v_fnm,v_ln,"Bad argument type"),v_actuals_errors(v_fnm,v_ln,new M__basic_17[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_butfirst(v_fts),new M__basic_17[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_butfirst(v_ats)));
              // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info
              // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info$error_sym
              // place holder for actuals_errors(...):901.ats
              // place holder for actuals_errors(...):901.fts
              // place holder for actuals_errors(...):901.ln
              // place holder for actuals_errors(...):901.fnm
              // actuals_errors(...):901.result is ready now.
            } else {
              // place holder for error(...):898.G[error]'shared_info
              // place holder for error(...):898.msg
              // place holder for error(...):898.ln
              // place holder for error(...):898.filename
              // error(...):898.result is ready now.
              // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info
              // place holder for actuals_errors(...):899.G[actuals_errors]'shared_info$error_sym
              // place holder for actuals_errors(...):899.ats
              // place holder for actuals_errors(...):899.fts
              // place holder for actuals_errors(...):899.ln
              // place holder for actuals_errors(...):899.fnm
              // actuals_errors(...):899.result is ready now.
              // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info
              // place holder for actuals_errors(...):901.G[actuals_errors]'shared_info$error_sym
              // place holder for actuals_errors(...):901.ats
              // place holder for actuals_errors(...):901.fts
              // place holder for actuals_errors(...):901.ln
              // place holder for actuals_errors(...):901.fnm
              // actuals_errors(...):901.result is ready now.
              v4_result = v_actuals_errors(v_fnm,v_ln,new M__basic_17[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_butfirst(v_fts),new M__basic_17[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_butfirst(v_ats));
            }
          }
        }
      }
      return v4_result;
    } finally { Debug.end(); }
  }

  def visit_0_1(node : T_Program) : Unit = node match {
    case p_program(_,_) => visit_0_1_0(node);
  };
  def visit_0_1_0(anchor : T_Program) : Unit = anchor match {
    case p_program(v_p,v_cls) => {
      // p.G[Program]'shared_info is ready now.
      // p.G[Program]'shared_info$integer_sym is ready now.
      // p.G[Program]'shared_info$boolean_sym is ready now.
      // p.G[Program]'shared_info$string_sym is ready now.
      // p.G[Program]'shared_info$this_sym is ready now.
      // p.G[Program]'shared_info$main_sym is ready now.
      // p.G[Program]'shared_info$unit_sym is ready now.
      // p.G[Program]'shared_info$null_sym is ready now.
      // p.G[Program]'shared_info$native_sym is ready now.
      // p.G[Program]'shared_info$error_sym is ready now.
      // p.G[Program]'shared_info$no_method_sig is ready now.
      // p.G[Program]'shared_info$no_class_contents is ready now.
      // shared info for cls is ready.
      // cls.G[Classes]'shared_info$integer_sym
      // cls.G[Classes]'shared_info$boolean_sym
      // cls.G[Classes]'shared_info$string_sym
      // cls.G[Classes]'shared_info$this_sym
      // cls.G[Classes]'shared_info$main_sym
      // cls.G[Classes]'shared_info$unit_sym
      // cls.G[Classes]'shared_info$null_sym
      // cls.G[Classes]'shared_info$native_sym
      // cls.G[Classes]'shared_info$error_sym
      // cls.G[Classes]'shared_info$no_method_sig
      // cls.G[Classes]'shared_info$no_class_contents
      visit_2_1(v_cls);
      // cls.classes_classentries is ready now.
      a_classes_classtable.assign(v_cls,a_classes_classentries.get(v_cls));
      visit_2_2(v_cls);
      // cls.classes_errors is ready now.
      a_program_errors.assign(v_p,a_classes_errors.get(v_cls));
    }
  }


  def visit_1_1(node : T_Class) : Unit = node match {
    case p_class_decl(_,_,_,_,_) => visit_1_1_0(node);
  };
  def visit_1_2(node : T_Class) : Unit = node match {
    case p_class_decl(_,_,_,_,_) => visit_1_2_0(node);
  };
  def visit_1_1_0(anchor : T_Class) : Unit = anchor match {
    case p_class_decl(v_cl,v_name,v_1,v_fs,v_filename) => {
      // cl.G[Class]'shared_info is ready now.
      // cl.G[Class]'shared_info$integer_sym is ready now.
      // cl.G[Class]'shared_info$boolean_sym is ready now.
      // cl.G[Class]'shared_info$string_sym is ready now.
      // cl.G[Class]'shared_info$this_sym is ready now.
      // cl.G[Class]'shared_info$main_sym is ready now.
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_name,v_main_sym)) {
        // cl.G[Class]'shared_info$unit_sym is ready now.
        // cl.G[Class]'shared_info$null_sym is ready now.
        // cl.G[Class]'shared_info$native_sym is ready now.
        // cl.G[Class]'shared_info$error_sym is ready now.
        // cl.G[Class]'shared_info$no_method_sig is ready now.
        // cl.G[Class]'shared_info$no_class_contents is ready now.
        // shared info for fs is ready.
        // fs.G[Features]'shared_info$integer_sym
        // fs.G[Features]'shared_info$boolean_sym
        // fs.G[Features]'shared_info$string_sym
        // fs.G[Features]'shared_info$this_sym
        // fs.G[Features]'shared_info$unit_sym
        // fs.G[Features]'shared_info$null_sym
        // fs.G[Features]'shared_info$native_sym
        // fs.G[Features]'shared_info$error_sym
        // fs.G[Features]'shared_info$no_method_sig
        // fs.G[Features]'shared_info$no_class_contents
        a_features_class.assign(v_fs,v_name);
        a_features_filename.assign(v_fs,t_Symbol.v_string(v_filename));
        visit_4_1(v_fs);
        // fs.features_attrs is ready now.
        // fs.features_methods is ready now.
        if (new M__basic_2[ T_MethodSig](t_MethodSig).v__op_w0(new M__cool_noinherit_semant_1[ T_MethodSig,T_MethodEntry,T_MethodTable](t_MethodSig,t_MethodEntry,t_MethodTable).v_lookup(v_main_sym,a_features_methods.get(v_fs),v_no_method_sig),t_MethodSig.v_single(v_main_sym))) {
          a1_contents.assign(anchor,t_ClassContents.v_pair(a_features_methods.get(v_fs),a_features_attrs.get(v_fs)));
          a_class_classentry.assign(v_cl,t_ClassEntry.v_pair(v_name,a1_contents.get(anchor)));
        } else {
          a1_contents.assign(anchor,t_ClassContents.v_pair(a_features_methods.get(v_fs),a_features_attrs.get(v_fs)));
          a_class_classentry.assign(v_cl,t_ClassEntry.v_pair(v_name,a1_contents.get(anchor)));
        }
      } else {
        // cl.G[Class]'shared_info$unit_sym is ready now.
        // cl.G[Class]'shared_info$null_sym is ready now.
        // cl.G[Class]'shared_info$native_sym is ready now.
        // cl.G[Class]'shared_info$error_sym is ready now.
        // cl.G[Class]'shared_info$no_method_sig is ready now.
        // cl.G[Class]'shared_info$no_class_contents is ready now.
        // shared info for fs is ready.
        // fs.G[Features]'shared_info$integer_sym
        // fs.G[Features]'shared_info$boolean_sym
        // fs.G[Features]'shared_info$string_sym
        // fs.G[Features]'shared_info$this_sym
        // fs.G[Features]'shared_info$unit_sym
        // fs.G[Features]'shared_info$null_sym
        // fs.G[Features]'shared_info$native_sym
        // fs.G[Features]'shared_info$error_sym
        // fs.G[Features]'shared_info$no_method_sig
        // fs.G[Features]'shared_info$no_class_contents
        a_features_class.assign(v_fs,v_name);
        a_features_filename.assign(v_fs,t_Symbol.v_string(v_filename));
        visit_4_1(v_fs);
        // fs.features_attrs is ready now.
        // fs.features_methods is ready now.
        a1_contents.assign(anchor,t_ClassContents.v_pair(a_features_methods.get(v_fs),a_features_attrs.get(v_fs)));
        a_class_classentry.assign(v_cl,t_ClassEntry.v_pair(v_name,a1_contents.get(anchor)));
      }
    }
  }

  def visit_1_2_0(anchor : T_Class) : Unit = anchor match {
    case p_class_decl(v_cl,v_name,v_1,v_fs,v_filename) => {
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_name,v_main_sym)) {
        if (new M__basic_2[ T_MethodSig](t_MethodSig).v__op_w0(new M__cool_noinherit_semant_1[ T_MethodSig,T_MethodEntry,T_MethodTable](t_MethodSig,t_MethodEntry,t_MethodTable).v_lookup(v_main_sym,a_features_methods.get(v_fs),v_no_method_sig),t_MethodSig.v_single(v_main_sym))) {
          // cl.class_classtable is ready now.
          a_features_classtable.assign(v_fs,a_class_classtable.get(v_cl));
          visit_4_2(v_fs);
          // fs.features_errors is ready now.
          // place holder for error(...):211.G[error]'shared_info
          // place holder for error(...):211.msg
          // place holder for error(...):211.ln
          // place holder for error(...):211.filename
          // error(...):211.result is ready now.
          a2_missing_main_errors.assign(anchor,v_error(t_Symbol.v_string(v_filename),new M__basic_24[ T_Class](t_Class).v_lineno(v_cl),"Main() not defined"));
          a_class_errors.assign(v_cl,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a2_missing_main_errors.get(anchor),a_features_errors.get(v_fs)));
        } else {
          // cl.class_classtable is ready now.
          a_features_classtable.assign(v_fs,a_class_classtable.get(v_cl));
          visit_4_2(v_fs);
          // fs.features_errors is ready now.
          a2_missing_main_errors.assign(anchor,t_Errors.v_none());
          a_class_errors.assign(v_cl,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a2_missing_main_errors.get(anchor),a_features_errors.get(v_fs)));
          // place holder for error(...):211.G[error]'shared_info
          // place holder for error(...):211.msg
          // place holder for error(...):211.ln
          // place holder for error(...):211.filename
          // error(...):211.result is ready now.
        }
      } else {
        // cl.class_classtable is ready now.
        a_features_classtable.assign(v_fs,a_class_classtable.get(v_cl));
        visit_4_2(v_fs);
        // fs.features_errors is ready now.
        a2_missing_main_errors.assign(anchor,t_Errors.v_none());
        a_class_errors.assign(v_cl,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a2_missing_main_errors.get(anchor),a_features_errors.get(v_fs)));
        // place holder for error(...):211.G[error]'shared_info
        // place holder for error(...):211.msg
        // place holder for error(...):211.ln
        // place holder for error(...):211.filename
        // error(...):211.result is ready now.
      }
    }
  }


  def visit_2_1(node : T_Classes) : Unit = node match {
    case t_Classes.p_append(_,_,_) => visit_2_1_0(node);
    case t_Classes.p_single(_,_) => visit_2_1_1(node);
    case t_Classes.p_none(_) => visit_2_1_2(node);
  };
  def visit_2_2(node : T_Classes) : Unit = node match {
    case t_Classes.p_append(_,_,_) => visit_2_2_0(node);
    case t_Classes.p_single(_,_) => visit_2_2_1(node);
    case t_Classes.p_none(_) => visit_2_2_2(node);
  };
  def visit_2_1_0(anchor : T_Classes) : Unit = anchor match {
    case t_Classes.p_append(v_cls,v_cls1,v_cls2) => {
      // cls.G[Classes]'shared_info is ready now.
      // cls.G[Classes]'shared_info$integer_sym is ready now.
      // cls.G[Classes]'shared_info$boolean_sym is ready now.
      // cls.G[Classes]'shared_info$string_sym is ready now.
      // cls.G[Classes]'shared_info$this_sym is ready now.
      // cls.G[Classes]'shared_info$main_sym is ready now.
      // cls.G[Classes]'shared_info$unit_sym is ready now.
      // cls.G[Classes]'shared_info$null_sym is ready now.
      // cls.G[Classes]'shared_info$native_sym is ready now.
      // cls.G[Classes]'shared_info$error_sym is ready now.
      // cls.G[Classes]'shared_info$no_method_sig is ready now.
      // cls.G[Classes]'shared_info$no_class_contents is ready now.
      // shared info for cls1 is ready.
      // cls1.G[Classes]'shared_info$integer_sym
      // cls1.G[Classes]'shared_info$boolean_sym
      // cls1.G[Classes]'shared_info$string_sym
      // cls1.G[Classes]'shared_info$this_sym
      // cls1.G[Classes]'shared_info$main_sym
      // cls1.G[Classes]'shared_info$unit_sym
      // cls1.G[Classes]'shared_info$null_sym
      // cls1.G[Classes]'shared_info$native_sym
      // cls1.G[Classes]'shared_info$error_sym
      // cls1.G[Classes]'shared_info$no_method_sig
      // cls1.G[Classes]'shared_info$no_class_contents
      visit_2_1(v_cls1);
      // cls1.classes_classentries is ready now.
      // shared info for cls2 is ready.
      // cls2.G[Classes]'shared_info$integer_sym
      // cls2.G[Classes]'shared_info$boolean_sym
      // cls2.G[Classes]'shared_info$string_sym
      // cls2.G[Classes]'shared_info$this_sym
      // cls2.G[Classes]'shared_info$main_sym
      // cls2.G[Classes]'shared_info$unit_sym
      // cls2.G[Classes]'shared_info$null_sym
      // cls2.G[Classes]'shared_info$native_sym
      // cls2.G[Classes]'shared_info$error_sym
      // cls2.G[Classes]'shared_info$no_method_sig
      // cls2.G[Classes]'shared_info$no_class_contents
      visit_2_1(v_cls2);
      // cls2.classes_classentries is ready now.
      a_classes_classentries.assign(v_cls,new M__basic_18[ T_ClassTable](t_ClassTable).v__op_ss(a_classes_classentries.get(v_cls1),a_classes_classentries.get(v_cls2)));
    }
  }

  def visit_2_2_0(anchor : T_Classes) : Unit = anchor match {
    case t_Classes.p_append(v_cls,v_cls1,v_cls2) => {
      // cls.classes_classtable is ready now.
      a_classes_classtable.assign(v_cls1,a_classes_classtable.get(v_cls));
      visit_2_2(v_cls1);
      // cls1.classes_errors is ready now.
      a_classes_classtable.assign(v_cls2,a_classes_classtable.get(v_cls));
      visit_2_2(v_cls2);
      // cls2.classes_errors is ready now.
      a_classes_errors.assign(v_cls,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_classes_errors.get(v_cls1),a_classes_errors.get(v_cls2)));
    }
  }

  def visit_2_1_1(anchor : T_Classes) : Unit = anchor match {
    case t_Classes.p_single(v_cls,v_cl) => {
      // cls.G[Classes]'shared_info is ready now.
      // cls.G[Classes]'shared_info$integer_sym is ready now.
      // cls.G[Classes]'shared_info$boolean_sym is ready now.
      // cls.G[Classes]'shared_info$string_sym is ready now.
      // cls.G[Classes]'shared_info$this_sym is ready now.
      // cls.G[Classes]'shared_info$main_sym is ready now.
      // cls.G[Classes]'shared_info$unit_sym is ready now.
      // cls.G[Classes]'shared_info$null_sym is ready now.
      // cls.G[Classes]'shared_info$native_sym is ready now.
      // cls.G[Classes]'shared_info$error_sym is ready now.
      // cls.G[Classes]'shared_info$no_method_sig is ready now.
      // cls.G[Classes]'shared_info$no_class_contents is ready now.
      // shared info for cl is ready.
      // cl.G[Class]'shared_info$integer_sym
      // cl.G[Class]'shared_info$boolean_sym
      // cl.G[Class]'shared_info$string_sym
      // cl.G[Class]'shared_info$this_sym
      // cl.G[Class]'shared_info$main_sym
      // cl.G[Class]'shared_info$unit_sym
      // cl.G[Class]'shared_info$null_sym
      // cl.G[Class]'shared_info$native_sym
      // cl.G[Class]'shared_info$error_sym
      // cl.G[Class]'shared_info$no_method_sig
      // cl.G[Class]'shared_info$no_class_contents
      visit_1_1(v_cl);
      // cl.class_classentry is ready now.
      a_classes_classentries.assign(v_cls,t_ClassTable.v_single(a_class_classentry.get(v_cl)));
    }
  }

  def visit_2_2_1(anchor : T_Classes) : Unit = anchor match {
    case t_Classes.p_single(v_cls,v_cl) => {
      // cls.classes_classtable is ready now.
      a_class_classtable.assign(v_cl,a_classes_classtable.get(v_cls));
      visit_1_2(v_cl);
      // cl.class_errors is ready now.
      a_classes_errors.assign(v_cls,a_class_errors.get(v_cl));
    }
  }

  def visit_2_1_2(anchor : T_Classes) : Unit = anchor match {
    case t_Classes.p_none(v_cls) => {
      // cls.G[Classes]'shared_info is ready now.
      // cls.G[Classes]'shared_info$integer_sym is ready now.
      // cls.G[Classes]'shared_info$boolean_sym is ready now.
      // cls.G[Classes]'shared_info$string_sym is ready now.
      // cls.G[Classes]'shared_info$this_sym is ready now.
      // cls.G[Classes]'shared_info$main_sym is ready now.
      // cls.G[Classes]'shared_info$unit_sym is ready now.
      // cls.G[Classes]'shared_info$null_sym is ready now.
      // cls.G[Classes]'shared_info$native_sym is ready now.
      // cls.G[Classes]'shared_info$error_sym is ready now.
      // cls.G[Classes]'shared_info$no_method_sig is ready now.
      // cls.G[Classes]'shared_info$no_class_contents is ready now.
      a_classes_classentries.assign(v_cls,t_ClassTable.v_none());
    }
  }

  def visit_2_2_2(anchor : T_Classes) : Unit = anchor match {
    case t_Classes.p_none(v_cls) => {
      // cls.classes_classtable is ready now.
      a_classes_errors.assign(v_cls,t_Errors.v_none());
    }
  }


  def visit_3_1(node : T_Feature) : Unit = node match {
    case p_method(_,_,_,_,_,_) => visit_3_1_0(node);
    case p_attr(_,_,_) => visit_3_1_1(node);
  };
  def visit_3_2(node : T_Feature) : Unit = node match {
    case p_method(_,_,_,_,_,_) => visit_3_2_0(node);
    case p_attr(_,_,_) => visit_3_2_1(node);
  };
  def visit_3_1_0(anchor : T_Feature) : Unit = anchor match {
    case p_method(v_f,v_0,v_name,v_fmls,v_rt_type,v_e) => {
      // f.G[Feature]'shared_info is ready now.
      // f.G[Feature]'shared_info$integer_sym is ready now.
      // f.G[Feature]'shared_info$boolean_sym is ready now.
      // f.G[Feature]'shared_info$string_sym is ready now.
      // f.G[Feature]'shared_info$this_sym is ready now.
      // f.G[Feature]'shared_info$unit_sym is ready now.
      // f.G[Feature]'shared_info$null_sym is ready now.
      // f.G[Feature]'shared_info$native_sym is ready now.
      // f.G[Feature]'shared_info$error_sym is ready now.
      // f.G[Feature]'shared_info$no_method_sig is ready now.
      // f.G[Feature]'shared_info$no_class_contents is ready now.
      // f.feature_class is ready now.
      // f.feature_filename is ready now.
      a_feature_attrs.assign(v_f,t_AttrTable.v_none());
      // shared info for fmls is ready.
      // fmls.G[Formals]'shared_info$this_sym
      // fmls.G[Formals]'shared_info$native_sym
      // fmls.G[Formals]'shared_info$no_class_contents
      a_formals_filename.assign(v_fmls,a_feature_filename.get(v_f));
      visit_6_1(v_fmls);
      // fmls.formals_entries is ready now.
      // shared info for e is ready.
      // e.G[Expression]'shared_info$integer_sym
      // e.G[Expression]'shared_info$boolean_sym
      // e.G[Expression]'shared_info$string_sym
      // e.G[Expression]'shared_info$this_sym
      // e.G[Expression]'shared_info$unit_sym
      // e.G[Expression]'shared_info$null_sym
      // e.G[Expression]'shared_info$native_sym
      // e.G[Expression]'shared_info$error_sym
      // e.G[Expression]'shared_info$no_method_sig
      // e.G[Expression]'shared_info$no_class_contents
      a_expr_filename.assign(v_e,a_feature_filename.get(v_f));
      // place holder for entries_types(...):279.G[entries_types]'shared_info
      // place holder for entries_types(...):279.e
      // entries_types(...):279.result is ready now.
      a3_sig.assign(anchor,new M__basic_18[ T_MethodSig](t_MethodSig).v__op_ss(t_MethodSig.v_single(v_rt_type),v_entries_types(a_formals_entries.get(v_fmls))));
      a4_me.assign(anchor,t_MethodEntry.v_pair(v_name,a3_sig.get(anchor)));
      a_feature_methods.assign(v_f,t_MethodTable.v_single(a4_me.get(anchor)));
    }
  }

  def visit_3_2_0(anchor : T_Feature) : Unit = anchor match {
    case p_method(v_f,v_0,v_name,v_fmls,v_rt_type,v_e) => {
      // f.feature_classtable is ready now.
      a_formals_classtable.assign(v_fmls,a_feature_classtable.get(v_f));
      visit_6_2(v_fmls);
      // fmls.formals_errors is ready now.
      a_expr_classtable.assign(v_e,a_feature_classtable.get(v_f));
      a5_env.assign(anchor,new M__basic_18[ T_Environment](t_Environment).v__op_ss(t_Environment.v_single(t_Entry.v_pair(v_this_sym,a_feature_class.get(v_f))),new M__basic_18[ T_Environment](t_Environment).v__op_ss(a_formals_entries.get(v_fmls),t_ClassContents.v_snd(new M__cool_noinherit_semant_1[ T_ClassContents,T_ClassEntry,T_ClassTable](t_ClassContents,t_ClassEntry,t_ClassTable).v_lookup(a_feature_class.get(v_f),a_feature_classtable.get(v_f),v_no_class_contents)))));
      a_expr_env.assign(v_e,a5_env.get(anchor));
      visit_7_1(v_e);
      // e.expr_type is ready now.
      // e.expr_errors is ready now.
      // place holder for class_is_undefined(...):293.G[class_is_undefined]'shared_info
      // place holder for class_is_undefined(...):293.G[class_is_undefined]'shared_info$native_sym
      // place holder for class_is_undefined(...):293.G[class_is_undefined]'shared_info$no_class_contents
      // place holder for class_is_undefined(...):293.ct
      // place holder for class_is_undefined(...):293.name
      // class_is_undefined(...):293.result is ready now.
      if (v_class_is_undefined(v_rt_type,a_feature_classtable.get(v_f))) {
        // place holder for error(...):296.G[error]'shared_info
        // place holder for error(...):296.msg
        // place holder for error(...):296.ln
        // place holder for error(...):296.filename
        // error(...):296.result is ready now.
        a6_rt_errors.assign(anchor,v_error(a_feature_filename.get(v_f),new M__basic_24[ T_Feature](t_Feature).v_lineno(v_f),new M__basic_18[ T_String](t_String).v__op_ss("Undefined return type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_rt_type),new M__basic_18[ T_String](t_String).v__op_ss(" in method ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_name),"."))))));
        // place holder for type_equal(...):300.G[type_equal]'shared_info
        // place holder for type_equal(...):300.G[type_equal]'shared_info$error_sym
        // place holder for type_equal(...):300.t2
        // place holder for type_equal(...):300.t1
        // type_equal(...):300.result is ready now.
        if (v_not(v_type_equal(a_expr_type.get(v_e),v_rt_type))) {
          // place holder for error(...):306.G[error]'shared_info
          // place holder for error(...):306.msg
          // place holder for error(...):306.ln
          // place holder for error(...):306.filename
          // error(...):306.result is ready now.
          a7_rv_errors.assign(anchor,v_error(a_feature_filename.get(v_f),new M__basic_24[ T_Feature](t_Feature).v_lineno(v_f),new M__basic_18[ T_String](t_String).v__op_ss("Inferred return type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_e)),new M__basic_18[ T_String](t_String).v__op_ss(" of method ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_name),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to declared return type ",new M__basic_18[ T_String](t_String).v__op_ss(v_symbol_name(v_rt_type),"."))))))));
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_formals_errors.get(v_fmls),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a6_rt_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e),a7_rv_errors.get(anchor)))));
        } else {
          a7_rv_errors.assign(anchor,t_Errors.v_none());
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_formals_errors.get(v_fmls),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a6_rt_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e),a7_rv_errors.get(anchor)))));
          // place holder for error(...):306.G[error]'shared_info
          // place holder for error(...):306.msg
          // place holder for error(...):306.ln
          // place holder for error(...):306.filename
          // error(...):306.result is ready now.
        }
      } else {
        a6_rt_errors.assign(anchor,t_Errors.v_none());
        // place holder for error(...):296.G[error]'shared_info
        // place holder for error(...):296.msg
        // place holder for error(...):296.ln
        // place holder for error(...):296.filename
        // error(...):296.result is ready now.
        // place holder for type_equal(...):300.G[type_equal]'shared_info
        // place holder for type_equal(...):300.G[type_equal]'shared_info$error_sym
        // place holder for type_equal(...):300.t2
        // place holder for type_equal(...):300.t1
        // type_equal(...):300.result is ready now.
        if (v_not(v_type_equal(a_expr_type.get(v_e),v_rt_type))) {
          // place holder for error(...):306.G[error]'shared_info
          // place holder for error(...):306.msg
          // place holder for error(...):306.ln
          // place holder for error(...):306.filename
          // error(...):306.result is ready now.
          a7_rv_errors.assign(anchor,v_error(a_feature_filename.get(v_f),new M__basic_24[ T_Feature](t_Feature).v_lineno(v_f),new M__basic_18[ T_String](t_String).v__op_ss("Inferred return type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_e)),new M__basic_18[ T_String](t_String).v__op_ss(" of method ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_name),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to declared return type ",new M__basic_18[ T_String](t_String).v__op_ss(v_symbol_name(v_rt_type),"."))))))));
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_formals_errors.get(v_fmls),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a6_rt_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e),a7_rv_errors.get(anchor)))));
        } else {
          a7_rv_errors.assign(anchor,t_Errors.v_none());
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_formals_errors.get(v_fmls),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a6_rt_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e),a7_rv_errors.get(anchor)))));
          // place holder for error(...):306.G[error]'shared_info
          // place holder for error(...):306.msg
          // place holder for error(...):306.ln
          // place holder for error(...):306.filename
          // error(...):306.result is ready now.
        }
      }
    }
  }

  def visit_3_1_1(anchor : T_Feature) : Unit = anchor match {
    case p_attr(v_f,v_name,v_ty) => {
      // f.G[Feature]'shared_info is ready now.
      // f.G[Feature]'shared_info$integer_sym is ready now.
      // f.G[Feature]'shared_info$boolean_sym is ready now.
      // f.G[Feature]'shared_info$string_sym is ready now.
      // f.G[Feature]'shared_info$this_sym is ready now.
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_name,v_this_sym)) {
        // f.G[Feature]'shared_info$unit_sym is ready now.
        // f.G[Feature]'shared_info$null_sym is ready now.
        // f.G[Feature]'shared_info$native_sym is ready now.
        // f.G[Feature]'shared_info$error_sym is ready now.
        // f.G[Feature]'shared_info$no_method_sig is ready now.
        // f.G[Feature]'shared_info$no_class_contents is ready now.
        // f.feature_class is ready now.
        // f.feature_filename is ready now.
        a_feature_attrs.assign(v_f,t_AttrTable.v_single(t_AttrEntry.v_pair(v_name,v_ty)));
        a_feature_methods.assign(v_f,t_MethodTable.v_none());
      } else {
        // f.G[Feature]'shared_info$unit_sym is ready now.
        // f.G[Feature]'shared_info$null_sym is ready now.
        // f.G[Feature]'shared_info$native_sym is ready now.
        // f.G[Feature]'shared_info$error_sym is ready now.
        // f.G[Feature]'shared_info$no_method_sig is ready now.
        // f.G[Feature]'shared_info$no_class_contents is ready now.
        // f.feature_class is ready now.
        // f.feature_filename is ready now.
        a_feature_attrs.assign(v_f,t_AttrTable.v_single(t_AttrEntry.v_pair(v_name,v_ty)));
        a_feature_methods.assign(v_f,t_MethodTable.v_none());
      }
    }
  }

  def visit_3_2_1(anchor : T_Feature) : Unit = anchor match {
    case p_attr(v_f,v_name,v_ty) => {
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_name,v_this_sym)) {
        // f.feature_classtable is ready now.
        a8_aname.assign(anchor,t_Symbol.v_string(v_name));
        // place holder for error(...):325.G[error]'shared_info
        // place holder for error(...):325.msg
        // place holder for error(...):325.ln
        // place holder for error(...):325.filename
        // error(...):325.result is ready now.
        a9_this_errors.assign(anchor,v_error(a_feature_filename.get(v_f),new M__basic_24[ T_Feature](t_Feature).v_lineno(v_f),"'this' cannot be the name of an attribute."));
        // place holder for class_is_undefined(...):329.G[class_is_undefined]'shared_info
        // place holder for class_is_undefined(...):329.G[class_is_undefined]'shared_info$native_sym
        // place holder for class_is_undefined(...):329.G[class_is_undefined]'shared_info$no_class_contents
        // place holder for class_is_undefined(...):329.ct
        // place holder for class_is_undefined(...):329.name
        // class_is_undefined(...):329.result is ready now.
        if (v_class_is_undefined(v_ty,a_feature_classtable.get(v_f))) {
          // place holder for error(...):332.G[error]'shared_info
          // place holder for error(...):332.msg
          // place holder for error(...):332.ln
          // place holder for error(...):332.filename
          // error(...):332.result is ready now.
          a10_type_errors.assign(anchor,v_error(a_feature_filename.get(v_f),new M__basic_24[ T_Feature](t_Feature).v_lineno(v_f),new M__basic_18[ T_String](t_String).v__op_ss("Class ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_ty),new M__basic_18[ T_String](t_String).v__op_ss(" of attribute ",new M__basic_18[ T_String](t_String).v__op_ss(a8_aname.get(anchor)," is undefined."))))));
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a9_this_errors.get(anchor),a10_type_errors.get(anchor)));
        } else {
          a10_type_errors.assign(anchor,t_Errors.v_none());
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a9_this_errors.get(anchor),a10_type_errors.get(anchor)));
          // place holder for error(...):332.G[error]'shared_info
          // place holder for error(...):332.msg
          // place holder for error(...):332.ln
          // place holder for error(...):332.filename
          // error(...):332.result is ready now.
        }
      } else {
        // f.feature_classtable is ready now.
        a8_aname.assign(anchor,t_Symbol.v_string(v_name));
        a9_this_errors.assign(anchor,t_Errors.v_none());
        // place holder for error(...):325.G[error]'shared_info
        // place holder for error(...):325.msg
        // place holder for error(...):325.ln
        // place holder for error(...):325.filename
        // error(...):325.result is ready now.
        // place holder for class_is_undefined(...):329.G[class_is_undefined]'shared_info
        // place holder for class_is_undefined(...):329.G[class_is_undefined]'shared_info$native_sym
        // place holder for class_is_undefined(...):329.G[class_is_undefined]'shared_info$no_class_contents
        // place holder for class_is_undefined(...):329.ct
        // place holder for class_is_undefined(...):329.name
        // class_is_undefined(...):329.result is ready now.
        if (v_class_is_undefined(v_ty,a_feature_classtable.get(v_f))) {
          // place holder for error(...):332.G[error]'shared_info
          // place holder for error(...):332.msg
          // place holder for error(...):332.ln
          // place holder for error(...):332.filename
          // error(...):332.result is ready now.
          a10_type_errors.assign(anchor,v_error(a_feature_filename.get(v_f),new M__basic_24[ T_Feature](t_Feature).v_lineno(v_f),new M__basic_18[ T_String](t_String).v__op_ss("Class ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_ty),new M__basic_18[ T_String](t_String).v__op_ss(" of attribute ",new M__basic_18[ T_String](t_String).v__op_ss(a8_aname.get(anchor)," is undefined."))))));
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a9_this_errors.get(anchor),a10_type_errors.get(anchor)));
        } else {
          a10_type_errors.assign(anchor,t_Errors.v_none());
          a_feature_errors.assign(v_f,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a9_this_errors.get(anchor),a10_type_errors.get(anchor)));
          // place holder for error(...):332.G[error]'shared_info
          // place holder for error(...):332.msg
          // place holder for error(...):332.ln
          // place holder for error(...):332.filename
          // error(...):332.result is ready now.
        }
      }
    }
  }


  def visit_4_1(node : T_Features) : Unit = node match {
    case t_Features.p_append(_,_,_) => visit_4_1_0(node);
    case t_Features.p_single(_,_) => visit_4_1_1(node);
    case t_Features.p_none(_) => visit_4_1_2(node);
  };
  def visit_4_2(node : T_Features) : Unit = node match {
    case t_Features.p_append(_,_,_) => visit_4_2_0(node);
    case t_Features.p_single(_,_) => visit_4_2_1(node);
    case t_Features.p_none(_) => visit_4_2_2(node);
  };
  def visit_4_1_0(anchor : T_Features) : Unit = anchor match {
    case t_Features.p_append(v_fs,v_fs1,v_fs2) => {
      // fs.G[Features]'shared_info is ready now.
      // fs.G[Features]'shared_info$integer_sym is ready now.
      // fs.G[Features]'shared_info$boolean_sym is ready now.
      // fs.G[Features]'shared_info$string_sym is ready now.
      // fs.G[Features]'shared_info$this_sym is ready now.
      // fs.G[Features]'shared_info$unit_sym is ready now.
      // fs.G[Features]'shared_info$null_sym is ready now.
      // fs.G[Features]'shared_info$native_sym is ready now.
      // fs.G[Features]'shared_info$error_sym is ready now.
      // fs.G[Features]'shared_info$no_method_sig is ready now.
      // fs.G[Features]'shared_info$no_class_contents is ready now.
      // fs.features_class is ready now.
      // fs.features_filename is ready now.
      // shared info for fs1 is ready.
      // fs1.G[Features]'shared_info$integer_sym
      // fs1.G[Features]'shared_info$boolean_sym
      // fs1.G[Features]'shared_info$string_sym
      // fs1.G[Features]'shared_info$this_sym
      // fs1.G[Features]'shared_info$unit_sym
      // fs1.G[Features]'shared_info$null_sym
      // fs1.G[Features]'shared_info$native_sym
      // fs1.G[Features]'shared_info$error_sym
      // fs1.G[Features]'shared_info$no_method_sig
      // fs1.G[Features]'shared_info$no_class_contents
      a_features_class.assign(v_fs1,a_features_class.get(v_fs));
      a_features_filename.assign(v_fs1,a_features_filename.get(v_fs));
      visit_4_1(v_fs1);
      // fs1.features_attrs is ready now.
      // fs1.features_methods is ready now.
      // shared info for fs2 is ready.
      // fs2.G[Features]'shared_info$integer_sym
      // fs2.G[Features]'shared_info$boolean_sym
      // fs2.G[Features]'shared_info$string_sym
      // fs2.G[Features]'shared_info$this_sym
      // fs2.G[Features]'shared_info$unit_sym
      // fs2.G[Features]'shared_info$null_sym
      // fs2.G[Features]'shared_info$native_sym
      // fs2.G[Features]'shared_info$error_sym
      // fs2.G[Features]'shared_info$no_method_sig
      // fs2.G[Features]'shared_info$no_class_contents
      a_features_class.assign(v_fs2,a_features_class.get(v_fs));
      a_features_filename.assign(v_fs2,a_features_filename.get(v_fs));
      visit_4_1(v_fs2);
      // fs2.features_attrs is ready now.
      a_features_attrs.assign(v_fs,new M__basic_18[ T_AttrTable](t_AttrTable).v__op_ss(a_features_attrs.get(v_fs1),a_features_attrs.get(v_fs2)));
      // fs2.features_methods is ready now.
      a_features_methods.assign(v_fs,new M__basic_18[ T_MethodTable](t_MethodTable).v__op_ss(a_features_methods.get(v_fs1),a_features_methods.get(v_fs2)));
    }
  }

  def visit_4_2_0(anchor : T_Features) : Unit = anchor match {
    case t_Features.p_append(v_fs,v_fs1,v_fs2) => {
      // fs.features_classtable is ready now.
      a_features_classtable.assign(v_fs1,a_features_classtable.get(v_fs));
      visit_4_2(v_fs1);
      // fs1.features_errors is ready now.
      a_features_classtable.assign(v_fs2,a_features_classtable.get(v_fs));
      visit_4_2(v_fs2);
      // fs2.features_errors is ready now.
      a_features_errors.assign(v_fs,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_features_errors.get(v_fs1),a_features_errors.get(v_fs2)));
    }
  }

  def visit_4_1_1(anchor : T_Features) : Unit = anchor match {
    case t_Features.p_single(v_fs,v_f) => {
      // fs.G[Features]'shared_info is ready now.
      // fs.G[Features]'shared_info$integer_sym is ready now.
      // fs.G[Features]'shared_info$boolean_sym is ready now.
      // fs.G[Features]'shared_info$string_sym is ready now.
      // fs.G[Features]'shared_info$this_sym is ready now.
      // fs.G[Features]'shared_info$unit_sym is ready now.
      // fs.G[Features]'shared_info$null_sym is ready now.
      // fs.G[Features]'shared_info$native_sym is ready now.
      // fs.G[Features]'shared_info$error_sym is ready now.
      // fs.G[Features]'shared_info$no_method_sig is ready now.
      // fs.G[Features]'shared_info$no_class_contents is ready now.
      // fs.features_class is ready now.
      // fs.features_filename is ready now.
      // shared info for f is ready.
      // f.G[Feature]'shared_info$integer_sym
      // f.G[Feature]'shared_info$boolean_sym
      // f.G[Feature]'shared_info$string_sym
      // f.G[Feature]'shared_info$this_sym
      // f.G[Feature]'shared_info$unit_sym
      // f.G[Feature]'shared_info$null_sym
      // f.G[Feature]'shared_info$native_sym
      // f.G[Feature]'shared_info$error_sym
      // f.G[Feature]'shared_info$no_method_sig
      // f.G[Feature]'shared_info$no_class_contents
      a_feature_class.assign(v_f,a_features_class.get(v_fs));
      a_feature_filename.assign(v_f,a_features_filename.get(v_fs));
      visit_3_1(v_f);
      // f.feature_attrs is ready now.
      a_features_attrs.assign(v_fs,a_feature_attrs.get(v_f));
      // f.feature_methods is ready now.
      a_features_methods.assign(v_fs,a_feature_methods.get(v_f));
    }
  }

  def visit_4_2_1(anchor : T_Features) : Unit = anchor match {
    case t_Features.p_single(v_fs,v_f) => {
      // fs.features_classtable is ready now.
      a_feature_classtable.assign(v_f,a_features_classtable.get(v_fs));
      visit_3_2(v_f);
      // f.feature_errors is ready now.
      a_features_errors.assign(v_fs,a_feature_errors.get(v_f));
    }
  }

  def visit_4_1_2(anchor : T_Features) : Unit = anchor match {
    case t_Features.p_none(v_fs) => {
      // fs.G[Features]'shared_info is ready now.
      // fs.G[Features]'shared_info$integer_sym is ready now.
      // fs.G[Features]'shared_info$boolean_sym is ready now.
      // fs.G[Features]'shared_info$string_sym is ready now.
      // fs.G[Features]'shared_info$this_sym is ready now.
      // fs.G[Features]'shared_info$unit_sym is ready now.
      // fs.G[Features]'shared_info$null_sym is ready now.
      // fs.G[Features]'shared_info$native_sym is ready now.
      // fs.G[Features]'shared_info$error_sym is ready now.
      // fs.G[Features]'shared_info$no_method_sig is ready now.
      // fs.G[Features]'shared_info$no_class_contents is ready now.
      // fs.features_class is ready now.
      // fs.features_filename is ready now.
      a_features_attrs.assign(v_fs,t_AttrTable.v_none());
      a_features_methods.assign(v_fs,t_MethodTable.v_none());
    }
  }

  def visit_4_2_2(anchor : T_Features) : Unit = anchor match {
    case t_Features.p_none(v_fs) => {
      // fs.features_classtable is ready now.
      a_features_errors.assign(v_fs,t_Errors.v_none());
    }
  }


  def visit_5_1(node : T_Formal) : Unit = node match {
    case p_formal(_,_,_) => visit_5_1_0(node);
  };
  def visit_5_2(node : T_Formal) : Unit = node match {
    case p_formal(_,_,_) => visit_5_2_0(node);
  };
  def visit_5_1_0(anchor : T_Formal) : Unit = anchor match {
    case p_formal(v_fml,v_name,v_ty) => {
      // fml.G[Formal]'shared_info is ready now.
      // fml.G[Formal]'shared_info$this_sym is ready now.
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_name,v_this_sym)) {
        // fml.G[Formal]'shared_info$native_sym is ready now.
        // fml.G[Formal]'shared_info$no_class_contents is ready now.
        // fml.formal_filename is ready now.
        a_formal_entry.assign(v_fml,t_Entry.v_pair(v_name,v_ty));
      } else {
        // fml.G[Formal]'shared_info$native_sym is ready now.
        // fml.G[Formal]'shared_info$no_class_contents is ready now.
        // fml.formal_filename is ready now.
        a_formal_entry.assign(v_fml,t_Entry.v_pair(v_name,v_ty));
      }
    }
  }

  def visit_5_2_0(anchor : T_Formal) : Unit = anchor match {
    case p_formal(v_fml,v_name,v_ty) => {
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_name,v_this_sym)) {
        // fml.formal_classtable is ready now.
        // place holder for error(...):381.G[error]'shared_info
        // place holder for error(...):381.msg
        // place holder for error(...):381.ln
        // place holder for error(...):381.filename
        // error(...):381.result is ready now.
        a11_this_errors.assign(anchor,v_error(a_formal_filename.get(v_fml),new M__basic_24[ T_Formal](t_Formal).v_lineno(v_fml),"'this' cannot be the name of a formal parameter."));
        // place holder for class_is_undefined(...):385.G[class_is_undefined]'shared_info
        // place holder for class_is_undefined(...):385.G[class_is_undefined]'shared_info$native_sym
        // place holder for class_is_undefined(...):385.G[class_is_undefined]'shared_info$no_class_contents
        // place holder for class_is_undefined(...):385.ct
        // place holder for class_is_undefined(...):385.name
        // class_is_undefined(...):385.result is ready now.
        if (v_class_is_undefined(v_ty,a_formal_classtable.get(v_fml))) {
          // place holder for error(...):388.G[error]'shared_info
          // place holder for error(...):388.msg
          // place holder for error(...):388.ln
          // place holder for error(...):388.filename
          // error(...):388.result is ready now.
          a12_type_errors.assign(anchor,v_error(a_formal_filename.get(v_fml),new M__basic_24[ T_Formal](t_Formal).v_lineno(v_fml),new M__basic_18[ T_String](t_String).v__op_ss("Class ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_ty),new M__basic_18[ T_String](t_String).v__op_ss(" of formal parameter ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_name)," is undefined."))))));
          a_formal_errors.assign(v_fml,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a11_this_errors.get(anchor),a12_type_errors.get(anchor)));
        } else {
          a12_type_errors.assign(anchor,t_Errors.v_none());
          a_formal_errors.assign(v_fml,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a11_this_errors.get(anchor),a12_type_errors.get(anchor)));
          // place holder for error(...):388.G[error]'shared_info
          // place holder for error(...):388.msg
          // place holder for error(...):388.ln
          // place holder for error(...):388.filename
          // error(...):388.result is ready now.
        }
      } else {
        // fml.formal_classtable is ready now.
        a11_this_errors.assign(anchor,t_Errors.v_none());
        // place holder for error(...):381.G[error]'shared_info
        // place holder for error(...):381.msg
        // place holder for error(...):381.ln
        // place holder for error(...):381.filename
        // error(...):381.result is ready now.
        // place holder for class_is_undefined(...):385.G[class_is_undefined]'shared_info
        // place holder for class_is_undefined(...):385.G[class_is_undefined]'shared_info$native_sym
        // place holder for class_is_undefined(...):385.G[class_is_undefined]'shared_info$no_class_contents
        // place holder for class_is_undefined(...):385.ct
        // place holder for class_is_undefined(...):385.name
        // class_is_undefined(...):385.result is ready now.
        if (v_class_is_undefined(v_ty,a_formal_classtable.get(v_fml))) {
          // place holder for error(...):388.G[error]'shared_info
          // place holder for error(...):388.msg
          // place holder for error(...):388.ln
          // place holder for error(...):388.filename
          // error(...):388.result is ready now.
          a12_type_errors.assign(anchor,v_error(a_formal_filename.get(v_fml),new M__basic_24[ T_Formal](t_Formal).v_lineno(v_fml),new M__basic_18[ T_String](t_String).v__op_ss("Class ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_ty),new M__basic_18[ T_String](t_String).v__op_ss(" of formal parameter ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_name)," is undefined."))))));
          a_formal_errors.assign(v_fml,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a11_this_errors.get(anchor),a12_type_errors.get(anchor)));
        } else {
          a12_type_errors.assign(anchor,t_Errors.v_none());
          a_formal_errors.assign(v_fml,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a11_this_errors.get(anchor),a12_type_errors.get(anchor)));
          // place holder for error(...):388.G[error]'shared_info
          // place holder for error(...):388.msg
          // place holder for error(...):388.ln
          // place holder for error(...):388.filename
          // error(...):388.result is ready now.
        }
      }
    }
  }


  def visit_6_1(node : T_Formals) : Unit = node match {
    case t_Formals.p_append(_,_,_) => visit_6_1_0(node);
    case t_Formals.p_single(_,_) => visit_6_1_1(node);
    case t_Formals.p_none(_) => visit_6_1_2(node);
  };
  def visit_6_2(node : T_Formals) : Unit = node match {
    case t_Formals.p_append(_,_,_) => visit_6_2_0(node);
    case t_Formals.p_single(_,_) => visit_6_2_1(node);
    case t_Formals.p_none(_) => visit_6_2_2(node);
  };
  def visit_6_1_0(anchor : T_Formals) : Unit = anchor match {
    case t_Formals.p_append(v_fmls,v_fmls1,v_fmls2) => {
      // fmls.G[Formals]'shared_info is ready now.
      // fmls.G[Formals]'shared_info$this_sym is ready now.
      // fmls.G[Formals]'shared_info$native_sym is ready now.
      // fmls.G[Formals]'shared_info$no_class_contents is ready now.
      // fmls.formals_filename is ready now.
      // shared info for fmls1 is ready.
      // fmls1.G[Formals]'shared_info$this_sym
      // fmls1.G[Formals]'shared_info$native_sym
      // fmls1.G[Formals]'shared_info$no_class_contents
      a_formals_filename.assign(v_fmls1,a_formals_filename.get(v_fmls));
      visit_6_1(v_fmls1);
      // fmls1.formals_entries is ready now.
      // shared info for fmls2 is ready.
      // fmls2.G[Formals]'shared_info$this_sym
      // fmls2.G[Formals]'shared_info$native_sym
      // fmls2.G[Formals]'shared_info$no_class_contents
      a_formals_filename.assign(v_fmls2,a_formals_filename.get(v_fmls));
      visit_6_1(v_fmls2);
      // fmls2.formals_entries is ready now.
      a_formals_entries.assign(v_fmls,new M__basic_18[ T_Environment](t_Environment).v__op_ss(a_formals_entries.get(v_fmls1),a_formals_entries.get(v_fmls2)));
    }
  }

  def visit_6_2_0(anchor : T_Formals) : Unit = anchor match {
    case t_Formals.p_append(v_fmls,v_fmls1,v_fmls2) => {
      // fmls.formals_classtable is ready now.
      a_formals_classtable.assign(v_fmls1,a_formals_classtable.get(v_fmls));
      visit_6_2(v_fmls1);
      // fmls1.formals_errors is ready now.
      a_formals_classtable.assign(v_fmls2,a_formals_classtable.get(v_fmls));
      visit_6_2(v_fmls2);
      // fmls2.formals_errors is ready now.
      a_formals_errors.assign(v_fmls,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_formals_errors.get(v_fmls1),a_formals_errors.get(v_fmls2)));
    }
  }

  def visit_6_1_1(anchor : T_Formals) : Unit = anchor match {
    case t_Formals.p_single(v_fmls,v_fml) => {
      // fmls.G[Formals]'shared_info is ready now.
      // fmls.G[Formals]'shared_info$this_sym is ready now.
      // fmls.G[Formals]'shared_info$native_sym is ready now.
      // fmls.G[Formals]'shared_info$no_class_contents is ready now.
      // fmls.formals_filename is ready now.
      // shared info for fml is ready.
      // fml.G[Formal]'shared_info$this_sym
      // fml.G[Formal]'shared_info$native_sym
      // fml.G[Formal]'shared_info$no_class_contents
      a_formal_filename.assign(v_fml,a_formals_filename.get(v_fmls));
      visit_5_1(v_fml);
      // fml.formal_entry is ready now.
      a_formals_entries.assign(v_fmls,t_Environment.v_single(a_formal_entry.get(v_fml)));
    }
  }

  def visit_6_2_1(anchor : T_Formals) : Unit = anchor match {
    case t_Formals.p_single(v_fmls,v_fml) => {
      // fmls.formals_classtable is ready now.
      a_formal_classtable.assign(v_fml,a_formals_classtable.get(v_fmls));
      visit_5_2(v_fml);
      // fml.formal_errors is ready now.
      a_formals_errors.assign(v_fmls,a_formal_errors.get(v_fml));
    }
  }

  def visit_6_1_2(anchor : T_Formals) : Unit = anchor match {
    case t_Formals.p_none(v_fmls) => {
      // fmls.G[Formals]'shared_info is ready now.
      // fmls.G[Formals]'shared_info$this_sym is ready now.
      // fmls.G[Formals]'shared_info$native_sym is ready now.
      // fmls.G[Formals]'shared_info$no_class_contents is ready now.
      // fmls.formals_filename is ready now.
      a_formals_entries.assign(v_fmls,t_Environment.v_none());
    }
  }

  def visit_6_2_2(anchor : T_Formals) : Unit = anchor match {
    case t_Formals.p_none(v_fmls) => {
      // fmls.formals_classtable is ready now.
      a_formals_errors.assign(v_fmls,t_Errors.v_none());
    }
  }


  def visit_7_1(node : T_Expression) : Unit = node match {
    case p_variable(_,_) => visit_7_1_23(node);
    case p_assign(_,_,_) => visit_7_1_0(node);
    case p_static_dispatch(_,_,_,_,_) => visit_7_1_1(node);
    case p_dispatch(_,_,_,_) => visit_7_1_2(node);
    case p_cond(_,_,_,_) => visit_7_1_3(node);
    case p_loop(_,_,_) => visit_7_1_4(node);
    case p_block(_,_) => visit_7_1_6(node);
    case p_let(_,_,_,_,_) => visit_7_1_7(node);
    case p_add(_,_,_) => visit_7_1_8(node);
    case p_sub(_,_,_) => visit_7_1_9(node);
    case p_mul(_,_,_) => visit_7_1_10(node);
    case p_div(_,_,_) => visit_7_1_11(node);
    case p_neg(_,_) => visit_7_1_12(node);
    case p_lt(_,_,_) => visit_7_1_13(node);
    case p_leq(_,_,_) => visit_7_1_14(node);
    case p_comp(_,_) => visit_7_1_15(node);
    case p_int_lit(_,_) => visit_7_1_16(node);
    case p_bool_lit(_,_) => visit_7_1_17(node);
    case p_string_lit(_,_) => visit_7_1_18(node);
    case p_alloc(_,_) => visit_7_1_19(node);
    case p_nil(_) => visit_7_1_20(node);
    case p_unit(_) => visit_7_1_21(node);
    case p_no_expr(_) => visit_7_1_22(node);
    case p_typecase(_,_,_) => visit_7_1_5(node);
  };
  def visit_7_1_23(anchor : T_Expression) : Unit = anchor match {
    case p_variable(v_e,v_s) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a13_ty.assign(anchor,new M__cool_noinherit_semant_1[ T_CoolType,T_AttrEntry,T_Environment](t_CoolType,t_AttrEntry,t_Environment).v_lookup(v_s,a_expr_env.get(v_e),v_error_sym));
      if (new M__basic_2[ T_CoolType](t_CoolType).v__op_0(a13_ty.get(anchor),v_error_sym)) {
        a_expr_type.assign(v_e,a13_ty.get(anchor));
        // place holder for error(...):412.G[error]'shared_info
        // place holder for error(...):412.msg
        // place holder for error(...):412.ln
        // place holder for error(...):412.filename
        // error(...):412.result is ready now.
        a14_lookup_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Identifier ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s)," undeclared"))));
        a_expr_errors.assign(v_e,a14_lookup_errors.get(anchor));
      } else {
        a_expr_type.assign(v_e,a13_ty.get(anchor));
        a14_lookup_errors.assign(anchor,t_Errors.v_none());
        a_expr_errors.assign(v_e,a14_lookup_errors.get(anchor));
        // place holder for error(...):412.G[error]'shared_info
        // place holder for error(...):412.msg
        // place holder for error(...):412.ln
        // place holder for error(...):412.filename
        // error(...):412.result is ready now.
      }
    }
  }

  def visit_7_1_0(anchor : T_Expression) : Unit = anchor match {
    case p_assign(v_e,v_s,v_v) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_s,v_this_sym)) {
        // e.G[Expression]'shared_info$unit_sym is ready now.
        // e.G[Expression]'shared_info$null_sym is ready now.
        // e.G[Expression]'shared_info$native_sym is ready now.
        // e.G[Expression]'shared_info$error_sym is ready now.
        // e.G[Expression]'shared_info$no_method_sig is ready now.
        // e.G[Expression]'shared_info$no_class_contents is ready now.
        // e.expr_env is ready now.
        // e.expr_classtable is ready now.
        // e.expr_filename is ready now.
        a_expr_type.assign(v_e,v_unit_sym);
        // shared info for v is ready.
        // v.G[Expression]'shared_info$integer_sym
        // v.G[Expression]'shared_info$boolean_sym
        // v.G[Expression]'shared_info$string_sym
        // v.G[Expression]'shared_info$this_sym
        // v.G[Expression]'shared_info$unit_sym
        // v.G[Expression]'shared_info$null_sym
        // v.G[Expression]'shared_info$native_sym
        // v.G[Expression]'shared_info$error_sym
        // v.G[Expression]'shared_info$no_method_sig
        // v.G[Expression]'shared_info$no_class_contents
        a_expr_env.assign(v_v,a_expr_env.get(v_e));
        a_expr_classtable.assign(v_v,a_expr_classtable.get(v_e));
        a_expr_filename.assign(v_v,a_expr_filename.get(v_e));
        visit_7_1(v_v);
        // v.expr_type is ready now.
        // v.expr_errors is ready now.
        a15_ty.assign(anchor,new M__cool_noinherit_semant_1[ T_CoolType,T_AttrEntry,T_Environment](t_CoolType,t_AttrEntry,t_Environment).v_lookup(v_s,a_expr_env.get(v_e),v_error_sym));
        if (new M__basic_2[ T_CoolType](t_CoolType).v__op_0(a15_ty.get(anchor),v_error_sym)) {
          // place holder for error(...):431.G[error]'shared_info
          // place holder for error(...):431.msg
          // place holder for error(...):431.ln
          // place holder for error(...):431.filename
          // error(...):431.result is ready now.
          a16_lookup_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Identifier ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s)," undeclared"))));
          // place holder for error(...):437.G[error]'shared_info
          // place holder for error(...):437.msg
          // place holder for error(...):437.ln
          // place holder for error(...):437.filename
          // error(...):437.result is ready now.
          a17_this_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"Cannot assign to 'this'"));
          // place holder for type_equal(...):441.G[type_equal]'shared_info
          // place holder for type_equal(...):441.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):441.t2
          // place holder for type_equal(...):441.t1
          // type_equal(...):441.result is ready now.
          if (v_not(v_type_equal(a_expr_type.get(v_v),a15_ty.get(anchor)))) {
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
            a18_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Inferred type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_v)),new M__basic_18[ T_String](t_String).v__op_ss(" of assignment of ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to identifier's declared type ",t_Symbol.v_string(a15_ty.get(anchor)))))))));
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
          } else {
            a18_type_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
          }
        } else {
          a16_lookup_errors.assign(anchor,t_Errors.v_none());
          // place holder for error(...):431.G[error]'shared_info
          // place holder for error(...):431.msg
          // place holder for error(...):431.ln
          // place holder for error(...):431.filename
          // error(...):431.result is ready now.
          // place holder for error(...):437.G[error]'shared_info
          // place holder for error(...):437.msg
          // place holder for error(...):437.ln
          // place holder for error(...):437.filename
          // error(...):437.result is ready now.
          a17_this_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"Cannot assign to 'this'"));
          // place holder for type_equal(...):441.G[type_equal]'shared_info
          // place holder for type_equal(...):441.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):441.t2
          // place holder for type_equal(...):441.t1
          // type_equal(...):441.result is ready now.
          if (v_not(v_type_equal(a_expr_type.get(v_v),a15_ty.get(anchor)))) {
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
            a18_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Inferred type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_v)),new M__basic_18[ T_String](t_String).v__op_ss(" of assignment of ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to identifier's declared type ",t_Symbol.v_string(a15_ty.get(anchor)))))))));
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
          } else {
            a18_type_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
          }
        }
      } else {
        // e.G[Expression]'shared_info$unit_sym is ready now.
        // e.G[Expression]'shared_info$null_sym is ready now.
        // e.G[Expression]'shared_info$native_sym is ready now.
        // e.G[Expression]'shared_info$error_sym is ready now.
        // e.G[Expression]'shared_info$no_method_sig is ready now.
        // e.G[Expression]'shared_info$no_class_contents is ready now.
        // e.expr_env is ready now.
        // e.expr_classtable is ready now.
        // e.expr_filename is ready now.
        a_expr_type.assign(v_e,v_unit_sym);
        // shared info for v is ready.
        // v.G[Expression]'shared_info$integer_sym
        // v.G[Expression]'shared_info$boolean_sym
        // v.G[Expression]'shared_info$string_sym
        // v.G[Expression]'shared_info$this_sym
        // v.G[Expression]'shared_info$unit_sym
        // v.G[Expression]'shared_info$null_sym
        // v.G[Expression]'shared_info$native_sym
        // v.G[Expression]'shared_info$error_sym
        // v.G[Expression]'shared_info$no_method_sig
        // v.G[Expression]'shared_info$no_class_contents
        a_expr_env.assign(v_v,a_expr_env.get(v_e));
        a_expr_classtable.assign(v_v,a_expr_classtable.get(v_e));
        a_expr_filename.assign(v_v,a_expr_filename.get(v_e));
        visit_7_1(v_v);
        // v.expr_type is ready now.
        // v.expr_errors is ready now.
        a15_ty.assign(anchor,new M__cool_noinherit_semant_1[ T_CoolType,T_AttrEntry,T_Environment](t_CoolType,t_AttrEntry,t_Environment).v_lookup(v_s,a_expr_env.get(v_e),v_error_sym));
        if (new M__basic_2[ T_CoolType](t_CoolType).v__op_0(a15_ty.get(anchor),v_error_sym)) {
          // place holder for error(...):431.G[error]'shared_info
          // place holder for error(...):431.msg
          // place holder for error(...):431.ln
          // place holder for error(...):431.filename
          // error(...):431.result is ready now.
          a16_lookup_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Identifier ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s)," undeclared"))));
          a17_this_errors.assign(anchor,t_Errors.v_none());
          // place holder for error(...):437.G[error]'shared_info
          // place holder for error(...):437.msg
          // place holder for error(...):437.ln
          // place holder for error(...):437.filename
          // error(...):437.result is ready now.
          // place holder for type_equal(...):441.G[type_equal]'shared_info
          // place holder for type_equal(...):441.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):441.t2
          // place holder for type_equal(...):441.t1
          // type_equal(...):441.result is ready now.
          if (v_not(v_type_equal(a_expr_type.get(v_v),a15_ty.get(anchor)))) {
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
            a18_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Inferred type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_v)),new M__basic_18[ T_String](t_String).v__op_ss(" of assignment of ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to identifier's declared type ",t_Symbol.v_string(a15_ty.get(anchor)))))))));
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
          } else {
            a18_type_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
          }
        } else {
          a16_lookup_errors.assign(anchor,t_Errors.v_none());
          // place holder for error(...):431.G[error]'shared_info
          // place holder for error(...):431.msg
          // place holder for error(...):431.ln
          // place holder for error(...):431.filename
          // error(...):431.result is ready now.
          a17_this_errors.assign(anchor,t_Errors.v_none());
          // place holder for error(...):437.G[error]'shared_info
          // place holder for error(...):437.msg
          // place holder for error(...):437.ln
          // place holder for error(...):437.filename
          // error(...):437.result is ready now.
          // place holder for type_equal(...):441.G[type_equal]'shared_info
          // place holder for type_equal(...):441.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):441.t2
          // place holder for type_equal(...):441.t1
          // type_equal(...):441.result is ready now.
          if (v_not(v_type_equal(a_expr_type.get(v_v),a15_ty.get(anchor)))) {
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
            a18_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Inferred type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_v)),new M__basic_18[ T_String](t_String).v__op_ss(" of assignment of ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to identifier's declared type ",t_Symbol.v_string(a15_ty.get(anchor)))))))));
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
          } else {
            a18_type_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a16_lookup_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a17_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a18_type_errors.get(anchor),a_expr_errors.get(v_v)))));
            // place holder for error(...):448.G[error]'shared_info
            // place holder for error(...):448.msg
            // place holder for error(...):448.ln
            // place holder for error(...):448.filename
            // error(...):448.result is ready now.
          }
        }
      }
    }
  }

  def visit_7_1_1(anchor : T_Expression) : Unit = anchor match {
    case p_static_dispatch(v_e,v_rec,v_tn,v_msym,v_actuals) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_error_sym);
      // shared info for rec is ready.
      // rec.G[Expression]'shared_info$integer_sym
      // rec.G[Expression]'shared_info$boolean_sym
      // rec.G[Expression]'shared_info$string_sym
      // rec.G[Expression]'shared_info$this_sym
      // rec.G[Expression]'shared_info$unit_sym
      // rec.G[Expression]'shared_info$null_sym
      // rec.G[Expression]'shared_info$native_sym
      // rec.G[Expression]'shared_info$error_sym
      // rec.G[Expression]'shared_info$no_method_sig
      // rec.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_rec,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_rec,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_rec,a_expr_filename.get(v_e));
      visit_7_1(v_rec);
      // rec.expr_type is ready now.
      // rec.expr_errors is ready now.
      // shared info for actuals is ready.
      // actuals.G[Expressions]'shared_info$integer_sym
      // actuals.G[Expressions]'shared_info$boolean_sym
      // actuals.G[Expressions]'shared_info$string_sym
      // actuals.G[Expressions]'shared_info$this_sym
      // actuals.G[Expressions]'shared_info$unit_sym
      // actuals.G[Expressions]'shared_info$null_sym
      // actuals.G[Expressions]'shared_info$native_sym
      // actuals.G[Expressions]'shared_info$error_sym
      // actuals.G[Expressions]'shared_info$no_method_sig
      // actuals.G[Expressions]'shared_info$no_class_contents
      a_exprs_env.assign(v_actuals,a_expr_env.get(v_e));
      a_exprs_classtable.assign(v_actuals,a_expr_classtable.get(v_e));
      a_exprs_filename.assign(v_actuals,a_expr_filename.get(v_e));
      visit_8_1(v_actuals);
      // actuals.exprs_types is ready now.
      // actuals.exprs_errors is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_rec),a_exprs_errors.get(v_actuals)));
    }
  }

  def visit_7_1_2(anchor : T_Expression) : Unit = anchor match {
    case p_dispatch(v_e,v_rec,v_msym,v_actuals) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      // shared info for rec is ready.
      // rec.G[Expression]'shared_info$integer_sym
      // rec.G[Expression]'shared_info$boolean_sym
      // rec.G[Expression]'shared_info$string_sym
      // rec.G[Expression]'shared_info$this_sym
      // rec.G[Expression]'shared_info$unit_sym
      // rec.G[Expression]'shared_info$null_sym
      // rec.G[Expression]'shared_info$native_sym
      // rec.G[Expression]'shared_info$error_sym
      // rec.G[Expression]'shared_info$no_method_sig
      // rec.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_rec,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_rec,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_rec,a_expr_filename.get(v_e));
      visit_7_1(v_rec);
      // rec.expr_type is ready now.
      if (new M__basic_2[ T_CoolType](t_CoolType).v__op_0(a_expr_type.get(v_rec),v_null_sym)) {
        // rec.expr_errors is ready now.
        // shared info for actuals is ready.
        // actuals.G[Expressions]'shared_info$integer_sym
        // actuals.G[Expressions]'shared_info$boolean_sym
        // actuals.G[Expressions]'shared_info$string_sym
        // actuals.G[Expressions]'shared_info$this_sym
        // actuals.G[Expressions]'shared_info$unit_sym
        // actuals.G[Expressions]'shared_info$null_sym
        // actuals.G[Expressions]'shared_info$native_sym
        // actuals.G[Expressions]'shared_info$error_sym
        // actuals.G[Expressions]'shared_info$no_method_sig
        // actuals.G[Expressions]'shared_info$no_class_contents
        a_exprs_env.assign(v_actuals,a_expr_env.get(v_e));
        a_exprs_classtable.assign(v_actuals,a_expr_classtable.get(v_e));
        a_exprs_filename.assign(v_actuals,a_expr_filename.get(v_e));
        visit_8_1(v_actuals);
        // actuals.exprs_types is ready now.
        // actuals.exprs_errors is ready now.
        a19_rt.assign(anchor,v_error_sym);
        a_expr_type.assign(v_e,a19_rt.get(anchor));
        a21_method_errors.assign(anchor,t_Errors.v_none());
        // place holder for error(...):487.G[error]'shared_info
        // place holder for error(...):487.msg
        // place holder for error(...):487.ln
        // place holder for error(...):487.filename
        // error(...):487.result is ready now.
        a20_null_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"Dispatch on null."));
        a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_rec),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_exprs_errors.get(v_actuals),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a20_null_errors.get(anchor),a21_method_errors.get(anchor)))));
        // place holder for error(...):496.G[error]'shared_info
        // place holder for error(...):496.msg
        // place holder for error(...):496.ln
        // place holder for error(...):496.filename
        // error(...):496.result is ready now.
        // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info
        // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info$error_sym
        // place holder for actuals_errors(...):500.ats
        // place holder for actuals_errors(...):500.fts
        // place holder for actuals_errors(...):500.ln
        // place holder for actuals_errors(...):500.fnm
        // actuals_errors(...):500.result is ready now.
      } else {
        if (new M__basic_2[ T_CoolType](t_CoolType).v__op_w0(a_expr_type.get(v_rec),v_error_sym)) {
          // rec.expr_errors is ready now.
          // shared info for actuals is ready.
          // actuals.G[Expressions]'shared_info$integer_sym
          // actuals.G[Expressions]'shared_info$boolean_sym
          // actuals.G[Expressions]'shared_info$string_sym
          // actuals.G[Expressions]'shared_info$this_sym
          // actuals.G[Expressions]'shared_info$unit_sym
          // actuals.G[Expressions]'shared_info$null_sym
          // actuals.G[Expressions]'shared_info$native_sym
          // actuals.G[Expressions]'shared_info$error_sym
          // actuals.G[Expressions]'shared_info$no_method_sig
          // actuals.G[Expressions]'shared_info$no_class_contents
          a_exprs_env.assign(v_actuals,a_expr_env.get(v_e));
          a_exprs_classtable.assign(v_actuals,a_expr_classtable.get(v_e));
          a_exprs_filename.assign(v_actuals,a_expr_filename.get(v_e));
          visit_8_1(v_actuals);
          // actuals.exprs_types is ready now.
          // actuals.exprs_errors is ready now.
          a20_null_errors.assign(anchor,t_Errors.v_none());
          // place holder for error(...):487.G[error]'shared_info
          // place holder for error(...):487.msg
          // place holder for error(...):487.ln
          // place holder for error(...):487.filename
          // error(...):487.result is ready now.
          a22_cc.assign(anchor,new M__cool_noinherit_semant_1[ T_ClassContents,T_ClassEntry,T_ClassTable](t_ClassContents,t_ClassEntry,t_ClassTable).v_lookup(a_expr_type.get(v_rec),a_expr_classtable.get(v_e),v_no_class_contents));
          if (new M__basic_2[ T_ClassContents](t_ClassContents).v__op_w0(a22_cc.get(anchor),v_no_class_contents)) {
            a23_mt.assign(anchor,t_ClassContents.v_fst(a22_cc.get(anchor)));
            a24_sig.assign(anchor,new M__cool_noinherit_semant_1[ T_MethodSig,T_MethodEntry,T_MethodTable](t_MethodSig,t_MethodEntry,t_MethodTable).v_lookup(v_msym,a23_mt.get(anchor),v_no_method_sig));
            if (new M__basic_2[ T_MethodSig](t_MethodSig).v__op_0(a24_sig.get(anchor),v_no_method_sig)) {
              a19_rt.assign(anchor,v_error_sym);
              a_expr_type.assign(v_e,a19_rt.get(anchor));
              // place holder for error(...):496.G[error]'shared_info
              // place holder for error(...):496.msg
              // place holder for error(...):496.ln
              // place holder for error(...):496.filename
              // error(...):496.result is ready now.
              a21_method_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Dispatch to undefined method ",new M__basic_18[ T_String](t_String).v__op_ss(v_symbol_name(v_msym),"."))));
              a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_rec),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_exprs_errors.get(v_actuals),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a20_null_errors.get(anchor),a21_method_errors.get(anchor)))));
              // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info
              // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info$error_sym
              // place holder for actuals_errors(...):500.ats
              // place holder for actuals_errors(...):500.fts
              // place holder for actuals_errors(...):500.ln
              // place holder for actuals_errors(...):500.fnm
              // actuals_errors(...):500.result is ready now.
            } else {
              a19_rt.assign(anchor,new M__basic_16[ T_CoolType,T_MethodSig](t_CoolType,t_MethodSig).v_first(a24_sig.get(anchor)));
              a_expr_type.assign(v_e,a19_rt.get(anchor));
              // place holder for error(...):496.G[error]'shared_info
              // place holder for error(...):496.msg
              // place holder for error(...):496.ln
              // place holder for error(...):496.filename
              // error(...):496.result is ready now.
              // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info
              // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info$error_sym
              // place holder for actuals_errors(...):500.ats
              // place holder for actuals_errors(...):500.fts
              // place holder for actuals_errors(...):500.ln
              // place holder for actuals_errors(...):500.fnm
              // actuals_errors(...):500.result is ready now.
              a21_method_errors.assign(anchor,v_actuals_errors(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_17[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_butfirst(a24_sig.get(anchor)),a_exprs_types.get(v_actuals)));
              a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_rec),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_exprs_errors.get(v_actuals),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a20_null_errors.get(anchor),a21_method_errors.get(anchor)))));
            }
          } else {
            a19_rt.assign(anchor,v_error_sym);
            a_expr_type.assign(v_e,a19_rt.get(anchor));
            a21_method_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_rec),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_exprs_errors.get(v_actuals),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a20_null_errors.get(anchor),a21_method_errors.get(anchor)))));
            a23_mt.assign(anchor,t_ClassContents.v_fst(a22_cc.get(anchor)));
            a24_sig.assign(anchor,new M__cool_noinherit_semant_1[ T_MethodSig,T_MethodEntry,T_MethodTable](t_MethodSig,t_MethodEntry,t_MethodTable).v_lookup(v_msym,a23_mt.get(anchor),v_no_method_sig));
            // place holder for error(...):496.G[error]'shared_info
            // place holder for error(...):496.msg
            // place holder for error(...):496.ln
            // place holder for error(...):496.filename
            // error(...):496.result is ready now.
            // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info
            // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info$error_sym
            // place holder for actuals_errors(...):500.ats
            // place holder for actuals_errors(...):500.fts
            // place holder for actuals_errors(...):500.ln
            // place holder for actuals_errors(...):500.fnm
            // actuals_errors(...):500.result is ready now.
          }
        } else {
          // rec.expr_errors is ready now.
          // shared info for actuals is ready.
          // actuals.G[Expressions]'shared_info$integer_sym
          // actuals.G[Expressions]'shared_info$boolean_sym
          // actuals.G[Expressions]'shared_info$string_sym
          // actuals.G[Expressions]'shared_info$this_sym
          // actuals.G[Expressions]'shared_info$unit_sym
          // actuals.G[Expressions]'shared_info$null_sym
          // actuals.G[Expressions]'shared_info$native_sym
          // actuals.G[Expressions]'shared_info$error_sym
          // actuals.G[Expressions]'shared_info$no_method_sig
          // actuals.G[Expressions]'shared_info$no_class_contents
          a_exprs_env.assign(v_actuals,a_expr_env.get(v_e));
          a_exprs_classtable.assign(v_actuals,a_expr_classtable.get(v_e));
          a_exprs_filename.assign(v_actuals,a_expr_filename.get(v_e));
          visit_8_1(v_actuals);
          // actuals.exprs_types is ready now.
          // actuals.exprs_errors is ready now.
          a19_rt.assign(anchor,v_error_sym);
          a_expr_type.assign(v_e,a19_rt.get(anchor));
          a20_null_errors.assign(anchor,t_Errors.v_none());
          a21_method_errors.assign(anchor,t_Errors.v_none());
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_rec),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_exprs_errors.get(v_actuals),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a20_null_errors.get(anchor),a21_method_errors.get(anchor)))));
          // place holder for error(...):487.G[error]'shared_info
          // place holder for error(...):487.msg
          // place holder for error(...):487.ln
          // place holder for error(...):487.filename
          // error(...):487.result is ready now.
          // place holder for error(...):496.G[error]'shared_info
          // place holder for error(...):496.msg
          // place holder for error(...):496.ln
          // place holder for error(...):496.filename
          // error(...):496.result is ready now.
          // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info
          // place holder for actuals_errors(...):500.G[actuals_errors]'shared_info$error_sym
          // place holder for actuals_errors(...):500.ats
          // place holder for actuals_errors(...):500.fts
          // place holder for actuals_errors(...):500.ln
          // place holder for actuals_errors(...):500.fnm
          // actuals_errors(...):500.result is ready now.
        }
      }
    }
  }

  def visit_7_1_3(anchor : T_Expression) : Unit = anchor match {
    case p_cond(v_e,v_pred,v_th,v_el) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      // shared info for pred is ready.
      // pred.G[Expression]'shared_info$integer_sym
      // pred.G[Expression]'shared_info$boolean_sym
      // pred.G[Expression]'shared_info$string_sym
      // pred.G[Expression]'shared_info$this_sym
      // pred.G[Expression]'shared_info$unit_sym
      // pred.G[Expression]'shared_info$null_sym
      // pred.G[Expression]'shared_info$native_sym
      // pred.G[Expression]'shared_info$error_sym
      // pred.G[Expression]'shared_info$no_method_sig
      // pred.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_pred,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_pred,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_pred,a_expr_filename.get(v_e));
      visit_7_1(v_pred);
      // pred.expr_type is ready now.
      // pred.expr_errors is ready now.
      // shared info for th is ready.
      // th.G[Expression]'shared_info$integer_sym
      // th.G[Expression]'shared_info$boolean_sym
      // th.G[Expression]'shared_info$string_sym
      // th.G[Expression]'shared_info$this_sym
      // th.G[Expression]'shared_info$unit_sym
      // th.G[Expression]'shared_info$null_sym
      // th.G[Expression]'shared_info$native_sym
      // th.G[Expression]'shared_info$error_sym
      // th.G[Expression]'shared_info$no_method_sig
      // th.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_th,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_th,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_th,a_expr_filename.get(v_e));
      visit_7_1(v_th);
      // th.expr_type is ready now.
      a_expr_type.assign(v_e,a_expr_type.get(v_th));
      // th.expr_errors is ready now.
      // shared info for el is ready.
      // el.G[Expression]'shared_info$integer_sym
      // el.G[Expression]'shared_info$boolean_sym
      // el.G[Expression]'shared_info$string_sym
      // el.G[Expression]'shared_info$this_sym
      // el.G[Expression]'shared_info$unit_sym
      // el.G[Expression]'shared_info$null_sym
      // el.G[Expression]'shared_info$native_sym
      // el.G[Expression]'shared_info$error_sym
      // el.G[Expression]'shared_info$no_method_sig
      // el.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_el,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_el,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_el,a_expr_filename.get(v_e));
      visit_7_1(v_el);
      // el.expr_type is ready now.
      // el.expr_errors is ready now.
      // place holder for type_equal(...):526.G[type_equal]'shared_info
      // place holder for type_equal(...):526.G[type_equal]'shared_info$error_sym
      // place holder for type_equal(...):526.t2
      // place holder for type_equal(...):526.t1
      // type_equal(...):526.result is ready now.
      if (v_not(v_type_equal(a_expr_type.get(v_pred),v_boolean_sym))) {
        // place holder for error(...):529.G[error]'shared_info
        // place holder for error(...):529.msg
        // place holder for error(...):529.ln
        // place holder for error(...):529.filename
        // error(...):529.result is ready now.
        a25_pred_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_21[ T_String,T_CoolType](t_String,t_CoolType).v__op_BB("Predicate of 'if' does not have type Boolean, rather ",a_expr_type.get(v_pred))));
        // place holder for type_equal(...):533.G[type_equal]'shared_info
        // place holder for type_equal(...):533.G[type_equal]'shared_info$error_sym
        // place holder for type_equal(...):533.t2
        // place holder for type_equal(...):533.t1
        // type_equal(...):533.result is ready now.
        if (v_not(v_type_equal(a_expr_type.get(v_th),a_expr_type.get(v_el)))) {
          // place holder for error(...):535.G[error]'shared_info
          // place holder for error(...):535.msg
          // place holder for error(...):535.ln
          // place holder for error(...):535.filename
          // error(...):535.result is ready now.
          a26_join_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"Branches of `if' should have same type"));
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_pred),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a25_pred_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_th),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_el),a26_join_errors.get(anchor))))));
        } else {
          a26_join_errors.assign(anchor,t_Errors.v_none());
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_pred),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a25_pred_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_th),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_el),a26_join_errors.get(anchor))))));
          // place holder for error(...):535.G[error]'shared_info
          // place holder for error(...):535.msg
          // place holder for error(...):535.ln
          // place holder for error(...):535.filename
          // error(...):535.result is ready now.
        }
      } else {
        a25_pred_errors.assign(anchor,t_Errors.v_none());
        // place holder for error(...):529.G[error]'shared_info
        // place holder for error(...):529.msg
        // place holder for error(...):529.ln
        // place holder for error(...):529.filename
        // error(...):529.result is ready now.
        // place holder for type_equal(...):533.G[type_equal]'shared_info
        // place holder for type_equal(...):533.G[type_equal]'shared_info$error_sym
        // place holder for type_equal(...):533.t2
        // place holder for type_equal(...):533.t1
        // type_equal(...):533.result is ready now.
        if (v_not(v_type_equal(a_expr_type.get(v_th),a_expr_type.get(v_el)))) {
          // place holder for error(...):535.G[error]'shared_info
          // place holder for error(...):535.msg
          // place holder for error(...):535.ln
          // place holder for error(...):535.filename
          // error(...):535.result is ready now.
          a26_join_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"Branches of `if' should have same type"));
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_pred),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a25_pred_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_th),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_el),a26_join_errors.get(anchor))))));
        } else {
          a26_join_errors.assign(anchor,t_Errors.v_none());
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_pred),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a25_pred_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_th),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_el),a26_join_errors.get(anchor))))));
          // place holder for error(...):535.G[error]'shared_info
          // place holder for error(...):535.msg
          // place holder for error(...):535.ln
          // place holder for error(...):535.filename
          // error(...):535.result is ready now.
        }
      }
    }
  }

  def visit_7_1_4(anchor : T_Expression) : Unit = anchor match {
    case p_loop(v_e,v_pred,v_body) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_unit_sym);
      // shared info for pred is ready.
      // pred.G[Expression]'shared_info$integer_sym
      // pred.G[Expression]'shared_info$boolean_sym
      // pred.G[Expression]'shared_info$string_sym
      // pred.G[Expression]'shared_info$this_sym
      // pred.G[Expression]'shared_info$unit_sym
      // pred.G[Expression]'shared_info$null_sym
      // pred.G[Expression]'shared_info$native_sym
      // pred.G[Expression]'shared_info$error_sym
      // pred.G[Expression]'shared_info$no_method_sig
      // pred.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_pred,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_pred,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_pred,a_expr_filename.get(v_e));
      visit_7_1(v_pred);
      // pred.expr_type is ready now.
      // pred.expr_errors is ready now.
      // shared info for body is ready.
      // body.G[Expression]'shared_info$integer_sym
      // body.G[Expression]'shared_info$boolean_sym
      // body.G[Expression]'shared_info$string_sym
      // body.G[Expression]'shared_info$this_sym
      // body.G[Expression]'shared_info$unit_sym
      // body.G[Expression]'shared_info$null_sym
      // body.G[Expression]'shared_info$native_sym
      // body.G[Expression]'shared_info$error_sym
      // body.G[Expression]'shared_info$no_method_sig
      // body.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_body,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_body,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_body,a_expr_filename.get(v_e));
      visit_7_1(v_body);
      // body.expr_type is ready now.
      // body.expr_errors is ready now.
      // place holder for type_equal(...):555.G[type_equal]'shared_info
      // place holder for type_equal(...):555.G[type_equal]'shared_info$error_sym
      // place holder for type_equal(...):555.t2
      // place holder for type_equal(...):555.t1
      // type_equal(...):555.result is ready now.
      if (v_not(v_type_equal(a_expr_type.get(v_pred),v_boolean_sym))) {
        // place holder for error(...):558.G[error]'shared_info
        // place holder for error(...):558.msg
        // place holder for error(...):558.ln
        // place holder for error(...):558.filename
        // error(...):558.result is ready now.
        a27_pred_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_21[ T_String,T_CoolType](t_String,t_CoolType).v__op_BB("Predicate of 'while' does not have type Boolean, rather ",a_expr_type.get(v_pred))));
        a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_pred),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a27_pred_errors.get(anchor),a_expr_errors.get(v_body))));
      } else {
        a27_pred_errors.assign(anchor,t_Errors.v_none());
        a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_pred),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a27_pred_errors.get(anchor),a_expr_errors.get(v_body))));
        // place holder for error(...):558.G[error]'shared_info
        // place holder for error(...):558.msg
        // place holder for error(...):558.ln
        // place holder for error(...):558.filename
        // error(...):558.result is ready now.
      }
    }
  }

  def visit_7_1_6(anchor : T_Expression) : Unit = anchor match {
    case p_block(v_e,v_es) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      // shared info for es is ready.
      // es.G[Expressions]'shared_info$integer_sym
      // es.G[Expressions]'shared_info$boolean_sym
      // es.G[Expressions]'shared_info$string_sym
      // es.G[Expressions]'shared_info$this_sym
      // es.G[Expressions]'shared_info$unit_sym
      // es.G[Expressions]'shared_info$null_sym
      // es.G[Expressions]'shared_info$native_sym
      // es.G[Expressions]'shared_info$error_sym
      // es.G[Expressions]'shared_info$no_method_sig
      // es.G[Expressions]'shared_info$no_class_contents
      a_exprs_env.assign(v_es,a_expr_env.get(v_e));
      a_exprs_classtable.assign(v_es,a_expr_classtable.get(v_e));
      a_exprs_filename.assign(v_es,a_expr_filename.get(v_e));
      visit_8_1(v_es);
      // es.exprs_types is ready now.
      a_expr_type.assign(v_e,new M__basic_16[ T_CoolType,T_CoolTypes](t_CoolType,t_CoolTypes).v_last(a_exprs_types.get(v_es)));
      // es.exprs_errors is ready now.
      a_expr_errors.assign(v_e,a_exprs_errors.get(v_es));
    }
  }

  def visit_7_1_7(anchor : T_Expression) : Unit = anchor match {
    case p_let(v_e,v_s,v_ts,v_init,v_body) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      if (new M__basic_2[ T_Symbol](t_Symbol).v__op_0(v_s,v_this_sym)) {
        // e.G[Expression]'shared_info$unit_sym is ready now.
        // e.G[Expression]'shared_info$null_sym is ready now.
        // e.G[Expression]'shared_info$native_sym is ready now.
        // e.G[Expression]'shared_info$error_sym is ready now.
        // e.G[Expression]'shared_info$no_method_sig is ready now.
        // e.G[Expression]'shared_info$no_class_contents is ready now.
        // e.expr_env is ready now.
        // e.expr_classtable is ready now.
        // e.expr_filename is ready now.
        // shared info for init is ready.
        // init.G[Expression]'shared_info$integer_sym
        // init.G[Expression]'shared_info$boolean_sym
        // init.G[Expression]'shared_info$string_sym
        // init.G[Expression]'shared_info$this_sym
        // init.G[Expression]'shared_info$unit_sym
        // init.G[Expression]'shared_info$null_sym
        // init.G[Expression]'shared_info$native_sym
        // init.G[Expression]'shared_info$error_sym
        // init.G[Expression]'shared_info$no_method_sig
        // init.G[Expression]'shared_info$no_class_contents
        a_expr_env.assign(v_init,a_expr_env.get(v_e));
        a_expr_classtable.assign(v_init,a_expr_classtable.get(v_e));
        a_expr_filename.assign(v_init,a_expr_filename.get(v_e));
        visit_7_1(v_init);
        // init.expr_type is ready now.
        // init.expr_errors is ready now.
        // shared info for body is ready.
        // body.G[Expression]'shared_info$integer_sym
        // body.G[Expression]'shared_info$boolean_sym
        // body.G[Expression]'shared_info$string_sym
        // body.G[Expression]'shared_info$this_sym
        // body.G[Expression]'shared_info$unit_sym
        // body.G[Expression]'shared_info$null_sym
        // body.G[Expression]'shared_info$native_sym
        // body.G[Expression]'shared_info$error_sym
        // body.G[Expression]'shared_info$no_method_sig
        // body.G[Expression]'shared_info$no_class_contents
        a_expr_classtable.assign(v_body,a_expr_classtable.get(v_e));
        a_expr_filename.assign(v_body,a_expr_filename.get(v_e));
        a28_new_env.assign(anchor,new M__basic_18[ T_Environment](t_Environment).v__op_ss(t_Environment.v_single(t_Entry.v_pair(v_s,v_ts)),a_expr_env.get(v_e)));
        a_expr_env.assign(v_body,a28_new_env.get(anchor));
        visit_7_1(v_body);
        // body.expr_type is ready now.
        a_expr_type.assign(v_e,a_expr_type.get(v_body));
        // body.expr_errors is ready now.
        // place holder for error(...):596.G[error]'shared_info
        // place holder for error(...):596.msg
        // place holder for error(...):596.ln
        // place holder for error(...):596.filename
        // error(...):596.result is ready now.
        a29_this_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"'this' cannot be the name of a let-bound variable."));
        // place holder for class_is_undefined(...):600.G[class_is_undefined]'shared_info
        // place holder for class_is_undefined(...):600.G[class_is_undefined]'shared_info$native_sym
        // place holder for class_is_undefined(...):600.G[class_is_undefined]'shared_info$no_class_contents
        // place holder for class_is_undefined(...):600.ct
        // place holder for class_is_undefined(...):600.name
        // class_is_undefined(...):600.result is ready now.
        if (v_class_is_undefined(v_ts,a_expr_classtable.get(v_e))) {
          // place holder for error(...):604.G[error]'shared_info
          // place holder for error(...):604.msg
          // place holder for error(...):604.ln
          // place holder for error(...):604.filename
          // error(...):604.result is ready now.
          a30_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Class ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_ts),new M__basic_18[ T_String](t_String).v__op_ss(" of let bound variable ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s)," is undefined."))))));
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a29_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_init),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a30_type_errors.get(anchor),a_expr_errors.get(v_body)))));
          // place holder for type_equal(...):605.G[type_equal]'shared_info
          // place holder for type_equal(...):605.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):605.t2
          // place holder for type_equal(...):605.t1
          // type_equal(...):605.result is ready now.
          // place holder for error(...):611.G[error]'shared_info
          // place holder for error(...):611.msg
          // place holder for error(...):611.ln
          // place holder for error(...):611.filename
          // error(...):611.result is ready now.
        } else {
          // place holder for error(...):604.G[error]'shared_info
          // place holder for error(...):604.msg
          // place holder for error(...):604.ln
          // place holder for error(...):604.filename
          // error(...):604.result is ready now.
          // place holder for type_equal(...):605.G[type_equal]'shared_info
          // place holder for type_equal(...):605.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):605.t2
          // place holder for type_equal(...):605.t1
          // type_equal(...):605.result is ready now.
          if (v_not(v_type_equal(a_expr_type.get(v_init),v_ts))) {
            // place holder for error(...):611.G[error]'shared_info
            // place holder for error(...):611.msg
            // place holder for error(...):611.ln
            // place holder for error(...):611.filename
            // error(...):611.result is ready now.
            a30_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_init),new M__basic_18[ T_String](t_String).v__op_ss("Inferred type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_init)),new M__basic_18[ T_String](t_String).v__op_ss(" of initialization of ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to identifier's declared type ",t_Symbol.v_string(v_ts))))))));
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a29_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_init),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a30_type_errors.get(anchor),a_expr_errors.get(v_body)))));
          } else {
            a30_type_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a29_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_init),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a30_type_errors.get(anchor),a_expr_errors.get(v_body)))));
            // place holder for error(...):611.G[error]'shared_info
            // place holder for error(...):611.msg
            // place holder for error(...):611.ln
            // place holder for error(...):611.filename
            // error(...):611.result is ready now.
          }
        }
      } else {
        // e.G[Expression]'shared_info$unit_sym is ready now.
        // e.G[Expression]'shared_info$null_sym is ready now.
        // e.G[Expression]'shared_info$native_sym is ready now.
        // e.G[Expression]'shared_info$error_sym is ready now.
        // e.G[Expression]'shared_info$no_method_sig is ready now.
        // e.G[Expression]'shared_info$no_class_contents is ready now.
        // e.expr_env is ready now.
        // e.expr_classtable is ready now.
        // e.expr_filename is ready now.
        // shared info for init is ready.
        // init.G[Expression]'shared_info$integer_sym
        // init.G[Expression]'shared_info$boolean_sym
        // init.G[Expression]'shared_info$string_sym
        // init.G[Expression]'shared_info$this_sym
        // init.G[Expression]'shared_info$unit_sym
        // init.G[Expression]'shared_info$null_sym
        // init.G[Expression]'shared_info$native_sym
        // init.G[Expression]'shared_info$error_sym
        // init.G[Expression]'shared_info$no_method_sig
        // init.G[Expression]'shared_info$no_class_contents
        a_expr_env.assign(v_init,a_expr_env.get(v_e));
        a_expr_classtable.assign(v_init,a_expr_classtable.get(v_e));
        a_expr_filename.assign(v_init,a_expr_filename.get(v_e));
        visit_7_1(v_init);
        // init.expr_type is ready now.
        // init.expr_errors is ready now.
        // shared info for body is ready.
        // body.G[Expression]'shared_info$integer_sym
        // body.G[Expression]'shared_info$boolean_sym
        // body.G[Expression]'shared_info$string_sym
        // body.G[Expression]'shared_info$this_sym
        // body.G[Expression]'shared_info$unit_sym
        // body.G[Expression]'shared_info$null_sym
        // body.G[Expression]'shared_info$native_sym
        // body.G[Expression]'shared_info$error_sym
        // body.G[Expression]'shared_info$no_method_sig
        // body.G[Expression]'shared_info$no_class_contents
        a_expr_classtable.assign(v_body,a_expr_classtable.get(v_e));
        a_expr_filename.assign(v_body,a_expr_filename.get(v_e));
        a28_new_env.assign(anchor,new M__basic_18[ T_Environment](t_Environment).v__op_ss(t_Environment.v_single(t_Entry.v_pair(v_s,v_ts)),a_expr_env.get(v_e)));
        a_expr_env.assign(v_body,a28_new_env.get(anchor));
        visit_7_1(v_body);
        // body.expr_type is ready now.
        a_expr_type.assign(v_e,a_expr_type.get(v_body));
        // body.expr_errors is ready now.
        a29_this_errors.assign(anchor,t_Errors.v_none());
        // place holder for error(...):596.G[error]'shared_info
        // place holder for error(...):596.msg
        // place holder for error(...):596.ln
        // place holder for error(...):596.filename
        // error(...):596.result is ready now.
        // place holder for class_is_undefined(...):600.G[class_is_undefined]'shared_info
        // place holder for class_is_undefined(...):600.G[class_is_undefined]'shared_info$native_sym
        // place holder for class_is_undefined(...):600.G[class_is_undefined]'shared_info$no_class_contents
        // place holder for class_is_undefined(...):600.ct
        // place holder for class_is_undefined(...):600.name
        // class_is_undefined(...):600.result is ready now.
        if (v_class_is_undefined(v_ts,a_expr_classtable.get(v_e))) {
          // place holder for error(...):604.G[error]'shared_info
          // place holder for error(...):604.msg
          // place holder for error(...):604.ln
          // place holder for error(...):604.filename
          // error(...):604.result is ready now.
          a30_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("Class ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_ts),new M__basic_18[ T_String](t_String).v__op_ss(" of let bound variable ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s)," is undefined."))))));
          a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a29_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_init),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a30_type_errors.get(anchor),a_expr_errors.get(v_body)))));
          // place holder for type_equal(...):605.G[type_equal]'shared_info
          // place holder for type_equal(...):605.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):605.t2
          // place holder for type_equal(...):605.t1
          // type_equal(...):605.result is ready now.
          // place holder for error(...):611.G[error]'shared_info
          // place holder for error(...):611.msg
          // place holder for error(...):611.ln
          // place holder for error(...):611.filename
          // error(...):611.result is ready now.
        } else {
          // place holder for error(...):604.G[error]'shared_info
          // place holder for error(...):604.msg
          // place holder for error(...):604.ln
          // place holder for error(...):604.filename
          // error(...):604.result is ready now.
          // place holder for type_equal(...):605.G[type_equal]'shared_info
          // place holder for type_equal(...):605.G[type_equal]'shared_info$error_sym
          // place holder for type_equal(...):605.t2
          // place holder for type_equal(...):605.t1
          // type_equal(...):605.result is ready now.
          if (v_not(v_type_equal(a_expr_type.get(v_init),v_ts))) {
            // place holder for error(...):611.G[error]'shared_info
            // place holder for error(...):611.msg
            // place holder for error(...):611.ln
            // place holder for error(...):611.filename
            // error(...):611.result is ready now.
            a30_type_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_init),new M__basic_18[ T_String](t_String).v__op_ss("Inferred type ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(a_expr_type.get(v_init)),new M__basic_18[ T_String](t_String).v__op_ss(" of initialization of ",new M__basic_18[ T_String](t_String).v__op_ss(t_Symbol.v_string(v_s),new M__basic_18[ T_String](t_String).v__op_ss(" does not conform to identifier's declared type ",t_Symbol.v_string(v_ts))))))));
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a29_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_init),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a30_type_errors.get(anchor),a_expr_errors.get(v_body)))));
          } else {
            a30_type_errors.assign(anchor,t_Errors.v_none());
            a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a29_this_errors.get(anchor),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_init),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a30_type_errors.get(anchor),a_expr_errors.get(v_body)))));
            // place holder for error(...):611.G[error]'shared_info
            // place holder for error(...):611.msg
            // place holder for error(...):611.ln
            // place holder for error(...):611.filename
            // error(...):611.result is ready now.
          }
        }
      }
    }
  }

  def visit_7_1_8(anchor : T_Expression) : Unit = anchor match {
    case p_add(v_e,v_e1,v_e2) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_integer_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // shared info for e2 is ready.
      // e2.G[Expression]'shared_info$integer_sym
      // e2.G[Expression]'shared_info$boolean_sym
      // e2.G[Expression]'shared_info$string_sym
      // e2.G[Expression]'shared_info$this_sym
      // e2.G[Expression]'shared_info$unit_sym
      // e2.G[Expression]'shared_info$null_sym
      // e2.G[Expression]'shared_info$native_sym
      // e2.G[Expression]'shared_info$error_sym
      // e2.G[Expression]'shared_info$no_method_sig
      // e2.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e2,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e2,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e2,a_expr_filename.get(v_e));
      visit_7_1(v_e2);
      // e2.expr_type is ready now.
      // e2.expr_errors is ready now.
      // place holder for check_arithmetic2(...):655.G[check_arithmetic2]'shared_info
      // place holder for check_arithmetic2(...):655.G[check_arithmetic2]'shared_info$integer_sym
      // place holder for check_arithmetic2(...):655.G[check_arithmetic2]'shared_info$error_sym
      // place holder for check_arithmetic2(...):655.op
      // place holder for check_arithmetic2(...):655.ty2
      // place holder for check_arithmetic2(...):655.n2
      // place holder for check_arithmetic2(...):655.ty1
      // place holder for check_arithmetic2(...):655.n1
      // place holder for check_arithmetic2(...):655.fnm
      // check_arithmetic2(...):655.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e2),v_check_arithmetic2(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e2),a_expr_type.get(v_e2),"'+'"))));
    }
  }

  def visit_7_1_9(anchor : T_Expression) : Unit = anchor match {
    case p_sub(v_e,v_e1,v_e2) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_integer_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // shared info for e2 is ready.
      // e2.G[Expression]'shared_info$integer_sym
      // e2.G[Expression]'shared_info$boolean_sym
      // e2.G[Expression]'shared_info$string_sym
      // e2.G[Expression]'shared_info$this_sym
      // e2.G[Expression]'shared_info$unit_sym
      // e2.G[Expression]'shared_info$null_sym
      // e2.G[Expression]'shared_info$native_sym
      // e2.G[Expression]'shared_info$error_sym
      // e2.G[Expression]'shared_info$no_method_sig
      // e2.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e2,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e2,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e2,a_expr_filename.get(v_e));
      visit_7_1(v_e2);
      // e2.expr_type is ready now.
      // e2.expr_errors is ready now.
      // place holder for check_arithmetic2(...):673.G[check_arithmetic2]'shared_info
      // place holder for check_arithmetic2(...):673.G[check_arithmetic2]'shared_info$integer_sym
      // place holder for check_arithmetic2(...):673.G[check_arithmetic2]'shared_info$error_sym
      // place holder for check_arithmetic2(...):673.op
      // place holder for check_arithmetic2(...):673.ty2
      // place holder for check_arithmetic2(...):673.n2
      // place holder for check_arithmetic2(...):673.ty1
      // place holder for check_arithmetic2(...):673.n1
      // place holder for check_arithmetic2(...):673.fnm
      // check_arithmetic2(...):673.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e2),v_check_arithmetic2(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e2),a_expr_type.get(v_e2),"'-'"))));
    }
  }

  def visit_7_1_10(anchor : T_Expression) : Unit = anchor match {
    case p_mul(v_e,v_e1,v_e2) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_integer_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // shared info for e2 is ready.
      // e2.G[Expression]'shared_info$integer_sym
      // e2.G[Expression]'shared_info$boolean_sym
      // e2.G[Expression]'shared_info$string_sym
      // e2.G[Expression]'shared_info$this_sym
      // e2.G[Expression]'shared_info$unit_sym
      // e2.G[Expression]'shared_info$null_sym
      // e2.G[Expression]'shared_info$native_sym
      // e2.G[Expression]'shared_info$error_sym
      // e2.G[Expression]'shared_info$no_method_sig
      // e2.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e2,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e2,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e2,a_expr_filename.get(v_e));
      visit_7_1(v_e2);
      // e2.expr_type is ready now.
      // e2.expr_errors is ready now.
      // place holder for check_arithmetic2(...):691.G[check_arithmetic2]'shared_info
      // place holder for check_arithmetic2(...):691.G[check_arithmetic2]'shared_info$integer_sym
      // place holder for check_arithmetic2(...):691.G[check_arithmetic2]'shared_info$error_sym
      // place holder for check_arithmetic2(...):691.op
      // place holder for check_arithmetic2(...):691.ty2
      // place holder for check_arithmetic2(...):691.n2
      // place holder for check_arithmetic2(...):691.ty1
      // place holder for check_arithmetic2(...):691.n1
      // place holder for check_arithmetic2(...):691.fnm
      // check_arithmetic2(...):691.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e2),v_check_arithmetic2(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e2),a_expr_type.get(v_e2),"'*'"))));
    }
  }

  def visit_7_1_11(anchor : T_Expression) : Unit = anchor match {
    case p_div(v_e,v_e1,v_e2) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_integer_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // shared info for e2 is ready.
      // e2.G[Expression]'shared_info$integer_sym
      // e2.G[Expression]'shared_info$boolean_sym
      // e2.G[Expression]'shared_info$string_sym
      // e2.G[Expression]'shared_info$this_sym
      // e2.G[Expression]'shared_info$unit_sym
      // e2.G[Expression]'shared_info$null_sym
      // e2.G[Expression]'shared_info$native_sym
      // e2.G[Expression]'shared_info$error_sym
      // e2.G[Expression]'shared_info$no_method_sig
      // e2.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e2,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e2,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e2,a_expr_filename.get(v_e));
      visit_7_1(v_e2);
      // e2.expr_type is ready now.
      // e2.expr_errors is ready now.
      // place holder for check_arithmetic2(...):709.G[check_arithmetic2]'shared_info
      // place holder for check_arithmetic2(...):709.G[check_arithmetic2]'shared_info$integer_sym
      // place holder for check_arithmetic2(...):709.G[check_arithmetic2]'shared_info$error_sym
      // place holder for check_arithmetic2(...):709.op
      // place holder for check_arithmetic2(...):709.ty2
      // place holder for check_arithmetic2(...):709.n2
      // place holder for check_arithmetic2(...):709.ty1
      // place holder for check_arithmetic2(...):709.n1
      // place holder for check_arithmetic2(...):709.fnm
      // check_arithmetic2(...):709.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e2),v_check_arithmetic2(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e2),a_expr_type.get(v_e2),"'/'"))));
    }
  }

  def visit_7_1_12(anchor : T_Expression) : Unit = anchor match {
    case p_neg(v_e,v_e1) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_integer_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // place holder for check_arithmetic(...):723.G[check_arithmetic]'shared_info
      // place holder for check_arithmetic(...):723.G[check_arithmetic]'shared_info$integer_sym
      // place holder for check_arithmetic(...):723.G[check_arithmetic]'shared_info$error_sym
      // place holder for check_arithmetic(...):723.operand
      // place holder for check_arithmetic(...):723.ty
      // place holder for check_arithmetic(...):723.n
      // place holder for check_arithmetic(...):723.fnm
      // check_arithmetic(...):723.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),v_check_arithmetic(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),"operand of unary '-'")));
    }
  }

  def visit_7_1_13(anchor : T_Expression) : Unit = anchor match {
    case p_lt(v_e,v_e1,v_e2) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_boolean_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // shared info for e2 is ready.
      // e2.G[Expression]'shared_info$integer_sym
      // e2.G[Expression]'shared_info$boolean_sym
      // e2.G[Expression]'shared_info$string_sym
      // e2.G[Expression]'shared_info$this_sym
      // e2.G[Expression]'shared_info$unit_sym
      // e2.G[Expression]'shared_info$null_sym
      // e2.G[Expression]'shared_info$native_sym
      // e2.G[Expression]'shared_info$error_sym
      // e2.G[Expression]'shared_info$no_method_sig
      // e2.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e2,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e2,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e2,a_expr_filename.get(v_e));
      visit_7_1(v_e2);
      // e2.expr_type is ready now.
      // e2.expr_errors is ready now.
      // place holder for check_arithmetic2(...):741.G[check_arithmetic2]'shared_info
      // place holder for check_arithmetic2(...):741.G[check_arithmetic2]'shared_info$integer_sym
      // place holder for check_arithmetic2(...):741.G[check_arithmetic2]'shared_info$error_sym
      // place holder for check_arithmetic2(...):741.op
      // place holder for check_arithmetic2(...):741.ty2
      // place holder for check_arithmetic2(...):741.n2
      // place holder for check_arithmetic2(...):741.ty1
      // place holder for check_arithmetic2(...):741.n1
      // place holder for check_arithmetic2(...):741.fnm
      // check_arithmetic2(...):741.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e2),v_check_arithmetic2(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e2),a_expr_type.get(v_e2),"'<'"))));
    }
  }

  def visit_7_1_14(anchor : T_Expression) : Unit = anchor match {
    case p_leq(v_e,v_e1,v_e2) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_boolean_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // shared info for e2 is ready.
      // e2.G[Expression]'shared_info$integer_sym
      // e2.G[Expression]'shared_info$boolean_sym
      // e2.G[Expression]'shared_info$string_sym
      // e2.G[Expression]'shared_info$this_sym
      // e2.G[Expression]'shared_info$unit_sym
      // e2.G[Expression]'shared_info$null_sym
      // e2.G[Expression]'shared_info$native_sym
      // e2.G[Expression]'shared_info$error_sym
      // e2.G[Expression]'shared_info$no_method_sig
      // e2.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e2,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e2,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e2,a_expr_filename.get(v_e));
      visit_7_1(v_e2);
      // e2.expr_type is ready now.
      // e2.expr_errors is ready now.
      // place holder for check_arithmetic2(...):759.G[check_arithmetic2]'shared_info
      // place holder for check_arithmetic2(...):759.G[check_arithmetic2]'shared_info$integer_sym
      // place holder for check_arithmetic2(...):759.G[check_arithmetic2]'shared_info$error_sym
      // place holder for check_arithmetic2(...):759.op
      // place holder for check_arithmetic2(...):759.ty2
      // place holder for check_arithmetic2(...):759.n2
      // place holder for check_arithmetic2(...):759.ty1
      // place holder for check_arithmetic2(...):759.n1
      // place holder for check_arithmetic2(...):759.fnm
      // check_arithmetic2(...):759.result is ready now.
      a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e2),v_check_arithmetic2(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e1),a_expr_type.get(v_e1),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e2),a_expr_type.get(v_e2),"'<='"))));
    }
  }

  def visit_7_1_15(anchor : T_Expression) : Unit = anchor match {
    case p_comp(v_e,v_e1) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_boolean_sym);
      // shared info for e1 is ready.
      // e1.G[Expression]'shared_info$integer_sym
      // e1.G[Expression]'shared_info$boolean_sym
      // e1.G[Expression]'shared_info$string_sym
      // e1.G[Expression]'shared_info$this_sym
      // e1.G[Expression]'shared_info$unit_sym
      // e1.G[Expression]'shared_info$null_sym
      // e1.G[Expression]'shared_info$native_sym
      // e1.G[Expression]'shared_info$error_sym
      // e1.G[Expression]'shared_info$no_method_sig
      // e1.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_e1,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_e1,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_e1,a_expr_filename.get(v_e));
      visit_7_1(v_e1);
      // e1.expr_type is ready now.
      // e1.expr_errors is ready now.
      // place holder for type_equal(...):772.G[type_equal]'shared_info
      // place holder for type_equal(...):772.G[type_equal]'shared_info$error_sym
      // place holder for type_equal(...):772.t2
      // place holder for type_equal(...):772.t1
      // type_equal(...):772.result is ready now.
      if (v_not(v_type_equal(a_expr_type.get(v_e1),v_boolean_sym))) {
        // place holder for error(...):774.G[error]'shared_info
        // place holder for error(...):774.msg
        // place holder for error(...):774.ln
        // place holder for error(...):774.filename
        // error(...):774.result is ready now.
        a31_local_errors.assign(anchor,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),"Operator of 'not' not Boolean"));
        a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),a31_local_errors.get(anchor)));
      } else {
        a31_local_errors.assign(anchor,t_Errors.v_none());
        a_expr_errors.assign(v_e,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_expr_errors.get(v_e1),a31_local_errors.get(anchor)));
        // place holder for error(...):774.G[error]'shared_info
        // place holder for error(...):774.msg
        // place holder for error(...):774.ln
        // place holder for error(...):774.filename
        // error(...):774.result is ready now.
      }
    }
  }

  def visit_7_1_16(anchor : T_Expression) : Unit = anchor match {
    case p_int_lit(v_e,v_0) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_integer_sym);
      a_expr_errors.assign(v_e,t_Errors.v_none());
    }
  }

  def visit_7_1_17(anchor : T_Expression) : Unit = anchor match {
    case p_bool_lit(v_e,v_0) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_boolean_sym);
      a_expr_errors.assign(v_e,t_Errors.v_none());
    }
  }

  def visit_7_1_18(anchor : T_Expression) : Unit = anchor match {
    case p_string_lit(v_e,v_0) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_string_sym);
      a_expr_errors.assign(v_e,t_Errors.v_none());
    }
  }

  def visit_7_1_19(anchor : T_Expression) : Unit = anchor match {
    case p_alloc(v_e,v_ts) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_ts);
      // place holder for class_is_undefined(...):807.G[class_is_undefined]'shared_info
      // place holder for class_is_undefined(...):807.G[class_is_undefined]'shared_info$native_sym
      // place holder for class_is_undefined(...):807.G[class_is_undefined]'shared_info$no_class_contents
      // place holder for class_is_undefined(...):807.ct
      // place holder for class_is_undefined(...):807.name
      // class_is_undefined(...):807.result is ready now.
      if (v_class_is_undefined(v_ts,a_expr_classtable.get(v_e))) {
        // place holder for error(...):810.G[error]'shared_info
        // place holder for error(...):810.msg
        // place holder for error(...):810.ln
        // place holder for error(...):810.filename
        // error(...):810.result is ready now.
        a_expr_errors.assign(v_e,v_error(a_expr_filename.get(v_e),new M__basic_24[ t_Result.T_Expression](t_Result.t_Expression).v_lineno(v_e),new M__basic_18[ T_String](t_String).v__op_ss("'new' used with undefined class ",t_Symbol.v_string(v_ts))));
      } else {
        a_expr_errors.assign(v_e,t_Errors.v_none());
        // place holder for error(...):810.G[error]'shared_info
        // place holder for error(...):810.msg
        // place holder for error(...):810.ln
        // place holder for error(...):810.filename
        // error(...):810.result is ready now.
      }
    }
  }

  def visit_7_1_20(anchor : T_Expression) : Unit = anchor match {
    case p_nil(v_e) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_null_sym);
      a_expr_errors.assign(v_e,t_Errors.v_none());
    }
  }

  def visit_7_1_21(anchor : T_Expression) : Unit = anchor match {
    case p_unit(v_e) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_unit_sym);
      a_expr_errors.assign(v_e,t_Errors.v_none());
    }
  }

  def visit_7_1_22(anchor : T_Expression) : Unit = anchor match {
    case p_no_expr(v_e) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_error_sym);
      a_expr_errors.assign(v_e,t_Errors.v_none());
    }
  }

  def visit_7_1_5(anchor : T_Expression) : Unit = anchor match {
    case p_typecase(v_e,v_expr,v_cases) => {
      // e.G[Expression]'shared_info is ready now.
      // e.G[Expression]'shared_info$integer_sym is ready now.
      // e.G[Expression]'shared_info$boolean_sym is ready now.
      // e.G[Expression]'shared_info$string_sym is ready now.
      // e.G[Expression]'shared_info$this_sym is ready now.
      // e.G[Expression]'shared_info$unit_sym is ready now.
      // e.G[Expression]'shared_info$null_sym is ready now.
      // e.G[Expression]'shared_info$native_sym is ready now.
      // e.G[Expression]'shared_info$error_sym is ready now.
      // e.G[Expression]'shared_info$no_method_sig is ready now.
      // e.G[Expression]'shared_info$no_class_contents is ready now.
      // e.expr_env is ready now.
      // e.expr_classtable is ready now.
      // e.expr_filename is ready now.
      a_expr_type.assign(v_e,v_error_sym);
      // shared info for expr is ready.
      // expr.G[Expression]'shared_info$integer_sym
      // expr.G[Expression]'shared_info$boolean_sym
      // expr.G[Expression]'shared_info$string_sym
      // expr.G[Expression]'shared_info$this_sym
      // expr.G[Expression]'shared_info$unit_sym
      // expr.G[Expression]'shared_info$null_sym
      // expr.G[Expression]'shared_info$native_sym
      // expr.G[Expression]'shared_info$error_sym
      // expr.G[Expression]'shared_info$no_method_sig
      // expr.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_expr,a_expr_env.get(v_e));
      a_expr_classtable.assign(v_expr,a_expr_classtable.get(v_e));
      a_expr_filename.assign(v_expr,a_expr_filename.get(v_e));
      visit_7_1(v_expr);
      // expr.expr_type is ready now.
      // expr.expr_errors is ready now.
      a_expr_errors.assign(v_e,a_expr_errors.get(v_expr));
      // shared info for cases is ready.
      // cases.G[Cases]'shared_info$integer_sym
      // cases.G[Cases]'shared_info$boolean_sym
      // cases.G[Cases]'shared_info$string_sym
      // cases.G[Cases]'shared_info$this_sym
      // cases.G[Cases]'shared_info$unit_sym
      // cases.G[Cases]'shared_info$null_sym
      // cases.G[Cases]'shared_info$native_sym
      // cases.G[Cases]'shared_info$error_sym
      // cases.G[Cases]'shared_info$no_method_sig
      // cases.G[Cases]'shared_info$no_class_contents
    }
  }


  def visit_8_1(node : T_Expressions) : Unit = node match {
    case t_Expressions.p_append(_,_,_) => visit_8_1_0(node);
    case t_Expressions.p_single(_,_) => visit_8_1_1(node);
    case t_Expressions.p_none(_) => visit_8_1_2(node);
  };
  def visit_8_1_0(anchor : T_Expressions) : Unit = anchor match {
    case t_Expressions.p_append(v_es,v_es1,v_es2) => {
      // es.G[Expressions]'shared_info is ready now.
      // es.G[Expressions]'shared_info$integer_sym is ready now.
      // es.G[Expressions]'shared_info$boolean_sym is ready now.
      // es.G[Expressions]'shared_info$string_sym is ready now.
      // es.G[Expressions]'shared_info$this_sym is ready now.
      // es.G[Expressions]'shared_info$unit_sym is ready now.
      // es.G[Expressions]'shared_info$null_sym is ready now.
      // es.G[Expressions]'shared_info$native_sym is ready now.
      // es.G[Expressions]'shared_info$error_sym is ready now.
      // es.G[Expressions]'shared_info$no_method_sig is ready now.
      // es.G[Expressions]'shared_info$no_class_contents is ready now.
      // es.exprs_env is ready now.
      // es.exprs_classtable is ready now.
      // es.exprs_filename is ready now.
      // shared info for es1 is ready.
      // es1.G[Expressions]'shared_info$integer_sym
      // es1.G[Expressions]'shared_info$boolean_sym
      // es1.G[Expressions]'shared_info$string_sym
      // es1.G[Expressions]'shared_info$this_sym
      // es1.G[Expressions]'shared_info$unit_sym
      // es1.G[Expressions]'shared_info$null_sym
      // es1.G[Expressions]'shared_info$native_sym
      // es1.G[Expressions]'shared_info$error_sym
      // es1.G[Expressions]'shared_info$no_method_sig
      // es1.G[Expressions]'shared_info$no_class_contents
      a_exprs_env.assign(v_es1,a_exprs_env.get(v_es));
      a_exprs_classtable.assign(v_es1,a_exprs_classtable.get(v_es));
      a_exprs_filename.assign(v_es1,a_exprs_filename.get(v_es));
      visit_8_1(v_es1);
      // es1.exprs_types is ready now.
      // es1.exprs_errors is ready now.
      // shared info for es2 is ready.
      // es2.G[Expressions]'shared_info$integer_sym
      // es2.G[Expressions]'shared_info$boolean_sym
      // es2.G[Expressions]'shared_info$string_sym
      // es2.G[Expressions]'shared_info$this_sym
      // es2.G[Expressions]'shared_info$unit_sym
      // es2.G[Expressions]'shared_info$null_sym
      // es2.G[Expressions]'shared_info$native_sym
      // es2.G[Expressions]'shared_info$error_sym
      // es2.G[Expressions]'shared_info$no_method_sig
      // es2.G[Expressions]'shared_info$no_class_contents
      a_exprs_env.assign(v_es2,a_exprs_env.get(v_es));
      a_exprs_classtable.assign(v_es2,a_exprs_classtable.get(v_es));
      a_exprs_filename.assign(v_es2,a_exprs_filename.get(v_es));
      visit_8_1(v_es2);
      // es2.exprs_types is ready now.
      a_exprs_types.assign(v_es,new M__basic_18[ T_CoolTypes](t_CoolTypes).v__op_ss(a_exprs_types.get(v_es1),a_exprs_types.get(v_es2)));
      // es2.exprs_errors is ready now.
      a_exprs_errors.assign(v_es,new M__basic_18[ T_Errors](t_Errors).v__op_ss(a_exprs_errors.get(v_es1),a_exprs_errors.get(v_es2)));
    }
  }

  def visit_8_1_1(anchor : T_Expressions) : Unit = anchor match {
    case t_Expressions.p_single(v_es,v_a) => {
      // es.G[Expressions]'shared_info is ready now.
      // es.G[Expressions]'shared_info$integer_sym is ready now.
      // es.G[Expressions]'shared_info$boolean_sym is ready now.
      // es.G[Expressions]'shared_info$string_sym is ready now.
      // es.G[Expressions]'shared_info$this_sym is ready now.
      // es.G[Expressions]'shared_info$unit_sym is ready now.
      // es.G[Expressions]'shared_info$null_sym is ready now.
      // es.G[Expressions]'shared_info$native_sym is ready now.
      // es.G[Expressions]'shared_info$error_sym is ready now.
      // es.G[Expressions]'shared_info$no_method_sig is ready now.
      // es.G[Expressions]'shared_info$no_class_contents is ready now.
      // es.exprs_env is ready now.
      // es.exprs_classtable is ready now.
      // es.exprs_filename is ready now.
      // shared info for a is ready.
      // a.G[Expression]'shared_info$integer_sym
      // a.G[Expression]'shared_info$boolean_sym
      // a.G[Expression]'shared_info$string_sym
      // a.G[Expression]'shared_info$this_sym
      // a.G[Expression]'shared_info$unit_sym
      // a.G[Expression]'shared_info$null_sym
      // a.G[Expression]'shared_info$native_sym
      // a.G[Expression]'shared_info$error_sym
      // a.G[Expression]'shared_info$no_method_sig
      // a.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_a,a_exprs_env.get(v_es));
      a_expr_classtable.assign(v_a,a_exprs_classtable.get(v_es));
      a_expr_filename.assign(v_a,a_exprs_filename.get(v_es));
      visit_7_1(v_a);
      // a.expr_type is ready now.
      a_exprs_types.assign(v_es,t_CoolTypes.v_single(a_expr_type.get(v_a)));
      // a.expr_errors is ready now.
      a_exprs_errors.assign(v_es,a_expr_errors.get(v_a));
    }
  }

  def visit_8_1_2(anchor : T_Expressions) : Unit = anchor match {
    case t_Expressions.p_none(v_es) => {
      // es.G[Expressions]'shared_info is ready now.
      // es.G[Expressions]'shared_info$integer_sym is ready now.
      // es.G[Expressions]'shared_info$boolean_sym is ready now.
      // es.G[Expressions]'shared_info$string_sym is ready now.
      // es.G[Expressions]'shared_info$this_sym is ready now.
      // es.G[Expressions]'shared_info$unit_sym is ready now.
      // es.G[Expressions]'shared_info$null_sym is ready now.
      // es.G[Expressions]'shared_info$native_sym is ready now.
      // es.G[Expressions]'shared_info$error_sym is ready now.
      // es.G[Expressions]'shared_info$no_method_sig is ready now.
      // es.G[Expressions]'shared_info$no_class_contents is ready now.
      // es.exprs_env is ready now.
      // es.exprs_classtable is ready now.
      // es.exprs_filename is ready now.
      a_exprs_types.assign(v_es,t_CoolTypes.v_none());
      a_exprs_errors.assign(v_es,t_Errors.v_none());
    }
  }


  def visit_9_1(node : T_Case) : Unit = node match {
    case p_branch(_,_,_,_) => visit_9_1_0(node);
  };
  def visit_9_1_0(anchor : T_Case) : Unit = anchor match {
    case p_branch(v_c,v_s,v_ts,v_body) => {
      // c.G[Case]'shared_info is ready now.
      // c.G[Case]'shared_info$integer_sym is ready now.
      // c.G[Case]'shared_info$boolean_sym is ready now.
      // c.G[Case]'shared_info$string_sym is ready now.
      // c.G[Case]'shared_info$this_sym is ready now.
      // c.G[Case]'shared_info$unit_sym is ready now.
      // c.G[Case]'shared_info$null_sym is ready now.
      // c.G[Case]'shared_info$native_sym is ready now.
      // c.G[Case]'shared_info$error_sym is ready now.
      // c.G[Case]'shared_info$no_method_sig is ready now.
      // c.G[Case]'shared_info$no_class_contents is ready now.
      // shared info for body is ready.
      // body.G[Expression]'shared_info$integer_sym
      // body.G[Expression]'shared_info$boolean_sym
      // body.G[Expression]'shared_info$string_sym
      // body.G[Expression]'shared_info$this_sym
      // body.G[Expression]'shared_info$unit_sym
      // body.G[Expression]'shared_info$null_sym
      // body.G[Expression]'shared_info$native_sym
      // body.G[Expression]'shared_info$error_sym
      // body.G[Expression]'shared_info$no_method_sig
      // body.G[Expression]'shared_info$no_class_contents
      a_expr_env.assign(v_body,t_Environment.v_none());
      a_expr_classtable.assign(v_body,t_ClassTable.v_none());
      a_expr_filename.assign(v_body,"who nows?");
      visit_7_1(v_body);
      // body.expr_type is ready now.
      // body.expr_errors is ready now.
    }
  }


  def visit_10_1(node : T_Cases) : Unit = node match {
    case t_Cases.p_append(_,_,_) => visit_10_1_0(node);
    case t_Cases.p_single(_,_) => visit_10_1_1(node);
    case t_Cases.p_none(_) => visit_10_1_2(node);
  };
  def visit_10_1_0(anchor : T_Cases) : Unit = anchor match {
    case t_Cases.p_append(v_cs,v_cs1,v_cs2) => {
      // cs.G[Cases]'shared_info is ready now.
      // cs.G[Cases]'shared_info$integer_sym is ready now.
      // cs.G[Cases]'shared_info$boolean_sym is ready now.
      // cs.G[Cases]'shared_info$string_sym is ready now.
      // cs.G[Cases]'shared_info$this_sym is ready now.
      // cs.G[Cases]'shared_info$unit_sym is ready now.
      // cs.G[Cases]'shared_info$null_sym is ready now.
      // cs.G[Cases]'shared_info$native_sym is ready now.
      // cs.G[Cases]'shared_info$error_sym is ready now.
      // cs.G[Cases]'shared_info$no_method_sig is ready now.
      // cs.G[Cases]'shared_info$no_class_contents is ready now.
      // shared info for cs1 is ready.
      // cs1.G[Cases]'shared_info$integer_sym
      // cs1.G[Cases]'shared_info$boolean_sym
      // cs1.G[Cases]'shared_info$string_sym
      // cs1.G[Cases]'shared_info$this_sym
      // cs1.G[Cases]'shared_info$unit_sym
      // cs1.G[Cases]'shared_info$null_sym
      // cs1.G[Cases]'shared_info$native_sym
      // cs1.G[Cases]'shared_info$error_sym
      // cs1.G[Cases]'shared_info$no_method_sig
      // cs1.G[Cases]'shared_info$no_class_contents
      // shared info for cs2 is ready.
      // cs2.G[Cases]'shared_info$integer_sym
      // cs2.G[Cases]'shared_info$boolean_sym
      // cs2.G[Cases]'shared_info$string_sym
      // cs2.G[Cases]'shared_info$this_sym
      // cs2.G[Cases]'shared_info$unit_sym
      // cs2.G[Cases]'shared_info$null_sym
      // cs2.G[Cases]'shared_info$native_sym
      // cs2.G[Cases]'shared_info$error_sym
      // cs2.G[Cases]'shared_info$no_method_sig
      // cs2.G[Cases]'shared_info$no_class_contents
    }
  }

  def visit_10_1_1(anchor : T_Cases) : Unit = anchor match {
    case t_Cases.p_single(v_cs,v_c) => {
      // cs.G[Cases]'shared_info is ready now.
      // cs.G[Cases]'shared_info$integer_sym is ready now.
      // cs.G[Cases]'shared_info$boolean_sym is ready now.
      // cs.G[Cases]'shared_info$string_sym is ready now.
      // cs.G[Cases]'shared_info$this_sym is ready now.
      // cs.G[Cases]'shared_info$unit_sym is ready now.
      // cs.G[Cases]'shared_info$null_sym is ready now.
      // cs.G[Cases]'shared_info$native_sym is ready now.
      // cs.G[Cases]'shared_info$error_sym is ready now.
      // cs.G[Cases]'shared_info$no_method_sig is ready now.
      // cs.G[Cases]'shared_info$no_class_contents is ready now.
      // shared info for c is ready.
      // c.G[Case]'shared_info$integer_sym
      // c.G[Case]'shared_info$boolean_sym
      // c.G[Case]'shared_info$string_sym
      // c.G[Case]'shared_info$this_sym
      // c.G[Case]'shared_info$unit_sym
      // c.G[Case]'shared_info$null_sym
      // c.G[Case]'shared_info$native_sym
      // c.G[Case]'shared_info$error_sym
      // c.G[Case]'shared_info$no_method_sig
      // c.G[Case]'shared_info$no_class_contents
    }
  }

  def visit_10_1_2(anchor : T_Cases) : Unit = anchor match {
    case t_Cases.p_none(v_cs) => {
      // cs.G[Cases]'shared_info is ready now.
      // cs.G[Cases]'shared_info$integer_sym is ready now.
      // cs.G[Cases]'shared_info$boolean_sym is ready now.
      // cs.G[Cases]'shared_info$string_sym is ready now.
      // cs.G[Cases]'shared_info$this_sym is ready now.
      // cs.G[Cases]'shared_info$unit_sym is ready now.
      // cs.G[Cases]'shared_info$null_sym is ready now.
      // cs.G[Cases]'shared_info$native_sym is ready now.
      // cs.G[Cases]'shared_info$error_sym is ready now.
      // cs.G[Cases]'shared_info$no_method_sig is ready now.
      // cs.G[Cases]'shared_info$no_class_contents is ready now.
    }
  }


  def visit() : Unit = {
    val roots = t_Program.nodes;
    // shared info for SEMANT is ready.
    // v_any_sym is initialized in module.
    // v_integer_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$integer_sym
    // v_boolean_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$boolean_sym
    // v_string_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$string_sym
    // v_this_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$this_sym
    // v_main_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$main_sym
    // v_unit_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$unit_sym
    // v_null_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$null_sym
    // v_native_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$native_sym
    // v_error_sym is initialized in module.
    // SEMANT.G[Program]'shared_info$error_sym
    // v_no_method_sig is initialized in module.
    // SEMANT.G[Program]'shared_info$no_method_sig
    // v_fake_method_entry is initialized in module.
    // v_no_class_contents is initialized in module.
    // SEMANT.G[Program]'shared_info$no_class_contents
    for (root <- roots) {
      visit_0_1(root);
    }
    // SEMANT.program_errors is ready now.
  }

  override def finish() : Unit = {
    visit();
    t_Errors.finish();
    t_MethodSig.finish();
    t_MethodEntry.finish();
    t_MethodTable.finish();
    t_AttrEntry.finish();
    t_AttrTable.finish();
    t_ClassContents.finish();
    t_ClassEntry.finish();
    t_ClassTable.finish();
super.finish();
  }

}

