// Generated by aps2scala version 0.3.6
import basic_implicit._;
object test_canonicals_implicit {
  val test_canonicals_loaded = true;
type T_EXT[T_T] = T_T;
  val t_G0 = new M_GEN[T_String]("G0",t_String)
	with C_PHYLUM[T_String]
	with C_GEN[T_String,T_String];
  type T_G0 = /*TI*/T_GEN[T_String];
  val t_E0 = new M_EXT[T_String]("E0",t_String)
	with C_BASIC[T_String]
	with C_PRINTABLE[T_String]
	with C_ORDERED[T_String]
	with C_ORDERED_COLLECTION[T_String,T_Character]
	with C_CONCATENATING[T_String]
	with C_PHYLUM[T_String]
	with C_LIST[T_String,T_Character]
	with C_EXT[T_String,T_String]
	with C_STRING[T_String];
  type T_E0 = /*TI*/T_EXT[T_String];
  type T_G0A = t_G0.T_A;
  val t_G0A = t_G0.t_A;
  type T_G0B = t_G0.T_B;
  val t_G0B = t_G0.t_B;
  type T_G0C = t_G0.T_C;
  val t_G0C = t_G0.t_C;
  type T_G0D = t_G0.T_D;
  val t_G0D = t_G0.t_D;
  type T_E0A = t_E0.T_A;
  val t_E0A = t_E0.t_A;
  type T_E0B = t_E0.T_B;
  val t_E0B = t_E0.t_B;
  type T_E0C = t_E0.T_C;
  val t_E0C = t_E0.t_C;
  type T_E0D = t_E0.T_D;
  val t_E0D = t_E0.t_D;
  type T_G0E = t_G0.T_E;
  val t_G0E = t_G0.t_E;
  type T_G0F = t_G0.T_F;
  val t_G0F = t_G0.t_F;
  type T_G0G = t_G0.T_G;
  val t_G0G = t_G0.t_G;
  type T_G0H = t_G0.T_H;
  val t_G0H = t_G0.t_H;
  type T_E0E = t_E0.T_E;
  val t_E0E = t_E0.t_E;
  type T_E0F = t_E0.T_F;
  val t_E0F = t_E0.t_F;
  type T_E0G = t_E0.T_G;
  val t_E0G = t_E0.t_G;
  type T_E0H = t_E0.T_H;
  val t_E0H = t_E0.t_H;
  type T_G0E2 = t_G0.T_E2;
  val t_G0E2 = t_G0.t_E2;
  type T_G0F2 = t_G0.T_F2;
  val t_G0F2 = t_G0.t_F2;
  type T_G0G2 = t_G0.T_G2;
  val t_G0G2 = t_G0.t_G2;
  type T_G0H2 = t_G0.T_H2;
  val t_G0H2 = t_G0.t_H2;
  type T_E0E2 = t_E0.T_E2;
  val t_E0E2 = t_E0.t_E2;
  type T_E0F2 = t_E0.T_F2;
  val t_E0F2 = t_E0.t_F2;
  type T_E0G2 = t_E0.T_G2;
  val t_E0G2 = t_E0.t_G2;
  type T_E0H2 = t_E0.T_H2;
  val t_E0H2 = t_E0.t_H2;
  type T_G0I2 = t_G0.T_I2;
  val t_G0I2 = t_G0.t_I2;
  type T_G0J2 = t_G0.T_J2;
  val t_G0J2 = t_G0.t_J2;
  type T_G0K2 = t_G0.T_K2;
  val t_G0K2 = t_G0.t_K2;
  type T_G0L2 = t_G0.T_L2;
  val t_G0L2 = t_G0.t_L2;
  type T_E0I2 = t_E0.T_I2;
  val t_E0I2 = t_E0.t_I2;
  type T_E0J2 = t_E0.T_J2;
  val t_E0J2 = t_E0.t_J2;
  type T_E0K2 = t_E0.T_K2;
  val t_E0K2 = t_E0.t_K2;
  type T_E0L2 = t_E0.T_L2;
  val t_E0L2 = t_E0.t_L2;
  type T_G0M2 = t_G0.T_M2;
  val t_G0M2 = t_G0.t_M2;
  type T_G0N2 = t_G0.T_N2;
  val t_G0N2 = t_G0.t_N2;
  type T_G0O2 = t_G0.T_O2;
  val t_G0O2 = t_G0.t_O2;
  type T_G0P2 = t_G0.T_P2;
  val t_G0P2 = t_G0.t_P2;
  type T_E0M2 = t_E0.T_M2;
  val t_E0M2 = t_E0.t_M2;
  type T_E0N2 = t_E0.T_N2;
  val t_E0N2 = t_E0.t_N2;
  type T_E0O2 = t_E0.T_O2;
  val t_E0O2 = t_E0.t_O2;
  type T_E0P2 = t_E0.T_P2;
  val t_E0P2 = t_E0.t_P2;
  type T_G0M2M2 = t_G0.t_M2.T_M2;
  val t_G0M2M2 = t_G0.t_M2.t_M2;
  type T_G0N2N2 = t_G0.t_N2.T_N2;
  val t_G0N2N2 = t_G0.t_N2.t_N2;
  type T_G0O2O2 = t_G0.t_O2.T_O2;
  val t_G0O2O2 = t_G0.t_O2.t_O2;
  type T_G0P2P2 = t_G0.t_P2.T_P2;
  val t_G0P2P2 = t_G0.t_P2.t_P2;
  type T_E0M2M2 = t_E0.t_M2.T_M2;
  val t_E0M2M2 = t_E0.t_M2.t_M2;
  type T_E0N2N2 = t_E0.t_N2.T_N2;
  val t_E0N2N2 = t_E0.t_N2.t_N2;
  type T_E0O2O2 = t_E0.t_O2.T_O2;
  val t_E0O2O2 = t_E0.t_O2.t_O2;
  type T_E0P2P2 = t_E0.t_P2.T_P2;
  val t_E0P2P2 = t_E0.t_P2.t_P2;
  type T_G0I2I2 = t_G0.t_I2.T_I2;
  val t_G0I2I2 = t_G0.t_I2.t_I2;
  type T_G0J2J2 = t_G0.t_J2.T_J2;
  val t_G0J2J2 = t_G0.t_J2.t_J2;
  type T_G0K2K2 = t_G0.t_K2.T_K2;
  val t_G0K2K2 = t_G0.t_K2.t_K2;
  type T_G0L2L2 = t_G0.t_L2.T_L2;
  val t_G0L2L2 = t_G0.t_L2.t_L2;
  type T_E0I2I2 = t_E0.t_I2.T_I2;
  val t_E0I2I2 = t_E0.t_I2.t_I2;
  type T_E0J2J2 = t_E0.t_J2.T_J2;
  val t_E0J2J2 = t_E0.t_J2.t_J2;
  type T_E0K2K2 = t_E0.t_K2.T_K2;
  val t_E0K2K2 = t_E0.t_K2.t_K2;
  type T_E0L2L2 = t_E0.t_L2.T_L2;
  val t_E0L2L2 = t_E0.t_L2.t_L2;
  type T_G0FT1 = t_G0.T_FT1;
  val t_G0FT1 = t_G0.t_FT1;
  type T_G0FT2 = t_G0.T_FT2;
  val t_G0FT2 = t_G0.t_FT2;
  type T_G0FT3 = t_G0.T_FT3;
  val t_G0FT3 = t_G0.t_FT3;
  type T_G0FT4 = t_G0.T_FT4;
  val t_G0FT4 = t_G0.t_FT4;
  type T_G0FT5 = t_G0.T_FT5;
  val t_G0FT5 = t_G0.t_FT5;
  type T_G0FT6 = t_G0.T_FT6;
  val t_G0FT6 = t_G0.t_FT6;
  type T_G0FT7 = t_G0.T_FT7;
  val t_G0FT7 = t_G0.t_FT7;
  type T_G0FT8 = t_G0.T_FT8;
  val t_G0FT8 = t_G0.t_FT8;
  type T_E0FT1 = t_E0.T_FT1;
  val t_E0FT1 = t_E0.t_FT1;
  type T_E0FT2 = t_E0.T_FT2;
  val t_E0FT2 = t_E0.t_FT2;
  type T_E0FT3 = t_E0.T_FT3;
  val t_E0FT3 = t_E0.t_FT3;
  type T_E0FT4 = t_E0.T_FT4;
  val t_E0FT4 = t_E0.t_FT4;
  type T_E0FT5 = t_E0.T_FT5;
  val t_E0FT5 = t_E0.t_FT5;
  type T_E0FT6 = t_E0.T_FT6;
  val t_E0FT6 = t_E0.t_FT6;
  type T_E0FT7 = t_E0.T_FT7;
  val t_E0FT7 = t_E0.t_FT7;
  type T_E0FT8 = t_E0.T_FT8;
  val t_E0FT8 = t_E0.t_FT8;
}
import test_canonicals_implicit._;

trait C_GEN[T_Result, T_T] extends C_TYPE[T_Result] {
  type T_Misc0;
  val t_Misc0 : C_TYPE[T_Misc0]with C_INTEGER[T_Misc0];
  type T_Misc1;
  val t_Misc1 : C_TYPE[T_Misc1]with C_IEEE[T_Misc1];
  type T_Misc2;
  val t_Misc2 : C_TYPE[T_Misc2]with C_STRING[T_Misc2];
  type T_Misc3;
  val t_Misc3 : C_TYPE[T_Misc3]with C_LIST[T_Misc3,T_Integer];
  type T_Misc4;
  val t_Misc4 : C_TYPE[T_Misc4]with C_MAKE_LATTICE[T_Misc4,T_Boolean];
  type T_Misc5;
  val t_Misc5 : C_TYPE[T_Misc5]with C_MAX_LATTICE[T_Misc5,T_Integer];
  type T_Misc6;
  val t_Misc6 : C_TYPE[T_Misc6]with C_IEEE[T_Misc6];
  type T_Misc7;
  val t_Misc7 : C_TYPE[T_Misc7]with C_IEEE[T_Misc7];
  type T_A;
  val t_A : C_TYPE[T_A] with C_BASIC[T_A];
  type T_B;
  val t_B : C_TYPE[T_B]with C_INTEGER[T_B];
  type T_C;
  val t_C : C_TYPE[T_C];
  type T_D;
  val t_D : C_TYPE[T_D];
  type T_E;
  val t_E : C_TYPE[T_E] with C_BASIC[T_E];
  type T_F;
  val t_F : C_TYPE[T_F]with C_INTEGER[T_F];
  type T_G;
  val t_G : C_TYPE[T_G];
  type T_H;
  val t_H : C_TYPE[T_H];
  type T_E2;
  val t_E2 : C_TYPE[T_E2] with C_BASIC[T_E2];
  type T_F2;
  val t_F2 : C_TYPE[T_F2]with C_INTEGER[T_F2];
  type T_G2;
  val t_G2 : C_TYPE[T_G2];
  type T_H2;
  val t_H2 : C_TYPE[T_H2];
  type T_I;
  val t_I : C_TYPE[T_I]with C_GEN[T_I,T_A];
  type T_J;
  val t_J : C_TYPE[T_J]with C_GEN[T_J,T_B];
  type T_K;
  val t_K : C_TYPE[T_K]with C_GEN[T_K,T_C];
  type T_L;
  val t_L : C_TYPE[T_L]with C_GEN[T_L,T_D];
  type T_I1;
  val t_I1 : C_TYPE[T_I1]with C_GEN[T_I1,T_E];
  type T_J1;
  val t_J1 : C_TYPE[T_J1]with C_GEN[T_J1,T_F];
  type T_K1;
  val t_K1 : C_TYPE[T_K1]with C_GEN[T_K1,T_G];
  type T_L1;
  val t_L1 : C_TYPE[T_L1]with C_GEN[T_L1,T_H];
  type T_I2;
  val t_I2 : C_TYPE[T_I2]with C_GEN[T_I2,T_E2];
  type T_J2;
  val t_J2 : C_TYPE[T_J2]with C_GEN[T_J2,T_F2];
  type T_K2;
  val t_K2 : C_TYPE[T_K2]with C_GEN[T_K2,T_G2];
  type T_L2;
  val t_L2 : C_TYPE[T_L2]with C_GEN[T_L2,T_H2];
  type T_M;
  val t_M : C_TYPE[T_M]with C_EXT[T_M,T_A];
  type T_N;
  val t_N : C_TYPE[T_N]with C_EXT[T_N,T_B];
  type T_O;
  val t_O : C_TYPE[T_O]with C_EXT[T_O,T_C];
  type T_P;
  val t_P : C_TYPE[T_P]with C_EXT[T_P,T_D];
  type T_M1;
  val t_M1 : C_TYPE[T_M1]with C_EXT[T_M1,T_E];
  type T_N1;
  val t_N1 : C_TYPE[T_N1]with C_EXT[T_N1,T_F];
  type T_O1;
  val t_O1 : C_TYPE[T_O1]with C_EXT[T_O1,T_G];
  type T_P1;
  val t_P1 : C_TYPE[T_P1]with C_EXT[T_P1,T_H];
  type T_M2;
  val t_M2 : C_TYPE[T_M2]with C_EXT[T_M2,T_E2];
  type T_N2;
  val t_N2 : C_TYPE[T_N2]with C_EXT[T_N2,T_F2];
  type T_O2;
  val t_O2 : C_TYPE[T_O2]with C_EXT[T_O2,T_G2];
  type T_P2;
  val t_P2 : C_TYPE[T_P2]with C_EXT[T_P2,T_H2];
  type T_Q;
  val t_Q : C_TYPE[T_Q]with C_GEN[T_Q,T_T];
  type T_R;
  val t_R : C_TYPE[T_R]with C_EXT[T_R,T_T];
  type T_QA;
  val t_QA : C_TYPE[T_QA] with C_BASIC[T_QA];
  type T_QB;
  val t_QB : C_TYPE[T_QB]with C_INTEGER[T_QB];
  type T_QC;
  val t_QC : C_TYPE[T_QC];
  type T_QD;
  val t_QD : C_TYPE[T_QD];
  type T_RA;
  val t_RA : C_TYPE[T_RA] with C_BASIC[T_RA];
  type T_RB;
  val t_RB : C_TYPE[T_RB]with C_INTEGER[T_RB];
  type T_RC;
  val t_RC : C_TYPE[T_RC];
  type T_RD;
  val t_RD : C_TYPE[T_RD] with C_BASIC[T_RD];
  type T_QE2;
  val t_QE2 : C_TYPE[T_QE2] with C_BASIC[T_QE2];
  type T_QF2;
  val t_QF2 : C_TYPE[T_QF2]with C_INTEGER[T_QF2];
  type T_QG2;
  val t_QG2 : C_TYPE[T_QG2];
  type T_QH2;
  val t_QH2 : C_TYPE[T_QH2];
  type T_RE2;
  val t_RE2 : C_TYPE[T_RE2] with C_BASIC[T_RE2];
  type T_RF2;
  val t_RF2 : C_TYPE[T_RF2]with C_INTEGER[T_RF2];
  type T_RG2;
  val t_RG2 : C_TYPE[T_RG2];
  type T_RH2;
  val t_RH2 : C_TYPE[T_RH2] with C_BASIC[T_RH2];
  type T_QI2;
  val t_QI2 : C_TYPE[T_QI2]with C_GEN[T_QI2,T_E2];
  type T_QJ2;
  val t_QJ2 : C_TYPE[T_QJ2]with C_GEN[T_QJ2,T_F2];
  type T_QK2;
  val t_QK2 : C_TYPE[T_QK2]with C_GEN[T_QK2,T_G2];
  type T_QL2;
  val t_QL2 : C_TYPE[T_QL2]with C_GEN[T_QL2,T_H2];
  type T_RI2;
  val t_RI2 : C_TYPE[T_RI2]with C_GEN[T_RI2,T_E2];
  type T_RJ2;
  val t_RJ2 : C_TYPE[T_RJ2]with C_GEN[T_RJ2,T_F2];
  type T_RK2;
  val t_RK2 : C_TYPE[T_RK2]with C_GEN[T_RK2,T_G2];
  type T_RL2;
  val t_RL2 : C_TYPE[T_RL2]with C_GEN[T_RL2,T_H2];
  type T_QM2;
  val t_QM2 : C_TYPE[T_QM2]with C_EXT[T_QM2,T_E2];
  type T_QN2;
  val t_QN2 : C_TYPE[T_QN2]with C_EXT[T_QN2,T_F2];
  type T_QO2;
  val t_QO2 : C_TYPE[T_QO2]with C_EXT[T_QO2,T_G2];
  type T_QP2;
  val t_QP2 : C_TYPE[T_QP2]with C_EXT[T_QP2,T_H2];
  type T_RM2;
  val t_RM2 : C_TYPE[T_RM2]with C_EXT[T_RM2,T_E2];
  type T_RN2;
  val t_RN2 : C_TYPE[T_RN2]with C_EXT[T_RN2,T_F2];
  type T_RO2;
  val t_RO2 : C_TYPE[T_RO2]with C_EXT[T_RO2,T_G2];
  type T_RP2;
  val t_RP2 : C_TYPE[T_RP2]with C_EXT[T_RP2,T_H2];
  type T_FT1;
  val t_FT1 : C_TYPE[T_FT1];
  type T_FT2;
  val t_FT2 : C_TYPE[T_FT2];
  type T_FT3;
  val t_FT3 : C_TYPE[T_FT3];
  type T_FT4;
  val t_FT4 : C_TYPE[T_FT4];
  type T_FT5;
  val t_FT5 : C_TYPE[T_FT5];
  type T_FT6;
  val t_FT6 : C_TYPE[T_FT6];
  type T_FT7;
  val t_FT7 : C_TYPE[T_FT7];
  type T_FT8;
  val t_FT8 : C_TYPE[T_FT8];
}

abstract class T_GEN[T_T](t : C_GEN[T_GEN[T_T],T_T]) extends Value(t) { }

class M_GEN[T_T](name : String,val t_T : C_TYPE[T_T] with C_BASIC[T_T])
  extends I_TYPE[T_GEN[T_T]](name)
  with C_GEN[T_GEN[T_T],T_T]
{
  val t_Result : this.type = this;
  type T_Misc0 = T_Integer;
  val t_Misc0 = t_Integer;
  type T_Misc1 = T_Real;
  val t_Misc1 = t_Real;
  type T_Misc2 = T_String;
  val t_Misc2 = t_String;
  type T_Misc3 = T_Range;
  val t_Misc3 = t_Range;
  type T_Misc4 = T_OrLattice;
  val t_Misc4 = t_OrLattice;
  val t_Misc5 = new M_MAX_LATTICE[T_Integer]("Misc5",t_Integer,0)
	with C_BASIC[T_Integer]
	with C_PRINTABLE[T_Integer]
	with C_ORDERED[T_Integer]
	with C_NUMERIC[T_Integer]
	with C_COMBINABLE[T_Integer]
	with C_LATTICE[T_Integer]
	with C_MAKE_LATTICE[T_Integer,T_Integer]
	with C_MAX_LATTICE[T_Integer,T_Integer];
  type T_Misc5 = /*TI*/T_MAX_LATTICE[T_Integer];
  type T_Misc6 = T_IEEEsingle;
  val t_Misc6 = t_IEEEsingle;
  type T_Misc7 = T_IEEEdouble;
  val t_Misc7 = t_IEEEdouble;
  type T_A = T_T;
  val t_A = t_T;
  type T_B = T_Integer;
  val t_B = t_Integer;
  class T_C(t : I_TYPE[T_C]) extends Value(t) { }
  val t_C = new I_TYPE[T_C]("C");

  type T_D = T_Result;
  val t_D = t_Result;
  type T_E = T_A;
  val t_E = t_A;
  type T_F = T_B;
  val t_F = t_B;
  type T_G = T_C;
  val t_G = t_C;
  type T_H = T_D;
  val t_H = t_D;
  type T_E2 = T_E;
  val t_E2 = t_E;
  type T_F2 = T_F;
  val t_F2 = t_F;
  type T_G2 = T_G;
  val t_G2 = t_G;
  type T_H2 = T_H;
  val t_H2 = t_H;
  val t_I = new M_GEN[T_A]("I",t_A)
	with C_PHYLUM[T_A]
	with C_GEN[T_A,T_T];
  type T_I = /*TI*/T_GEN[T_A];
  val t_J = new M_GEN[T_B]("J",t_B)
	with C_PHYLUM[T_B]
	with C_GEN[T_B,T_Integer];
  type T_J = /*TI*/T_GEN[T_B];
  val t_K = new M_GEN[T_C]("K",t_C)
	with C_PHYLUM[T_C]
	with C_GEN[T_C,];
  type T_K = /*TI*/T_GEN[T_C];
  val t_L = new M_GEN[T_D]("L",t_D)
	with C_PHYLUM[T_D]
	with C_GEN[T_D,T_L];
  type T_L = /*TI*/T_GEN[T_D];
  val t_I1 = new M_GEN[T_E]("I1",t_E)
	with C_PHYLUM[T_E]
	with C_GEN[T_E,T_T];
  type T_I1 = /*TI*/T_GEN[T_E];
  val t_J1 = new M_GEN[T_F]("J1",t_F)
	with C_PHYLUM[T_F]
	with C_GEN[T_F,T_Integer];
  type T_J1 = /*TI*/T_GEN[T_F];
  val t_K1 = new M_GEN[T_G]("K1",t_G)
	with C_PHYLUM[T_G]
	with C_GEN[T_G,];
  type T_K1 = /*TI*/T_GEN[T_G];
  val t_L1 = new M_GEN[T_H]("L1",t_H)
	with C_PHYLUM[T_H]
	with C_GEN[T_H,T_L1];
  type T_L1 = /*TI*/T_GEN[T_H];
  val t_I2 = new M_GEN[T_E2]("I2",t_E2)
	with C_PHYLUM[T_E2]
	with C_GEN[T_E2,T_T];
  type T_I2 = /*TI*/T_GEN[T_E2];
  val t_J2 = new M_GEN[T_F2]("J2",t_F2)
	with C_PHYLUM[T_F2]
	with C_GEN[T_F2,T_Integer];
  type T_J2 = /*TI*/T_GEN[T_F2];
  val t_K2 = new M_GEN[T_G2]("K2",t_G2)
	with C_PHYLUM[T_G2]
	with C_GEN[T_G2,];
  type T_K2 = /*TI*/T_GEN[T_G2];
  val t_L2 = new M_GEN[T_H2]("L2",t_H2)
	with C_PHYLUM[T_H2]
	with C_GEN[T_H2,T_L2];
  type T_L2 = /*TI*/T_GEN[T_H2];
  val t_M = new M_EXT[T_A]("M",t_A)
	with C_BASIC[T_A]
	with C_EXT[T_A,T_T];
  type T_M = /*TI*/T_EXT[T_A];
  val t_N = new M_EXT[T_B]("N",t_B)
	with C_BASIC[T_B]
	with C_PRINTABLE[T_B]
	with C_ORDERED[T_B]
	with C_NUMERIC[T_B]
	with C_EXT[T_B,T_Integer];
  type T_N = /*TI*/T_EXT[T_B];
  val t_O = new M_EXT[T_C]("O",t_C)
	with C_BASIC[T_C]
	with C_PHYLUM[T_C]
	with C_EXT[T_C,T_C];
  type T_O = /*TI*/T_EXT[T_C];
  val t_P = new M_EXT[T_D]("P",t_D)
	with C_BASIC[T_D]
	with C_PHYLUM[T_D]
	with C_EXT[T_D,T_Result];
  type T_P = /*TI*/T_EXT[T_D];
  val t_M1 = new M_EXT[T_E]("M1",t_E)
	with C_BASIC[T_E]
	with C_EXT[T_E,T_T];
  type T_M1 = /*TI*/T_EXT[T_E];
  val t_N1 = new M_EXT[T_F]("N1",t_F)
	with C_BASIC[T_F]
	with C_PRINTABLE[T_F]
	with C_ORDERED[T_F]
	with C_NUMERIC[T_F]
	with C_EXT[T_F,T_Integer];
  type T_N1 = /*TI*/T_EXT[T_F];
  val t_O1 = new M_EXT[T_G]("O1",t_G)
	with C_BASIC[T_G]
	with C_PHYLUM[T_G]
	with C_EXT[T_G,T_C];
  type T_O1 = /*TI*/T_EXT[T_G];
  val t_P1 = new M_EXT[T_H]("P1",t_H)
	with C_BASIC[T_H]
	with C_PHYLUM[T_H]
	with C_EXT[T_H,T_Result];
  type T_P1 = /*TI*/T_EXT[T_H];
  val t_M2 = new M_EXT[T_E2]("M2",t_E2)
	with C_BASIC[T_E2]
	with C_EXT[T_E2,T_T];
  type T_M2 = /*TI*/T_EXT[T_E2];
  val t_N2 = new M_EXT[T_F2]("N2",t_F2)
	with C_BASIC[T_F2]
	with C_PRINTABLE[T_F2]
	with C_ORDERED[T_F2]
	with C_NUMERIC[T_F2]
	with C_EXT[T_F2,T_Integer];
  type T_N2 = /*TI*/T_EXT[T_F2];
  val t_O2 = new M_EXT[T_G2]("O2",t_G2)
	with C_BASIC[T_G2]
	with C_PHYLUM[T_G2]
	with C_EXT[T_G2,T_C];
  type T_O2 = /*TI*/T_EXT[T_G2];
  val t_P2 = new M_EXT[T_H2]("P2",t_H2)
	with C_BASIC[T_H2]
	with C_PHYLUM[T_H2]
	with C_EXT[T_H2,T_Result];
  type T_P2 = /*TI*/T_EXT[T_H2];
  val t_Q = new M_GEN[T_T]("Q",t_T)
	with C_PHYLUM[T_T]
	with C_GEN[T_T,T_T];
  type T_Q = /*TI*/T_GEN[T_T];
  val t_R = new M_EXT[T_T]("R",t_T)
	with C_BASIC[T_T]
	with C_EXT[T_T,T_T];
  type T_R = /*TI*/T_EXT[T_T];
  type T_QA = t_Q.T_A;
  val t_QA = t_Q.t_A;
  type T_QB = t_Q.T_B;
  val t_QB = t_Q.t_B;
  type T_QC = t_Q.T_C;
  val t_QC = t_Q.t_C;
  type T_QD = t_Q.T_D;
  val t_QD = t_Q.t_D;
  type T_RA = t_R.T_A;
  val t_RA = t_R.t_A;
  type T_RB = t_R.T_B;
  val t_RB = t_R.t_B;
  type T_RC = t_R.T_C;
  val t_RC = t_R.t_C;
  type T_RD = t_R.T_D;
  val t_RD = t_R.t_D;
  type T_QE2 = t_Q.T_E;
  val t_QE2 = t_Q.t_E;
  type T_QF2 = t_Q.T_F;
  val t_QF2 = t_Q.t_F;
  type T_QG2 = t_Q.T_G;
  val t_QG2 = t_Q.t_G;
  type T_QH2 = t_Q.T_H;
  val t_QH2 = t_Q.t_H;
  type T_RE2 = t_R.T_E2;
  val t_RE2 = t_R.t_E2;
  type T_RF2 = t_R.T_F2;
  val t_RF2 = t_R.t_F2;
  type T_RG2 = t_R.T_G2;
  val t_RG2 = t_R.t_G2;
  type T_RH2 = t_R.T_H2;
  val t_RH2 = t_R.t_H2;
  type T_QI2 = t_Q.T_I2;
  val t_QI2 = t_Q.t_I2;
  type T_QJ2 = t_Q.T_J2;
  val t_QJ2 = t_Q.t_J2;
  type T_QK2 = t_Q.T_K2;
  val t_QK2 = t_Q.t_K2;
  type T_QL2 = t_Q.T_L2;
  val t_QL2 = t_Q.t_L2;
  type T_RI2 = t_R.T_I2;
  val t_RI2 = t_R.t_I2;
  type T_RJ2 = t_R.T_J2;
  val t_RJ2 = t_R.t_J2;
  type T_RK2 = t_R.T_K2;
  val t_RK2 = t_R.t_K2;
  type T_RL2 = t_R.T_L2;
  val t_RL2 = t_R.t_L2;
  type T_QM2 = t_Q.T_M2;
  val t_QM2 = t_Q.t_M2;
  type T_QN2 = t_Q.T_N2;
  val t_QN2 = t_Q.t_N2;
  type T_QO2 = t_Q.T_O2;
  val t_QO2 = t_Q.t_O2;
  type T_QP2 = t_Q.T_P2;
  val t_QP2 = t_Q.t_P2;
  type T_RM2 = t_R.T_M2;
  val t_RM2 = t_R.t_M2;
  type T_RN2 = t_R.T_N2;
  val t_RN2 = t_R.t_N2;
  type T_RO2 = t_R.T_O2;
  val t_RO2 = t_R.t_O2;
  type T_RP2 = t_R.T_P2;
  val t_RP2 = t_R.t_P2;
  type T_FT1 = (T_A,T_B,T_C,T_D) => T_D;
  val t_FT1 = new C_NULL[(T_A,T_B,T_C,T_D) => T_D];
  type T_FT2 = (T_E,T_F,T_G,T_H) => T_H;
  val t_FT2 = new C_NULL[(T_E,T_F,T_G,T_H) => T_H];
  type T_FT3 = (T_E2,T_F2,T_G2,T_H2) => T_H2;
  val t_FT3 = new C_NULL[(T_E2,T_F2,T_G2,T_H2) => T_H2];
  type T_FT4 = (T_I,T_J,T_K,T_L) => T_L2;
  val t_FT4 = new C_NULL[(T_I,T_J,T_K,T_L) => T_L2];
  type T_FT5 = (T_I2,T_J2,T_K2,T_L2) => T_L2;
  val t_FT5 = new C_NULL[(T_I2,T_J2,T_K2,T_L2) => T_L2];
  type T_FT6 = (T_M,T_N,T_O,T_P) => T_P;
  val t_FT6 = new C_NULL[(T_M,T_N,T_O,T_P) => T_P];
  type T_FT7 = (T_M1,T_N1,T_O1,T_P1) => T_P1;
  val t_FT7 = new C_NULL[(T_M1,T_N1,T_O1,T_P1) => T_P1];
  type T_FT8 = (T_M2,T_N2,T_O2,T_P2) => T_P2;
  val t_FT8 = new C_NULL[(T_M2,T_N2,T_O2,T_P2) => T_P2];
  override def finish() : Unit = {
    super.finish();
  }

}

trait C_EXT[T_Result, T_T] extends C_TYPE[T_Result] with C_BASIC[T_Result] {
  type T_A;
  val t_A : C_TYPE[T_A] with C_BASIC[T_A];
  type T_B;
  val t_B : C_TYPE[T_B]with C_INTEGER[T_B];
  type T_C;
  val t_C : C_TYPE[T_C];
  type T_D;
  val t_D : C_TYPE[T_D] with C_BASIC[T_D];
  type T_E;
  val t_E : C_TYPE[T_E] with C_BASIC[T_E];
  type T_F;
  val t_F : C_TYPE[T_F]with C_INTEGER[T_F];
  type T_G;
  val t_G : C_TYPE[T_G];
  type T_H;
  val t_H : C_TYPE[T_H] with C_BASIC[T_H];
  type T_E2;
  val t_E2 : C_TYPE[T_E2] with C_BASIC[T_E2];
  type T_F2;
  val t_F2 : C_TYPE[T_F2]with C_INTEGER[T_F2];
  type T_G2;
  val t_G2 : C_TYPE[T_G2];
  type T_H2;
  val t_H2 : C_TYPE[T_H2] with C_BASIC[T_H2];
  type T_I;
  val t_I : C_TYPE[T_I]with C_GEN[T_I,T_A];
  type T_J;
  val t_J : C_TYPE[T_J]with C_GEN[T_J,T_B];
  type T_K;
  val t_K : C_TYPE[T_K]with C_GEN[T_K,T_C];
  type T_L;
  val t_L : C_TYPE[T_L]with C_GEN[T_L,T_D];
  type T_I1;
  val t_I1 : C_TYPE[T_I1]with C_GEN[T_I1,T_E];
  type T_J1;
  val t_J1 : C_TYPE[T_J1]with C_GEN[T_J1,T_F];
  type T_K1;
  val t_K1 : C_TYPE[T_K1]with C_GEN[T_K1,T_G];
  type T_L1;
  val t_L1 : C_TYPE[T_L1]with C_GEN[T_L1,T_H];
  type T_I2;
  val t_I2 : C_TYPE[T_I2]with C_GEN[T_I2,T_E2];
  type T_J2;
  val t_J2 : C_TYPE[T_J2]with C_GEN[T_J2,T_F2];
  type T_K2;
  val t_K2 : C_TYPE[T_K2]with C_GEN[T_K2,T_G2];
  type T_L2;
  val t_L2 : C_TYPE[T_L2]with C_GEN[T_L2,T_H2];
  type T_M;
  val t_M : C_TYPE[T_M]with C_EXT[T_M,T_A];
  type T_N;
  val t_N : C_TYPE[T_N]with C_EXT[T_N,T_B];
  type T_O;
  val t_O : C_TYPE[T_O]with C_EXT[T_O,T_C];
  type T_P;
  val t_P : C_TYPE[T_P]with C_EXT[T_P,T_D];
  type T_M1;
  val t_M1 : C_TYPE[T_M1]with C_EXT[T_M1,T_E];
  type T_N1;
  val t_N1 : C_TYPE[T_N1]with C_EXT[T_N1,T_F];
  type T_O1;
  val t_O1 : C_TYPE[T_O1]with C_EXT[T_O1,T_G];
  type T_P1;
  val t_P1 : C_TYPE[T_P1]with C_EXT[T_P1,T_H];
  type T_M2;
  val t_M2 : C_TYPE[T_M2]with C_EXT[T_M2,T_E2];
  type T_N2;
  val t_N2 : C_TYPE[T_N2]with C_EXT[T_N2,T_F2];
  type T_O2;
  val t_O2 : C_TYPE[T_O2]with C_EXT[T_O2,T_G2];
  type T_P2;
  val t_P2 : C_TYPE[T_P2]with C_EXT[T_P2,T_H2];
  type T_FT1;
  val t_FT1 : C_TYPE[T_FT1];
  type T_FT2;
  val t_FT2 : C_TYPE[T_FT2];
  type T_FT3;
  val t_FT3 : C_TYPE[T_FT3];
  type T_FT4;
  val t_FT4 : C_TYPE[T_FT4];
  type T_FT5;
  val t_FT5 : C_TYPE[T_FT5];
  type T_FT6;
  val t_FT6 : C_TYPE[T_FT6];
  type T_FT7;
  val t_FT7 : C_TYPE[T_FT7];
  type T_FT8;
  val t_FT8 : C_TYPE[T_FT8];
}

class M_EXT[T_T](name : String,val t_T : C_TYPE[T_T] with C_BASIC[T_T])
  extends Module(name)
  with C_EXT[T_T,T_T]
{
  type T_Result = T_T;
  val v_equal = t_T.v_equal;

  val t_Result : this.type = this;
  type T_A = T_T;
  val t_A = t_T;
  type T_B = T_Integer;
  val t_B = t_Integer;
  class T_C(t : I_TYPE[T_C]) extends Value(t) { }
  val t_C = new I_TYPE[T_C]("C");

  type T_D = T_Result;
  val t_D = t_Result;
  type T_E = T_A;
  val t_E = t_A;
  type T_F = T_B;
  val t_F = t_B;
  type T_G = T_C;
  val t_G = t_C;
  type T_H = T_D;
  val t_H = t_D;
  type T_E2 = T_E;
  val t_E2 = t_E;
  type T_F2 = T_F;
  val t_F2 = t_F;
  type T_G2 = T_G;
  val t_G2 = t_G;
  type T_H2 = T_H;
  val t_H2 = t_H;
  val t_I = new M_GEN[T_A]("I",t_A)
	with C_PHYLUM[T_A]
	with C_GEN[T_A,T_T];
  type T_I = /*TI*/T_GEN[T_A];
  val t_J = new M_GEN[T_B]("J",t_B)
	with C_PHYLUM[T_B]
	with C_GEN[T_B,T_Integer];
  type T_J = /*TI*/T_GEN[T_B];
  val t_K = new M_GEN[T_C]("K",t_C)
	with C_PHYLUM[T_C]
	with C_GEN[T_C,T_C];
  type T_K = /*TI*/T_GEN[T_C];
  val t_L = new M_GEN[T_D]("L",t_D)
	with C_PHYLUM[T_D]
	with C_GEN[T_D,T_T];
  type T_L = /*TI*/T_GEN[T_D];
  val t_I1 = new M_GEN[T_E]("I1",t_E)
	with C_PHYLUM[T_E]
	with C_GEN[T_E,T_T];
  type T_I1 = /*TI*/T_GEN[T_E];
  val t_J1 = new M_GEN[T_F]("J1",t_F)
	with C_PHYLUM[T_F]
	with C_GEN[T_F,T_Integer];
  type T_J1 = /*TI*/T_GEN[T_F];
  val t_K1 = new M_GEN[T_G]("K1",t_G)
	with C_PHYLUM[T_G]
	with C_GEN[T_G,T_C];
  type T_K1 = /*TI*/T_GEN[T_G];
  val t_L1 = new M_GEN[T_H]("L1",t_H)
	with C_PHYLUM[T_H]
	with C_GEN[T_H,T_T];
  type T_L1 = /*TI*/T_GEN[T_H];
  val t_I2 = new M_GEN[T_E2]("I2",t_E2)
	with C_PHYLUM[T_E2]
	with C_GEN[T_E2,T_T];
  type T_I2 = /*TI*/T_GEN[T_E2];
  val t_J2 = new M_GEN[T_F2]("J2",t_F2)
	with C_PHYLUM[T_F2]
	with C_GEN[T_F2,T_Integer];
  type T_J2 = /*TI*/T_GEN[T_F2];
  val t_K2 = new M_GEN[T_G2]("K2",t_G2)
	with C_PHYLUM[T_G2]
	with C_GEN[T_G2,T_C];
  type T_K2 = /*TI*/T_GEN[T_G2];
  val t_L2 = new M_GEN[T_H2]("L2",t_H2)
	with C_PHYLUM[T_H2]
	with C_GEN[T_H2,T_T];
  type T_L2 = /*TI*/T_GEN[T_H2];
  val t_M = new M_EXT[T_A]("M",t_A)
	with C_BASIC[T_A]
	with C_EXT[T_A,T_T];
  type T_M = /*TI*/T_EXT[T_A];
  val t_N = new M_EXT[T_B]("N",t_B)
	with C_BASIC[T_B]
	with C_PRINTABLE[T_B]
	with C_ORDERED[T_B]
	with C_NUMERIC[T_B]
	with C_EXT[T_B,T_Integer];
  type T_N = /*TI*/T_EXT[T_B];
  val t_O = new M_EXT[T_C]("O",t_C)
	with C_BASIC[T_C]
	with C_PHYLUM[T_C]
	with C_EXT[T_C,];
  type T_O = /*TI*/T_EXT[T_C];
  val t_P = new M_EXT[T_D]("P",t_D)
	with C_BASIC[T_D]
	with C_EXT[T_D,T_Result];
  type T_P = /*TI*/T_EXT[T_D];
  val t_M1 = new M_EXT[T_E]("M1",t_E)
	with C_BASIC[T_E]
	with C_EXT[T_E,T_T];
  type T_M1 = /*TI*/T_EXT[T_E];
  val t_N1 = new M_EXT[T_F]("N1",t_F)
	with C_BASIC[T_F]
	with C_PRINTABLE[T_F]
	with C_ORDERED[T_F]
	with C_NUMERIC[T_F]
	with C_EXT[T_F,T_Integer];
  type T_N1 = /*TI*/T_EXT[T_F];
  val t_O1 = new M_EXT[T_G]("O1",t_G)
	with C_BASIC[T_G]
	with C_PHYLUM[T_G]
	with C_EXT[T_G,];
  type T_O1 = /*TI*/T_EXT[T_G];
  val t_P1 = new M_EXT[T_H]("P1",t_H)
	with C_BASIC[T_H]
	with C_EXT[T_H,T_Result];
  type T_P1 = /*TI*/T_EXT[T_H];
  val t_M2 = new M_EXT[T_E2]("M2",t_E2)
	with C_BASIC[T_E2]
	with C_EXT[T_E2,T_T];
  type T_M2 = /*TI*/T_EXT[T_E2];
  val t_N2 = new M_EXT[T_F2]("N2",t_F2)
	with C_BASIC[T_F2]
	with C_PRINTABLE[T_F2]
	with C_ORDERED[T_F2]
	with C_NUMERIC[T_F2]
	with C_EXT[T_F2,T_Integer];
  type T_N2 = /*TI*/T_EXT[T_F2];
  val t_O2 = new M_EXT[T_G2]("O2",t_G2)
	with C_BASIC[T_G2]
	with C_PHYLUM[T_G2]
	with C_EXT[T_G2,];
  type T_O2 = /*TI*/T_EXT[T_G2];
  val t_P2 = new M_EXT[T_H2]("P2",t_H2)
	with C_BASIC[T_H2]
	with C_EXT[T_H2,T_Result];
  type T_P2 = /*TI*/T_EXT[T_H2];
  type T_FT1 = (T_A,T_B,T_C,T_D) => T_D;
  val t_FT1 = new C_NULL[(T_A,T_B,T_C,T_D) => T_D];
  type T_FT2 = (T_E,T_F,T_G,T_H) => T_H;
  val t_FT2 = new C_NULL[(T_E,T_F,T_G,T_H) => T_H];
  type T_FT3 = (T_E2,T_F2,T_G2,T_H2) => T_H2;
  val t_FT3 = new C_NULL[(T_E2,T_F2,T_G2,T_H2) => T_H2];
  type T_FT4 = (T_I,T_J,T_K,T_L) => T_L2;
  val t_FT4 = new C_NULL[(T_I,T_J,T_K,T_L) => T_L2];
  type T_FT5 = (T_I2,T_J2,T_K2,T_L2) => T_L2;
  val t_FT5 = new C_NULL[(T_I2,T_J2,T_K2,T_L2) => T_L2];
  type T_FT6 = (T_M,T_N,T_O,T_P) => T_P;
  val t_FT6 = new C_NULL[(T_M,T_N,T_O,T_P) => T_P];
  type T_FT7 = (T_M1,T_N1,T_O1,T_P1) => T_P1;
  val t_FT7 = new C_NULL[(T_M1,T_N1,T_O1,T_P1) => T_P1];
  type T_FT8 = (T_M2,T_N2,T_O2,T_P2) => T_P2;
  val t_FT8 = new C_NULL[(T_M2,T_N2,T_O2,T_P2) => T_P2];
  override def finish() : Unit = {
    super.finish();
  }

}

